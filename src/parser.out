Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> assign_instr
Rule 5     instruction -> if_instr
Rule 6     instruction -> while_instr
Rule 7     instruction -> for_instr
Rule 8     instruction -> break_instr
Rule 9     instruction -> continue_instr
Rule 10    instruction -> return_instr
Rule 11    instruction -> print_instr
Rule 12    instruction -> expression
Rule 13    instruction -> { instructions }
Rule 14    assign_instr -> ID = expression ;
Rule 15    assign_instr -> ID PLUSASSIGN expression ;
Rule 16    assign_instr -> ID SUBASSIGN expression ;
Rule 17    assign_instr -> ID MULASSIGN expression ;
Rule 18    assign_instr -> ID DIVASSIGN expression ;
Rule 19    assign_instr -> ID = array ;
Rule 20    assign_instr -> ID = ID [ indexes ] ;
Rule 21    assign_instr -> ID PLUSASSIGN ID [ indexes ] ;
Rule 22    assign_instr -> ID SUBASSIGN ID [ indexes ] ;
Rule 23    assign_instr -> ID MULASSIGN ID [ indexes ] ;
Rule 24    assign_instr -> ID DIVASSIGN ID [ indexes ] ;
Rule 25    assign_instr -> ID [ indexes ] = expression ;
Rule 26    assign_instr -> ID [ indexes ] PLUSASSIGN expression ;
Rule 27    assign_instr -> ID [ indexes ] SUBASSIGN expression ;
Rule 28    assign_instr -> ID [ indexes ] MULASSIGN expression ;
Rule 29    assign_instr -> ID [ indexes ] DIVASSIGN expression ;
Rule 30    assign_instr -> ID = ( - expression ) ;
Rule 31    array -> [ subarrays ]
Rule 32    array -> [ indexes ]
Rule 33    subarrays -> subarrays , array
Rule 34    subarrays -> array
Rule 35    indexes -> indexes , index
Rule 36    indexes -> index
Rule 37    index -> INTNUM
Rule 38    index -> ID
Rule 39    if_instr -> IF ( expression ) instruction
Rule 40    if_instr -> IF ( expression ) instruction ELSE instruction
Rule 41    while_instr -> WHILE ( expression ) instruction
Rule 42    for_instr -> FOR range instruction
Rule 43    range -> ID = expression : expression
Rule 44    break_instr -> BREAK ;
Rule 45    continue_instr -> CONTINUE ;
Rule 46    return_instr -> RETURN ;
Rule 47    return_instr -> RETURN expression ;
Rule 48    print_instr -> PRINT printable ;
Rule 49    printable -> printable , expression
Rule 50    printable -> expression
Rule 51    expression -> expression LESSER_THAN expression
Rule 52    expression -> expression GREATER_THAN expression
Rule 53    expression -> expression LESSER_EQUAL expression
Rule 54    expression -> expression GREATER_EQUAL expression
Rule 55    expression -> expression NOT_EQUAL expression
Rule 56    expression -> expression EQUAL expression
Rule 57    expression -> expression + expression
Rule 58    expression -> expression - expression
Rule 59    expression -> expression * expression
Rule 60    expression -> expression / expression
Rule 61    expression -> expression DOTADD expression
Rule 62    expression -> expression DOTSUB expression
Rule 63    expression -> expression DOTMUL expression
Rule 64    expression -> expression DOTDIV expression
Rule 65    expression -> expression '
Rule 66    expression -> EYE ( indexes )
Rule 67    expression -> ONES ( indexes )
Rule 68    expression -> ZEROS ( indexes )
Rule 69    expression -> ( expression )
Rule 70    expression -> INTNUM
Rule 71    expression -> FLOATNUM
Rule 72    expression -> STRING
Rule 73    expression -> ID

Terminals, with rules where they appear

'                    : 65
(                    : 30 39 40 41 66 67 68 69
)                    : 30 39 40 41 66 67 68 69
*                    : 59
+                    : 57
,                    : 33 35 49
-                    : 30 58
/                    : 60
:                    : 43
;                    : 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 44 45 46 47 48
=                    : 14 19 20 25 30 43
BREAK                : 44
CONTINUE             : 45
DIVASSIGN            : 18 24 29
DOTADD               : 61
DOTDIV               : 64
DOTMUL               : 63
DOTSUB               : 62
ELSE                 : 40
EQUAL                : 56
EYE                  : 66
FLOATNUM             : 71
FOR                  : 42
GREATER_EQUAL        : 54
GREATER_THAN         : 52
ID                   : 14 15 16 17 18 19 20 20 21 21 22 22 23 23 24 24 25 26 27 28 29 30 38 43 73
IF                   : 39 40
INTNUM               : 37 70
LESSER_EQUAL         : 53
LESSER_THAN          : 51
MULASSIGN            : 17 23 28
NOT_EQUAL            : 55
ONES                 : 67
PLUSASSIGN           : 15 21 26
PRINT                : 48
RETURN               : 46 47
STRING               : 72
SUBASSIGN            : 16 22 27
WHILE                : 41
ZEROS                : 68
[                    : 20 21 22 23 24 25 26 27 28 29 31 32
]                    : 20 21 22 23 24 25 26 27 28 29 31 32
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

array                : 19 33 34
assign_instr         : 4
break_instr          : 8
continue_instr       : 9
expression           : 12 14 15 16 17 18 25 26 27 28 29 30 39 40 41 43 43 47 49 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 69
for_instr            : 7
if_instr             : 5
index                : 35 36
indexes              : 20 21 22 23 24 25 26 27 28 29 32 35 66 67 68
instruction          : 2 3 39 40 40 41 42
instructions         : 1 2 13
print_instr          : 11
printable            : 48 49
program              : 0
range                : 42
return_instr         : 10
subarrays            : 31 33
while_instr          : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    instruction                    shift and go to state 29
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 3

    (3) instructions -> instruction .

    {               reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    EYE             reduce using rule 3 (instructions -> instruction .)
    ONES            reduce using rule 3 (instructions -> instruction .)
    ZEROS           reduce using rule 3 (instructions -> instruction .)
    (               reduce using rule 3 (instructions -> instruction .)
    INTNUM          reduce using rule 3 (instructions -> instruction .)
    FLOATNUM        reduce using rule 3 (instructions -> instruction .)
    STRING          reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> assign_instr .

    {               reduce using rule 4 (instruction -> assign_instr .)
    ID              reduce using rule 4 (instruction -> assign_instr .)
    IF              reduce using rule 4 (instruction -> assign_instr .)
    WHILE           reduce using rule 4 (instruction -> assign_instr .)
    FOR             reduce using rule 4 (instruction -> assign_instr .)
    BREAK           reduce using rule 4 (instruction -> assign_instr .)
    CONTINUE        reduce using rule 4 (instruction -> assign_instr .)
    RETURN          reduce using rule 4 (instruction -> assign_instr .)
    PRINT           reduce using rule 4 (instruction -> assign_instr .)
    EYE             reduce using rule 4 (instruction -> assign_instr .)
    ONES            reduce using rule 4 (instruction -> assign_instr .)
    ZEROS           reduce using rule 4 (instruction -> assign_instr .)
    (               reduce using rule 4 (instruction -> assign_instr .)
    INTNUM          reduce using rule 4 (instruction -> assign_instr .)
    FLOATNUM        reduce using rule 4 (instruction -> assign_instr .)
    STRING          reduce using rule 4 (instruction -> assign_instr .)
    $end            reduce using rule 4 (instruction -> assign_instr .)
    }               reduce using rule 4 (instruction -> assign_instr .)
    ELSE            reduce using rule 4 (instruction -> assign_instr .)


state 5

    (5) instruction -> if_instr .

    {               reduce using rule 5 (instruction -> if_instr .)
    ID              reduce using rule 5 (instruction -> if_instr .)
    IF              reduce using rule 5 (instruction -> if_instr .)
    WHILE           reduce using rule 5 (instruction -> if_instr .)
    FOR             reduce using rule 5 (instruction -> if_instr .)
    BREAK           reduce using rule 5 (instruction -> if_instr .)
    CONTINUE        reduce using rule 5 (instruction -> if_instr .)
    RETURN          reduce using rule 5 (instruction -> if_instr .)
    PRINT           reduce using rule 5 (instruction -> if_instr .)
    EYE             reduce using rule 5 (instruction -> if_instr .)
    ONES            reduce using rule 5 (instruction -> if_instr .)
    ZEROS           reduce using rule 5 (instruction -> if_instr .)
    (               reduce using rule 5 (instruction -> if_instr .)
    INTNUM          reduce using rule 5 (instruction -> if_instr .)
    FLOATNUM        reduce using rule 5 (instruction -> if_instr .)
    STRING          reduce using rule 5 (instruction -> if_instr .)
    $end            reduce using rule 5 (instruction -> if_instr .)
    }               reduce using rule 5 (instruction -> if_instr .)
    ELSE            reduce using rule 5 (instruction -> if_instr .)


state 6

    (6) instruction -> while_instr .

    {               reduce using rule 6 (instruction -> while_instr .)
    ID              reduce using rule 6 (instruction -> while_instr .)
    IF              reduce using rule 6 (instruction -> while_instr .)
    WHILE           reduce using rule 6 (instruction -> while_instr .)
    FOR             reduce using rule 6 (instruction -> while_instr .)
    BREAK           reduce using rule 6 (instruction -> while_instr .)
    CONTINUE        reduce using rule 6 (instruction -> while_instr .)
    RETURN          reduce using rule 6 (instruction -> while_instr .)
    PRINT           reduce using rule 6 (instruction -> while_instr .)
    EYE             reduce using rule 6 (instruction -> while_instr .)
    ONES            reduce using rule 6 (instruction -> while_instr .)
    ZEROS           reduce using rule 6 (instruction -> while_instr .)
    (               reduce using rule 6 (instruction -> while_instr .)
    INTNUM          reduce using rule 6 (instruction -> while_instr .)
    FLOATNUM        reduce using rule 6 (instruction -> while_instr .)
    STRING          reduce using rule 6 (instruction -> while_instr .)
    $end            reduce using rule 6 (instruction -> while_instr .)
    }               reduce using rule 6 (instruction -> while_instr .)
    ELSE            reduce using rule 6 (instruction -> while_instr .)


state 7

    (7) instruction -> for_instr .

    {               reduce using rule 7 (instruction -> for_instr .)
    ID              reduce using rule 7 (instruction -> for_instr .)
    IF              reduce using rule 7 (instruction -> for_instr .)
    WHILE           reduce using rule 7 (instruction -> for_instr .)
    FOR             reduce using rule 7 (instruction -> for_instr .)
    BREAK           reduce using rule 7 (instruction -> for_instr .)
    CONTINUE        reduce using rule 7 (instruction -> for_instr .)
    RETURN          reduce using rule 7 (instruction -> for_instr .)
    PRINT           reduce using rule 7 (instruction -> for_instr .)
    EYE             reduce using rule 7 (instruction -> for_instr .)
    ONES            reduce using rule 7 (instruction -> for_instr .)
    ZEROS           reduce using rule 7 (instruction -> for_instr .)
    (               reduce using rule 7 (instruction -> for_instr .)
    INTNUM          reduce using rule 7 (instruction -> for_instr .)
    FLOATNUM        reduce using rule 7 (instruction -> for_instr .)
    STRING          reduce using rule 7 (instruction -> for_instr .)
    $end            reduce using rule 7 (instruction -> for_instr .)
    }               reduce using rule 7 (instruction -> for_instr .)
    ELSE            reduce using rule 7 (instruction -> for_instr .)


state 8

    (8) instruction -> break_instr .

    {               reduce using rule 8 (instruction -> break_instr .)
    ID              reduce using rule 8 (instruction -> break_instr .)
    IF              reduce using rule 8 (instruction -> break_instr .)
    WHILE           reduce using rule 8 (instruction -> break_instr .)
    FOR             reduce using rule 8 (instruction -> break_instr .)
    BREAK           reduce using rule 8 (instruction -> break_instr .)
    CONTINUE        reduce using rule 8 (instruction -> break_instr .)
    RETURN          reduce using rule 8 (instruction -> break_instr .)
    PRINT           reduce using rule 8 (instruction -> break_instr .)
    EYE             reduce using rule 8 (instruction -> break_instr .)
    ONES            reduce using rule 8 (instruction -> break_instr .)
    ZEROS           reduce using rule 8 (instruction -> break_instr .)
    (               reduce using rule 8 (instruction -> break_instr .)
    INTNUM          reduce using rule 8 (instruction -> break_instr .)
    FLOATNUM        reduce using rule 8 (instruction -> break_instr .)
    STRING          reduce using rule 8 (instruction -> break_instr .)
    $end            reduce using rule 8 (instruction -> break_instr .)
    }               reduce using rule 8 (instruction -> break_instr .)
    ELSE            reduce using rule 8 (instruction -> break_instr .)


state 9

    (9) instruction -> continue_instr .

    {               reduce using rule 9 (instruction -> continue_instr .)
    ID              reduce using rule 9 (instruction -> continue_instr .)
    IF              reduce using rule 9 (instruction -> continue_instr .)
    WHILE           reduce using rule 9 (instruction -> continue_instr .)
    FOR             reduce using rule 9 (instruction -> continue_instr .)
    BREAK           reduce using rule 9 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 9 (instruction -> continue_instr .)
    RETURN          reduce using rule 9 (instruction -> continue_instr .)
    PRINT           reduce using rule 9 (instruction -> continue_instr .)
    EYE             reduce using rule 9 (instruction -> continue_instr .)
    ONES            reduce using rule 9 (instruction -> continue_instr .)
    ZEROS           reduce using rule 9 (instruction -> continue_instr .)
    (               reduce using rule 9 (instruction -> continue_instr .)
    INTNUM          reduce using rule 9 (instruction -> continue_instr .)
    FLOATNUM        reduce using rule 9 (instruction -> continue_instr .)
    STRING          reduce using rule 9 (instruction -> continue_instr .)
    $end            reduce using rule 9 (instruction -> continue_instr .)
    }               reduce using rule 9 (instruction -> continue_instr .)
    ELSE            reduce using rule 9 (instruction -> continue_instr .)


state 10

    (10) instruction -> return_instr .

    {               reduce using rule 10 (instruction -> return_instr .)
    ID              reduce using rule 10 (instruction -> return_instr .)
    IF              reduce using rule 10 (instruction -> return_instr .)
    WHILE           reduce using rule 10 (instruction -> return_instr .)
    FOR             reduce using rule 10 (instruction -> return_instr .)
    BREAK           reduce using rule 10 (instruction -> return_instr .)
    CONTINUE        reduce using rule 10 (instruction -> return_instr .)
    RETURN          reduce using rule 10 (instruction -> return_instr .)
    PRINT           reduce using rule 10 (instruction -> return_instr .)
    EYE             reduce using rule 10 (instruction -> return_instr .)
    ONES            reduce using rule 10 (instruction -> return_instr .)
    ZEROS           reduce using rule 10 (instruction -> return_instr .)
    (               reduce using rule 10 (instruction -> return_instr .)
    INTNUM          reduce using rule 10 (instruction -> return_instr .)
    FLOATNUM        reduce using rule 10 (instruction -> return_instr .)
    STRING          reduce using rule 10 (instruction -> return_instr .)
    $end            reduce using rule 10 (instruction -> return_instr .)
    }               reduce using rule 10 (instruction -> return_instr .)
    ELSE            reduce using rule 10 (instruction -> return_instr .)


state 11

    (11) instruction -> print_instr .

    {               reduce using rule 11 (instruction -> print_instr .)
    ID              reduce using rule 11 (instruction -> print_instr .)
    IF              reduce using rule 11 (instruction -> print_instr .)
    WHILE           reduce using rule 11 (instruction -> print_instr .)
    FOR             reduce using rule 11 (instruction -> print_instr .)
    BREAK           reduce using rule 11 (instruction -> print_instr .)
    CONTINUE        reduce using rule 11 (instruction -> print_instr .)
    RETURN          reduce using rule 11 (instruction -> print_instr .)
    PRINT           reduce using rule 11 (instruction -> print_instr .)
    EYE             reduce using rule 11 (instruction -> print_instr .)
    ONES            reduce using rule 11 (instruction -> print_instr .)
    ZEROS           reduce using rule 11 (instruction -> print_instr .)
    (               reduce using rule 11 (instruction -> print_instr .)
    INTNUM          reduce using rule 11 (instruction -> print_instr .)
    FLOATNUM        reduce using rule 11 (instruction -> print_instr .)
    STRING          reduce using rule 11 (instruction -> print_instr .)
    $end            reduce using rule 11 (instruction -> print_instr .)
    }               reduce using rule 11 (instruction -> print_instr .)
    ELSE            reduce using rule 11 (instruction -> print_instr .)


state 12

    (12) instruction -> expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    {               reduce using rule 12 (instruction -> expression .)
    ID              reduce using rule 12 (instruction -> expression .)
    IF              reduce using rule 12 (instruction -> expression .)
    WHILE           reduce using rule 12 (instruction -> expression .)
    FOR             reduce using rule 12 (instruction -> expression .)
    BREAK           reduce using rule 12 (instruction -> expression .)
    CONTINUE        reduce using rule 12 (instruction -> expression .)
    RETURN          reduce using rule 12 (instruction -> expression .)
    PRINT           reduce using rule 12 (instruction -> expression .)
    EYE             reduce using rule 12 (instruction -> expression .)
    ONES            reduce using rule 12 (instruction -> expression .)
    ZEROS           reduce using rule 12 (instruction -> expression .)
    (               reduce using rule 12 (instruction -> expression .)
    INTNUM          reduce using rule 12 (instruction -> expression .)
    FLOATNUM        reduce using rule 12 (instruction -> expression .)
    STRING          reduce using rule 12 (instruction -> expression .)
    $end            reduce using rule 12 (instruction -> expression .)
    }               reduce using rule 12 (instruction -> expression .)
    ELSE            reduce using rule 12 (instruction -> expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 13

    (13) instruction -> { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    instructions                   shift and go to state 45
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 14

    (14) assign_instr -> ID . = expression ;
    (15) assign_instr -> ID . PLUSASSIGN expression ;
    (16) assign_instr -> ID . SUBASSIGN expression ;
    (17) assign_instr -> ID . MULASSIGN expression ;
    (18) assign_instr -> ID . DIVASSIGN expression ;
    (19) assign_instr -> ID . = array ;
    (20) assign_instr -> ID . = ID [ indexes ] ;
    (21) assign_instr -> ID . PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> ID . SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> ID . MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> ID . DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> ID . [ indexes ] = expression ;
    (26) assign_instr -> ID . [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> ID . [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> ID . [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> ID . [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> ID . = ( - expression ) ;
    (73) expression -> ID .

    =               shift and go to state 46
    PLUSASSIGN      shift and go to state 47
    SUBASSIGN       shift and go to state 48
    MULASSIGN       shift and go to state 49
    DIVASSIGN       shift and go to state 50
    [               shift and go to state 51
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)
    {               reduce using rule 73 (expression -> ID .)
    ID              reduce using rule 73 (expression -> ID .)
    IF              reduce using rule 73 (expression -> ID .)
    WHILE           reduce using rule 73 (expression -> ID .)
    FOR             reduce using rule 73 (expression -> ID .)
    BREAK           reduce using rule 73 (expression -> ID .)
    CONTINUE        reduce using rule 73 (expression -> ID .)
    RETURN          reduce using rule 73 (expression -> ID .)
    PRINT           reduce using rule 73 (expression -> ID .)
    EYE             reduce using rule 73 (expression -> ID .)
    ONES            reduce using rule 73 (expression -> ID .)
    ZEROS           reduce using rule 73 (expression -> ID .)
    (               reduce using rule 73 (expression -> ID .)
    INTNUM          reduce using rule 73 (expression -> ID .)
    FLOATNUM        reduce using rule 73 (expression -> ID .)
    STRING          reduce using rule 73 (expression -> ID .)
    $end            reduce using rule 73 (expression -> ID .)
    }               reduce using rule 73 (expression -> ID .)
    ELSE            reduce using rule 73 (expression -> ID .)


state 15

    (69) expression -> ( . expression )
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 52

state 16

    (39) if_instr -> IF . ( expression ) instruction
    (40) if_instr -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 54


state 17

    (41) while_instr -> WHILE . ( expression ) instruction

    (               shift and go to state 55


state 18

    (42) for_instr -> FOR . range instruction
    (43) range -> . ID = expression : expression

    ID              shift and go to state 57

    range                          shift and go to state 56

state 19

    (44) break_instr -> BREAK . ;

    ;               shift and go to state 58


state 20

    (45) continue_instr -> CONTINUE . ;

    ;               shift and go to state 59


state 21

    (46) return_instr -> RETURN . ;
    (47) return_instr -> RETURN . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    ;               shift and go to state 60
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 61

state 22

    (48) print_instr -> PRINT . printable ;
    (49) printable -> . printable , expression
    (50) printable -> . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    printable                      shift and go to state 62
    expression                     shift and go to state 63

state 23

    (66) expression -> EYE . ( indexes )

    (               shift and go to state 64


state 24

    (67) expression -> ONES . ( indexes )

    (               shift and go to state 65


state 25

    (68) expression -> ZEROS . ( indexes )

    (               shift and go to state 66


state 26

    (70) expression -> INTNUM .

    LESSER_THAN     reduce using rule 70 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 70 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 70 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 70 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 70 (expression -> INTNUM .)
    EQUAL           reduce using rule 70 (expression -> INTNUM .)
    +               reduce using rule 70 (expression -> INTNUM .)
    -               reduce using rule 70 (expression -> INTNUM .)
    *               reduce using rule 70 (expression -> INTNUM .)
    /               reduce using rule 70 (expression -> INTNUM .)
    DOTADD          reduce using rule 70 (expression -> INTNUM .)
    DOTSUB          reduce using rule 70 (expression -> INTNUM .)
    DOTMUL          reduce using rule 70 (expression -> INTNUM .)
    DOTDIV          reduce using rule 70 (expression -> INTNUM .)
    '               reduce using rule 70 (expression -> INTNUM .)
    {               reduce using rule 70 (expression -> INTNUM .)
    ID              reduce using rule 70 (expression -> INTNUM .)
    IF              reduce using rule 70 (expression -> INTNUM .)
    WHILE           reduce using rule 70 (expression -> INTNUM .)
    FOR             reduce using rule 70 (expression -> INTNUM .)
    BREAK           reduce using rule 70 (expression -> INTNUM .)
    CONTINUE        reduce using rule 70 (expression -> INTNUM .)
    RETURN          reduce using rule 70 (expression -> INTNUM .)
    PRINT           reduce using rule 70 (expression -> INTNUM .)
    EYE             reduce using rule 70 (expression -> INTNUM .)
    ONES            reduce using rule 70 (expression -> INTNUM .)
    ZEROS           reduce using rule 70 (expression -> INTNUM .)
    (               reduce using rule 70 (expression -> INTNUM .)
    INTNUM          reduce using rule 70 (expression -> INTNUM .)
    FLOATNUM        reduce using rule 70 (expression -> INTNUM .)
    STRING          reduce using rule 70 (expression -> INTNUM .)
    $end            reduce using rule 70 (expression -> INTNUM .)
    }               reduce using rule 70 (expression -> INTNUM .)
    )               reduce using rule 70 (expression -> INTNUM .)
    ;               reduce using rule 70 (expression -> INTNUM .)
    ,               reduce using rule 70 (expression -> INTNUM .)
    ELSE            reduce using rule 70 (expression -> INTNUM .)
    :               reduce using rule 70 (expression -> INTNUM .)


state 27

    (71) expression -> FLOATNUM .

    LESSER_THAN     reduce using rule 71 (expression -> FLOATNUM .)
    GREATER_THAN    reduce using rule 71 (expression -> FLOATNUM .)
    LESSER_EQUAL    reduce using rule 71 (expression -> FLOATNUM .)
    GREATER_EQUAL   reduce using rule 71 (expression -> FLOATNUM .)
    NOT_EQUAL       reduce using rule 71 (expression -> FLOATNUM .)
    EQUAL           reduce using rule 71 (expression -> FLOATNUM .)
    +               reduce using rule 71 (expression -> FLOATNUM .)
    -               reduce using rule 71 (expression -> FLOATNUM .)
    *               reduce using rule 71 (expression -> FLOATNUM .)
    /               reduce using rule 71 (expression -> FLOATNUM .)
    DOTADD          reduce using rule 71 (expression -> FLOATNUM .)
    DOTSUB          reduce using rule 71 (expression -> FLOATNUM .)
    DOTMUL          reduce using rule 71 (expression -> FLOATNUM .)
    DOTDIV          reduce using rule 71 (expression -> FLOATNUM .)
    '               reduce using rule 71 (expression -> FLOATNUM .)
    {               reduce using rule 71 (expression -> FLOATNUM .)
    ID              reduce using rule 71 (expression -> FLOATNUM .)
    IF              reduce using rule 71 (expression -> FLOATNUM .)
    WHILE           reduce using rule 71 (expression -> FLOATNUM .)
    FOR             reduce using rule 71 (expression -> FLOATNUM .)
    BREAK           reduce using rule 71 (expression -> FLOATNUM .)
    CONTINUE        reduce using rule 71 (expression -> FLOATNUM .)
    RETURN          reduce using rule 71 (expression -> FLOATNUM .)
    PRINT           reduce using rule 71 (expression -> FLOATNUM .)
    EYE             reduce using rule 71 (expression -> FLOATNUM .)
    ONES            reduce using rule 71 (expression -> FLOATNUM .)
    ZEROS           reduce using rule 71 (expression -> FLOATNUM .)
    (               reduce using rule 71 (expression -> FLOATNUM .)
    INTNUM          reduce using rule 71 (expression -> FLOATNUM .)
    FLOATNUM        reduce using rule 71 (expression -> FLOATNUM .)
    STRING          reduce using rule 71 (expression -> FLOATNUM .)
    $end            reduce using rule 71 (expression -> FLOATNUM .)
    }               reduce using rule 71 (expression -> FLOATNUM .)
    )               reduce using rule 71 (expression -> FLOATNUM .)
    ;               reduce using rule 71 (expression -> FLOATNUM .)
    ,               reduce using rule 71 (expression -> FLOATNUM .)
    ELSE            reduce using rule 71 (expression -> FLOATNUM .)
    :               reduce using rule 71 (expression -> FLOATNUM .)


state 28

    (72) expression -> STRING .

    LESSER_THAN     reduce using rule 72 (expression -> STRING .)
    GREATER_THAN    reduce using rule 72 (expression -> STRING .)
    LESSER_EQUAL    reduce using rule 72 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 72 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 72 (expression -> STRING .)
    EQUAL           reduce using rule 72 (expression -> STRING .)
    +               reduce using rule 72 (expression -> STRING .)
    -               reduce using rule 72 (expression -> STRING .)
    *               reduce using rule 72 (expression -> STRING .)
    /               reduce using rule 72 (expression -> STRING .)
    DOTADD          reduce using rule 72 (expression -> STRING .)
    DOTSUB          reduce using rule 72 (expression -> STRING .)
    DOTMUL          reduce using rule 72 (expression -> STRING .)
    DOTDIV          reduce using rule 72 (expression -> STRING .)
    '               reduce using rule 72 (expression -> STRING .)
    {               reduce using rule 72 (expression -> STRING .)
    ID              reduce using rule 72 (expression -> STRING .)
    IF              reduce using rule 72 (expression -> STRING .)
    WHILE           reduce using rule 72 (expression -> STRING .)
    FOR             reduce using rule 72 (expression -> STRING .)
    BREAK           reduce using rule 72 (expression -> STRING .)
    CONTINUE        reduce using rule 72 (expression -> STRING .)
    RETURN          reduce using rule 72 (expression -> STRING .)
    PRINT           reduce using rule 72 (expression -> STRING .)
    EYE             reduce using rule 72 (expression -> STRING .)
    ONES            reduce using rule 72 (expression -> STRING .)
    ZEROS           reduce using rule 72 (expression -> STRING .)
    (               reduce using rule 72 (expression -> STRING .)
    INTNUM          reduce using rule 72 (expression -> STRING .)
    FLOATNUM        reduce using rule 72 (expression -> STRING .)
    STRING          reduce using rule 72 (expression -> STRING .)
    $end            reduce using rule 72 (expression -> STRING .)
    }               reduce using rule 72 (expression -> STRING .)
    )               reduce using rule 72 (expression -> STRING .)
    ;               reduce using rule 72 (expression -> STRING .)
    ,               reduce using rule 72 (expression -> STRING .)
    ELSE            reduce using rule 72 (expression -> STRING .)
    :               reduce using rule 72 (expression -> STRING .)


state 29

    (2) instructions -> instructions instruction .

    {               reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 30

    (51) expression -> expression LESSER_THAN . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 67

state 31

    (52) expression -> expression GREATER_THAN . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 68

state 32

    (53) expression -> expression LESSER_EQUAL . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 69

state 33

    (54) expression -> expression GREATER_EQUAL . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 70

state 34

    (55) expression -> expression NOT_EQUAL . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 71

state 35

    (56) expression -> expression EQUAL . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 72

state 36

    (57) expression -> expression + . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 73

state 37

    (58) expression -> expression - . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 74

state 38

    (59) expression -> expression * . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 75

state 39

    (60) expression -> expression / . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 76

state 40

    (61) expression -> expression DOTADD . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 77

state 41

    (62) expression -> expression DOTSUB . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 78

state 42

    (63) expression -> expression DOTMUL . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 79

state 43

    (64) expression -> expression DOTDIV . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 80

state 44

    (65) expression -> expression ' .

    LESSER_THAN     reduce using rule 65 (expression -> expression ' .)
    GREATER_THAN    reduce using rule 65 (expression -> expression ' .)
    LESSER_EQUAL    reduce using rule 65 (expression -> expression ' .)
    GREATER_EQUAL   reduce using rule 65 (expression -> expression ' .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression ' .)
    EQUAL           reduce using rule 65 (expression -> expression ' .)
    +               reduce using rule 65 (expression -> expression ' .)
    -               reduce using rule 65 (expression -> expression ' .)
    *               reduce using rule 65 (expression -> expression ' .)
    /               reduce using rule 65 (expression -> expression ' .)
    DOTADD          reduce using rule 65 (expression -> expression ' .)
    DOTSUB          reduce using rule 65 (expression -> expression ' .)
    DOTMUL          reduce using rule 65 (expression -> expression ' .)
    DOTDIV          reduce using rule 65 (expression -> expression ' .)
    '               reduce using rule 65 (expression -> expression ' .)
    {               reduce using rule 65 (expression -> expression ' .)
    ID              reduce using rule 65 (expression -> expression ' .)
    IF              reduce using rule 65 (expression -> expression ' .)
    WHILE           reduce using rule 65 (expression -> expression ' .)
    FOR             reduce using rule 65 (expression -> expression ' .)
    BREAK           reduce using rule 65 (expression -> expression ' .)
    CONTINUE        reduce using rule 65 (expression -> expression ' .)
    RETURN          reduce using rule 65 (expression -> expression ' .)
    PRINT           reduce using rule 65 (expression -> expression ' .)
    EYE             reduce using rule 65 (expression -> expression ' .)
    ONES            reduce using rule 65 (expression -> expression ' .)
    ZEROS           reduce using rule 65 (expression -> expression ' .)
    (               reduce using rule 65 (expression -> expression ' .)
    INTNUM          reduce using rule 65 (expression -> expression ' .)
    FLOATNUM        reduce using rule 65 (expression -> expression ' .)
    STRING          reduce using rule 65 (expression -> expression ' .)
    $end            reduce using rule 65 (expression -> expression ' .)
    }               reduce using rule 65 (expression -> expression ' .)
    )               reduce using rule 65 (expression -> expression ' .)
    ;               reduce using rule 65 (expression -> expression ' .)
    ,               reduce using rule 65 (expression -> expression ' .)
    ELSE            reduce using rule 65 (expression -> expression ' .)
    :               reduce using rule 65 (expression -> expression ' .)


state 45

    (13) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    }               shift and go to state 81
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    instruction                    shift and go to state 29
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 46

    (14) assign_instr -> ID = . expression ;
    (19) assign_instr -> ID = . array ;
    (20) assign_instr -> ID = . ID [ indexes ] ;
    (30) assign_instr -> ID = . ( - expression ) ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID
    (31) array -> . [ subarrays ]
    (32) array -> . [ indexes ]

    ID              shift and go to state 82
    (               shift and go to state 86
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    [               shift and go to state 85

    expression                     shift and go to state 83
    array                          shift and go to state 84

state 47

    (15) assign_instr -> ID PLUSASSIGN . expression ;
    (21) assign_instr -> ID PLUSASSIGN . ID [ indexes ] ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    ID              shift and go to state 87
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 88

state 48

    (16) assign_instr -> ID SUBASSIGN . expression ;
    (22) assign_instr -> ID SUBASSIGN . ID [ indexes ] ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    ID              shift and go to state 89
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 90

state 49

    (17) assign_instr -> ID MULASSIGN . expression ;
    (23) assign_instr -> ID MULASSIGN . ID [ indexes ] ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    ID              shift and go to state 91
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 92

state 50

    (18) assign_instr -> ID DIVASSIGN . expression ;
    (24) assign_instr -> ID DIVASSIGN . ID [ indexes ] ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    ID              shift and go to state 93
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 94

state 51

    (25) assign_instr -> ID [ . indexes ] = expression ;
    (26) assign_instr -> ID [ . indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> ID [ . indexes ] SUBASSIGN expression ;
    (28) assign_instr -> ID [ . indexes ] MULASSIGN expression ;
    (29) assign_instr -> ID [ . indexes ] DIVASSIGN expression ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 96
    index                          shift and go to state 97

state 52

    (69) expression -> ( expression . )
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 99
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 53

    (73) expression -> ID .

    )               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)
    ;               reduce using rule 73 (expression -> ID .)
    ,               reduce using rule 73 (expression -> ID .)
    {               reduce using rule 73 (expression -> ID .)
    ID              reduce using rule 73 (expression -> ID .)
    IF              reduce using rule 73 (expression -> ID .)
    WHILE           reduce using rule 73 (expression -> ID .)
    FOR             reduce using rule 73 (expression -> ID .)
    BREAK           reduce using rule 73 (expression -> ID .)
    CONTINUE        reduce using rule 73 (expression -> ID .)
    RETURN          reduce using rule 73 (expression -> ID .)
    PRINT           reduce using rule 73 (expression -> ID .)
    EYE             reduce using rule 73 (expression -> ID .)
    ONES            reduce using rule 73 (expression -> ID .)
    ZEROS           reduce using rule 73 (expression -> ID .)
    (               reduce using rule 73 (expression -> ID .)
    INTNUM          reduce using rule 73 (expression -> ID .)
    FLOATNUM        reduce using rule 73 (expression -> ID .)
    STRING          reduce using rule 73 (expression -> ID .)
    $end            reduce using rule 73 (expression -> ID .)
    }               reduce using rule 73 (expression -> ID .)
    ELSE            reduce using rule 73 (expression -> ID .)
    :               reduce using rule 73 (expression -> ID .)


state 54

    (39) if_instr -> IF ( . expression ) instruction
    (40) if_instr -> IF ( . expression ) instruction ELSE instruction
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 100

state 55

    (41) while_instr -> WHILE ( . expression ) instruction
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 101

state 56

    (42) for_instr -> FOR range . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    instruction                    shift and go to state 102
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 57

    (43) range -> ID . = expression : expression

    =               shift and go to state 103


state 58

    (44) break_instr -> BREAK ; .

    {               reduce using rule 44 (break_instr -> BREAK ; .)
    ID              reduce using rule 44 (break_instr -> BREAK ; .)
    IF              reduce using rule 44 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 44 (break_instr -> BREAK ; .)
    FOR             reduce using rule 44 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 44 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 44 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 44 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 44 (break_instr -> BREAK ; .)
    EYE             reduce using rule 44 (break_instr -> BREAK ; .)
    ONES            reduce using rule 44 (break_instr -> BREAK ; .)
    ZEROS           reduce using rule 44 (break_instr -> BREAK ; .)
    (               reduce using rule 44 (break_instr -> BREAK ; .)
    INTNUM          reduce using rule 44 (break_instr -> BREAK ; .)
    FLOATNUM        reduce using rule 44 (break_instr -> BREAK ; .)
    STRING          reduce using rule 44 (break_instr -> BREAK ; .)
    $end            reduce using rule 44 (break_instr -> BREAK ; .)
    }               reduce using rule 44 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 44 (break_instr -> BREAK ; .)


state 59

    (45) continue_instr -> CONTINUE ; .

    {               reduce using rule 45 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 45 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 45 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 45 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 45 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 45 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 45 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 45 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 45 (continue_instr -> CONTINUE ; .)
    EYE             reduce using rule 45 (continue_instr -> CONTINUE ; .)
    ONES            reduce using rule 45 (continue_instr -> CONTINUE ; .)
    ZEROS           reduce using rule 45 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 45 (continue_instr -> CONTINUE ; .)
    INTNUM          reduce using rule 45 (continue_instr -> CONTINUE ; .)
    FLOATNUM        reduce using rule 45 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 45 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 45 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 45 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 45 (continue_instr -> CONTINUE ; .)


state 60

    (46) return_instr -> RETURN ; .

    {               reduce using rule 46 (return_instr -> RETURN ; .)
    ID              reduce using rule 46 (return_instr -> RETURN ; .)
    IF              reduce using rule 46 (return_instr -> RETURN ; .)
    WHILE           reduce using rule 46 (return_instr -> RETURN ; .)
    FOR             reduce using rule 46 (return_instr -> RETURN ; .)
    BREAK           reduce using rule 46 (return_instr -> RETURN ; .)
    CONTINUE        reduce using rule 46 (return_instr -> RETURN ; .)
    RETURN          reduce using rule 46 (return_instr -> RETURN ; .)
    PRINT           reduce using rule 46 (return_instr -> RETURN ; .)
    EYE             reduce using rule 46 (return_instr -> RETURN ; .)
    ONES            reduce using rule 46 (return_instr -> RETURN ; .)
    ZEROS           reduce using rule 46 (return_instr -> RETURN ; .)
    (               reduce using rule 46 (return_instr -> RETURN ; .)
    INTNUM          reduce using rule 46 (return_instr -> RETURN ; .)
    FLOATNUM        reduce using rule 46 (return_instr -> RETURN ; .)
    STRING          reduce using rule 46 (return_instr -> RETURN ; .)
    $end            reduce using rule 46 (return_instr -> RETURN ; .)
    }               reduce using rule 46 (return_instr -> RETURN ; .)
    ELSE            reduce using rule 46 (return_instr -> RETURN ; .)


state 61

    (47) return_instr -> RETURN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 104
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 62

    (48) print_instr -> PRINT printable . ;
    (49) printable -> printable . , expression

    ;               shift and go to state 105
    ,               shift and go to state 106


state 63

    (50) printable -> expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 50 (printable -> expression .)
    ,               reduce using rule 50 (printable -> expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 64

    (66) expression -> EYE ( . indexes )
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 107
    index                          shift and go to state 97

state 65

    (67) expression -> ONES ( . indexes )
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 108
    index                          shift and go to state 97

state 66

    (68) expression -> ZEROS ( . indexes )
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 109
    index                          shift and go to state 97

state 67

    (51) expression -> expression LESSER_THAN expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    GREATER_THAN    reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    LESSER_EQUAL    reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    GREATER_EQUAL   reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    NOT_EQUAL       reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    EQUAL           reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    {               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ID              reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    IF              reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    WHILE           reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    FOR             reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    BREAK           reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    CONTINUE        reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    RETURN          reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    PRINT           reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    EYE             reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ONES            reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ZEROS           reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    (               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    INTNUM          reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    FLOATNUM        reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    STRING          reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    $end            reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    }               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    )               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ;               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ,               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    ELSE            reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    :               reduce using rule 51 (expression -> expression LESSER_THAN expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! '               [ reduce using rule 51 (expression -> expression LESSER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 68

    (52) expression -> expression GREATER_THAN expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    LESSER_EQUAL    reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    {               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ID              reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    CONTINUE        reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    EYE             reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ONES            reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ZEROS           reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    (               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    INTNUM          reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    FLOATNUM        reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    STRING          reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    }               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    )               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ;               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ,               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    :               reduce using rule 52 (expression -> expression GREATER_THAN expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! '               [ reduce using rule 52 (expression -> expression GREATER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 69

    (53) expression -> expression LESSER_EQUAL expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    GREATER_THAN    reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    EQUAL           reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    {               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ID              reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    IF              reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    WHILE           reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    FOR             reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    BREAK           reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    CONTINUE        reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    RETURN          reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    PRINT           reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    EYE             reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ONES            reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ZEROS           reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    (               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    INTNUM          reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    FLOATNUM        reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    STRING          reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    $end            reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    }               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    )               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ;               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ,               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    ELSE            reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    :               reduce using rule 53 (expression -> expression LESSER_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! '               [ reduce using rule 53 (expression -> expression LESSER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 70

    (54) expression -> expression GREATER_EQUAL expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    EQUAL           reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    {               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    CONTINUE        reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    EYE             reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ONES            reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ZEROS           reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    (               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    INTNUM          reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    FLOATNUM        reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    }               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    )               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ;               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ,               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    :               reduce using rule 54 (expression -> expression GREATER_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! '               [ reduce using rule 54 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 71

    (55) expression -> expression NOT_EQUAL expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    {               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    CONTINUE        reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    EYE             reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ONES            reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ZEROS           reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    (               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    INTNUM          reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    FLOATNUM        reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    }               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    )               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ;               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ,               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    :               reduce using rule 55 (expression -> expression NOT_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! '               [ reduce using rule 55 (expression -> expression NOT_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 72

    (56) expression -> expression EQUAL expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 56 (expression -> expression EQUAL expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression EQUAL expression .)
    LESSER_EQUAL    reduce using rule 56 (expression -> expression EQUAL expression .)
    GREATER_EQUAL   reduce using rule 56 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 56 (expression -> expression EQUAL expression .)
    {               reduce using rule 56 (expression -> expression EQUAL expression .)
    ID              reduce using rule 56 (expression -> expression EQUAL expression .)
    IF              reduce using rule 56 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 56 (expression -> expression EQUAL expression .)
    FOR             reduce using rule 56 (expression -> expression EQUAL expression .)
    BREAK           reduce using rule 56 (expression -> expression EQUAL expression .)
    CONTINUE        reduce using rule 56 (expression -> expression EQUAL expression .)
    RETURN          reduce using rule 56 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 56 (expression -> expression EQUAL expression .)
    EYE             reduce using rule 56 (expression -> expression EQUAL expression .)
    ONES            reduce using rule 56 (expression -> expression EQUAL expression .)
    ZEROS           reduce using rule 56 (expression -> expression EQUAL expression .)
    (               reduce using rule 56 (expression -> expression EQUAL expression .)
    INTNUM          reduce using rule 56 (expression -> expression EQUAL expression .)
    FLOATNUM        reduce using rule 56 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 56 (expression -> expression EQUAL expression .)
    $end            reduce using rule 56 (expression -> expression EQUAL expression .)
    }               reduce using rule 56 (expression -> expression EQUAL expression .)
    )               reduce using rule 56 (expression -> expression EQUAL expression .)
    ;               reduce using rule 56 (expression -> expression EQUAL expression .)
    ,               reduce using rule 56 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 56 (expression -> expression EQUAL expression .)
    :               reduce using rule 56 (expression -> expression EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! +               [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! '               [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]


state 73

    (57) expression -> expression + expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 57 (expression -> expression + expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression + expression .)
    LESSER_EQUAL    reduce using rule 57 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 57 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression + expression .)
    EQUAL           reduce using rule 57 (expression -> expression + expression .)
    +               reduce using rule 57 (expression -> expression + expression .)
    -               reduce using rule 57 (expression -> expression + expression .)
    DOTADD          reduce using rule 57 (expression -> expression + expression .)
    DOTSUB          reduce using rule 57 (expression -> expression + expression .)
    {               reduce using rule 57 (expression -> expression + expression .)
    ID              reduce using rule 57 (expression -> expression + expression .)
    IF              reduce using rule 57 (expression -> expression + expression .)
    WHILE           reduce using rule 57 (expression -> expression + expression .)
    FOR             reduce using rule 57 (expression -> expression + expression .)
    BREAK           reduce using rule 57 (expression -> expression + expression .)
    CONTINUE        reduce using rule 57 (expression -> expression + expression .)
    RETURN          reduce using rule 57 (expression -> expression + expression .)
    PRINT           reduce using rule 57 (expression -> expression + expression .)
    EYE             reduce using rule 57 (expression -> expression + expression .)
    ONES            reduce using rule 57 (expression -> expression + expression .)
    ZEROS           reduce using rule 57 (expression -> expression + expression .)
    (               reduce using rule 57 (expression -> expression + expression .)
    INTNUM          reduce using rule 57 (expression -> expression + expression .)
    FLOATNUM        reduce using rule 57 (expression -> expression + expression .)
    STRING          reduce using rule 57 (expression -> expression + expression .)
    $end            reduce using rule 57 (expression -> expression + expression .)
    }               reduce using rule 57 (expression -> expression + expression .)
    )               reduce using rule 57 (expression -> expression + expression .)
    ;               reduce using rule 57 (expression -> expression + expression .)
    ,               reduce using rule 57 (expression -> expression + expression .)
    ELSE            reduce using rule 57 (expression -> expression + expression .)
    :               reduce using rule 57 (expression -> expression + expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! *               [ reduce using rule 57 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 57 (expression -> expression + expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]


state 74

    (58) expression -> expression - expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 58 (expression -> expression - expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression - expression .)
    LESSER_EQUAL    reduce using rule 58 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 58 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression - expression .)
    EQUAL           reduce using rule 58 (expression -> expression - expression .)
    +               reduce using rule 58 (expression -> expression - expression .)
    -               reduce using rule 58 (expression -> expression - expression .)
    DOTADD          reduce using rule 58 (expression -> expression - expression .)
    DOTSUB          reduce using rule 58 (expression -> expression - expression .)
    {               reduce using rule 58 (expression -> expression - expression .)
    ID              reduce using rule 58 (expression -> expression - expression .)
    IF              reduce using rule 58 (expression -> expression - expression .)
    WHILE           reduce using rule 58 (expression -> expression - expression .)
    FOR             reduce using rule 58 (expression -> expression - expression .)
    BREAK           reduce using rule 58 (expression -> expression - expression .)
    CONTINUE        reduce using rule 58 (expression -> expression - expression .)
    RETURN          reduce using rule 58 (expression -> expression - expression .)
    PRINT           reduce using rule 58 (expression -> expression - expression .)
    EYE             reduce using rule 58 (expression -> expression - expression .)
    ONES            reduce using rule 58 (expression -> expression - expression .)
    ZEROS           reduce using rule 58 (expression -> expression - expression .)
    (               reduce using rule 58 (expression -> expression - expression .)
    INTNUM          reduce using rule 58 (expression -> expression - expression .)
    FLOATNUM        reduce using rule 58 (expression -> expression - expression .)
    STRING          reduce using rule 58 (expression -> expression - expression .)
    $end            reduce using rule 58 (expression -> expression - expression .)
    }               reduce using rule 58 (expression -> expression - expression .)
    )               reduce using rule 58 (expression -> expression - expression .)
    ;               reduce using rule 58 (expression -> expression - expression .)
    ,               reduce using rule 58 (expression -> expression - expression .)
    ELSE            reduce using rule 58 (expression -> expression - expression .)
    :               reduce using rule 58 (expression -> expression - expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! *               [ reduce using rule 58 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 58 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 58 (expression -> expression - expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]


state 75

    (59) expression -> expression * expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 59 (expression -> expression * expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression * expression .)
    LESSER_EQUAL    reduce using rule 59 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression * expression .)
    EQUAL           reduce using rule 59 (expression -> expression * expression .)
    +               reduce using rule 59 (expression -> expression * expression .)
    -               reduce using rule 59 (expression -> expression * expression .)
    *               reduce using rule 59 (expression -> expression * expression .)
    /               reduce using rule 59 (expression -> expression * expression .)
    DOTADD          reduce using rule 59 (expression -> expression * expression .)
    DOTSUB          reduce using rule 59 (expression -> expression * expression .)
    DOTMUL          reduce using rule 59 (expression -> expression * expression .)
    DOTDIV          reduce using rule 59 (expression -> expression * expression .)
    {               reduce using rule 59 (expression -> expression * expression .)
    ID              reduce using rule 59 (expression -> expression * expression .)
    IF              reduce using rule 59 (expression -> expression * expression .)
    WHILE           reduce using rule 59 (expression -> expression * expression .)
    FOR             reduce using rule 59 (expression -> expression * expression .)
    BREAK           reduce using rule 59 (expression -> expression * expression .)
    CONTINUE        reduce using rule 59 (expression -> expression * expression .)
    RETURN          reduce using rule 59 (expression -> expression * expression .)
    PRINT           reduce using rule 59 (expression -> expression * expression .)
    EYE             reduce using rule 59 (expression -> expression * expression .)
    ONES            reduce using rule 59 (expression -> expression * expression .)
    ZEROS           reduce using rule 59 (expression -> expression * expression .)
    (               reduce using rule 59 (expression -> expression * expression .)
    INTNUM          reduce using rule 59 (expression -> expression * expression .)
    FLOATNUM        reduce using rule 59 (expression -> expression * expression .)
    STRING          reduce using rule 59 (expression -> expression * expression .)
    $end            reduce using rule 59 (expression -> expression * expression .)
    }               reduce using rule 59 (expression -> expression * expression .)
    )               reduce using rule 59 (expression -> expression * expression .)
    ;               reduce using rule 59 (expression -> expression * expression .)
    ,               reduce using rule 59 (expression -> expression * expression .)
    ELSE            reduce using rule 59 (expression -> expression * expression .)
    :               reduce using rule 59 (expression -> expression * expression .)
    '               shift and go to state 44

  ! '               [ reduce using rule 59 (expression -> expression * expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]


state 76

    (60) expression -> expression / expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 60 (expression -> expression / expression .)
    GREATER_THAN    reduce using rule 60 (expression -> expression / expression .)
    LESSER_EQUAL    reduce using rule 60 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 60 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 60 (expression -> expression / expression .)
    EQUAL           reduce using rule 60 (expression -> expression / expression .)
    +               reduce using rule 60 (expression -> expression / expression .)
    -               reduce using rule 60 (expression -> expression / expression .)
    *               reduce using rule 60 (expression -> expression / expression .)
    /               reduce using rule 60 (expression -> expression / expression .)
    DOTADD          reduce using rule 60 (expression -> expression / expression .)
    DOTSUB          reduce using rule 60 (expression -> expression / expression .)
    DOTMUL          reduce using rule 60 (expression -> expression / expression .)
    DOTDIV          reduce using rule 60 (expression -> expression / expression .)
    {               reduce using rule 60 (expression -> expression / expression .)
    ID              reduce using rule 60 (expression -> expression / expression .)
    IF              reduce using rule 60 (expression -> expression / expression .)
    WHILE           reduce using rule 60 (expression -> expression / expression .)
    FOR             reduce using rule 60 (expression -> expression / expression .)
    BREAK           reduce using rule 60 (expression -> expression / expression .)
    CONTINUE        reduce using rule 60 (expression -> expression / expression .)
    RETURN          reduce using rule 60 (expression -> expression / expression .)
    PRINT           reduce using rule 60 (expression -> expression / expression .)
    EYE             reduce using rule 60 (expression -> expression / expression .)
    ONES            reduce using rule 60 (expression -> expression / expression .)
    ZEROS           reduce using rule 60 (expression -> expression / expression .)
    (               reduce using rule 60 (expression -> expression / expression .)
    INTNUM          reduce using rule 60 (expression -> expression / expression .)
    FLOATNUM        reduce using rule 60 (expression -> expression / expression .)
    STRING          reduce using rule 60 (expression -> expression / expression .)
    $end            reduce using rule 60 (expression -> expression / expression .)
    }               reduce using rule 60 (expression -> expression / expression .)
    )               reduce using rule 60 (expression -> expression / expression .)
    ;               reduce using rule 60 (expression -> expression / expression .)
    ,               reduce using rule 60 (expression -> expression / expression .)
    ELSE            reduce using rule 60 (expression -> expression / expression .)
    :               reduce using rule 60 (expression -> expression / expression .)
    '               shift and go to state 44

  ! '               [ reduce using rule 60 (expression -> expression / expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]


state 77

    (61) expression -> expression DOTADD expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 61 (expression -> expression DOTADD expression .)
    GREATER_THAN    reduce using rule 61 (expression -> expression DOTADD expression .)
    LESSER_EQUAL    reduce using rule 61 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 61 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 61 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 61 (expression -> expression DOTADD expression .)
    +               reduce using rule 61 (expression -> expression DOTADD expression .)
    -               reduce using rule 61 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 61 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 61 (expression -> expression DOTADD expression .)
    {               reduce using rule 61 (expression -> expression DOTADD expression .)
    ID              reduce using rule 61 (expression -> expression DOTADD expression .)
    IF              reduce using rule 61 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 61 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 61 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 61 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 61 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 61 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 61 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 61 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 61 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 61 (expression -> expression DOTADD expression .)
    (               reduce using rule 61 (expression -> expression DOTADD expression .)
    INTNUM          reduce using rule 61 (expression -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 61 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 61 (expression -> expression DOTADD expression .)
    $end            reduce using rule 61 (expression -> expression DOTADD expression .)
    }               reduce using rule 61 (expression -> expression DOTADD expression .)
    )               reduce using rule 61 (expression -> expression DOTADD expression .)
    ;               reduce using rule 61 (expression -> expression DOTADD expression .)
    ,               reduce using rule 61 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 61 (expression -> expression DOTADD expression .)
    :               reduce using rule 61 (expression -> expression DOTADD expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! *               [ reduce using rule 61 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 61 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 61 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 61 (expression -> expression DOTADD expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]


state 78

    (62) expression -> expression DOTSUB expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 62 (expression -> expression DOTSUB expression .)
    GREATER_THAN    reduce using rule 62 (expression -> expression DOTSUB expression .)
    LESSER_EQUAL    reduce using rule 62 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 62 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 62 (expression -> expression DOTSUB expression .)
    +               reduce using rule 62 (expression -> expression DOTSUB expression .)
    -               reduce using rule 62 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 62 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 62 (expression -> expression DOTSUB expression .)
    {               reduce using rule 62 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 62 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 62 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 62 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 62 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 62 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 62 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 62 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 62 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 62 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 62 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 62 (expression -> expression DOTSUB expression .)
    (               reduce using rule 62 (expression -> expression DOTSUB expression .)
    INTNUM          reduce using rule 62 (expression -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 62 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 62 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 62 (expression -> expression DOTSUB expression .)
    }               reduce using rule 62 (expression -> expression DOTSUB expression .)
    )               reduce using rule 62 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 62 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 62 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 62 (expression -> expression DOTSUB expression .)
    :               reduce using rule 62 (expression -> expression DOTSUB expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44

  ! *               [ reduce using rule 62 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 62 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 62 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 62 (expression -> expression DOTSUB expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]


state 79

    (63) expression -> expression DOTMUL expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 63 (expression -> expression DOTMUL expression .)
    GREATER_THAN    reduce using rule 63 (expression -> expression DOTMUL expression .)
    LESSER_EQUAL    reduce using rule 63 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 63 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 63 (expression -> expression DOTMUL expression .)
    +               reduce using rule 63 (expression -> expression DOTMUL expression .)
    -               reduce using rule 63 (expression -> expression DOTMUL expression .)
    *               reduce using rule 63 (expression -> expression DOTMUL expression .)
    /               reduce using rule 63 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 63 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 63 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 63 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 63 (expression -> expression DOTMUL expression .)
    {               reduce using rule 63 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 63 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 63 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 63 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 63 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 63 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 63 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 63 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 63 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 63 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 63 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 63 (expression -> expression DOTMUL expression .)
    (               reduce using rule 63 (expression -> expression DOTMUL expression .)
    INTNUM          reduce using rule 63 (expression -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 63 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 63 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 63 (expression -> expression DOTMUL expression .)
    }               reduce using rule 63 (expression -> expression DOTMUL expression .)
    )               reduce using rule 63 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 63 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 63 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 63 (expression -> expression DOTMUL expression .)
    :               reduce using rule 63 (expression -> expression DOTMUL expression .)
    '               shift and go to state 44

  ! '               [ reduce using rule 63 (expression -> expression DOTMUL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]


state 80

    (64) expression -> expression DOTDIV expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 64 (expression -> expression DOTDIV expression .)
    GREATER_THAN    reduce using rule 64 (expression -> expression DOTDIV expression .)
    LESSER_EQUAL    reduce using rule 64 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 64 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 64 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 64 (expression -> expression DOTDIV expression .)
    +               reduce using rule 64 (expression -> expression DOTDIV expression .)
    -               reduce using rule 64 (expression -> expression DOTDIV expression .)
    *               reduce using rule 64 (expression -> expression DOTDIV expression .)
    /               reduce using rule 64 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 64 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 64 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 64 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 64 (expression -> expression DOTDIV expression .)
    {               reduce using rule 64 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 64 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 64 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 64 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 64 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 64 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 64 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 64 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 64 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 64 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 64 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 64 (expression -> expression DOTDIV expression .)
    (               reduce using rule 64 (expression -> expression DOTDIV expression .)
    INTNUM          reduce using rule 64 (expression -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 64 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 64 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 64 (expression -> expression DOTDIV expression .)
    }               reduce using rule 64 (expression -> expression DOTDIV expression .)
    )               reduce using rule 64 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 64 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 64 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 64 (expression -> expression DOTDIV expression .)
    :               reduce using rule 64 (expression -> expression DOTDIV expression .)
    '               shift and go to state 44

  ! '               [ reduce using rule 64 (expression -> expression DOTDIV expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]


state 81

    (13) instruction -> { instructions } .

    {               reduce using rule 13 (instruction -> { instructions } .)
    ID              reduce using rule 13 (instruction -> { instructions } .)
    IF              reduce using rule 13 (instruction -> { instructions } .)
    WHILE           reduce using rule 13 (instruction -> { instructions } .)
    FOR             reduce using rule 13 (instruction -> { instructions } .)
    BREAK           reduce using rule 13 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 13 (instruction -> { instructions } .)
    RETURN          reduce using rule 13 (instruction -> { instructions } .)
    PRINT           reduce using rule 13 (instruction -> { instructions } .)
    EYE             reduce using rule 13 (instruction -> { instructions } .)
    ONES            reduce using rule 13 (instruction -> { instructions } .)
    ZEROS           reduce using rule 13 (instruction -> { instructions } .)
    (               reduce using rule 13 (instruction -> { instructions } .)
    INTNUM          reduce using rule 13 (instruction -> { instructions } .)
    FLOATNUM        reduce using rule 13 (instruction -> { instructions } .)
    STRING          reduce using rule 13 (instruction -> { instructions } .)
    $end            reduce using rule 13 (instruction -> { instructions } .)
    }               reduce using rule 13 (instruction -> { instructions } .)
    ELSE            reduce using rule 13 (instruction -> { instructions } .)


state 82

    (20) assign_instr -> ID = ID . [ indexes ] ;
    (73) expression -> ID .

    [               shift and go to state 110
    ;               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)


state 83

    (14) assign_instr -> ID = expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 111
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 84

    (19) assign_instr -> ID = array . ;

    ;               shift and go to state 112


state 85

    (31) array -> [ . subarrays ]
    (32) array -> [ . indexes ]
    (33) subarrays -> . subarrays , array
    (34) subarrays -> . array
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (31) array -> . [ subarrays ]
    (32) array -> . [ indexes ]
    (37) index -> . INTNUM
    (38) index -> . ID

    [               shift and go to state 85
    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    subarrays                      shift and go to state 113
    indexes                        shift and go to state 114
    array                          shift and go to state 115
    index                          shift and go to state 97

state 86

    (30) assign_instr -> ID = ( . - expression ) ;
    (69) expression -> ( . expression )
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    -               shift and go to state 116
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 52

state 87

    (21) assign_instr -> ID PLUSASSIGN ID . [ indexes ] ;
    (73) expression -> ID .

    [               shift and go to state 117
    ;               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)


state 88

    (15) assign_instr -> ID PLUSASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 118
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 89

    (22) assign_instr -> ID SUBASSIGN ID . [ indexes ] ;
    (73) expression -> ID .

    [               shift and go to state 119
    ;               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)


state 90

    (16) assign_instr -> ID SUBASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 120
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 91

    (23) assign_instr -> ID MULASSIGN ID . [ indexes ] ;
    (73) expression -> ID .

    [               shift and go to state 121
    ;               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)


state 92

    (17) assign_instr -> ID MULASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 122
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 93

    (24) assign_instr -> ID DIVASSIGN ID . [ indexes ] ;
    (73) expression -> ID .

    [               shift and go to state 123
    ;               reduce using rule 73 (expression -> ID .)
    LESSER_THAN     reduce using rule 73 (expression -> ID .)
    GREATER_THAN    reduce using rule 73 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 73 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 73 (expression -> ID .)
    NOT_EQUAL       reduce using rule 73 (expression -> ID .)
    EQUAL           reduce using rule 73 (expression -> ID .)
    +               reduce using rule 73 (expression -> ID .)
    -               reduce using rule 73 (expression -> ID .)
    *               reduce using rule 73 (expression -> ID .)
    /               reduce using rule 73 (expression -> ID .)
    DOTADD          reduce using rule 73 (expression -> ID .)
    DOTSUB          reduce using rule 73 (expression -> ID .)
    DOTMUL          reduce using rule 73 (expression -> ID .)
    DOTDIV          reduce using rule 73 (expression -> ID .)
    '               reduce using rule 73 (expression -> ID .)


state 94

    (18) assign_instr -> ID DIVASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 124
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 95

    (38) index -> ID .

    ]               reduce using rule 38 (index -> ID .)
    ,               reduce using rule 38 (index -> ID .)
    )               reduce using rule 38 (index -> ID .)


state 96

    (25) assign_instr -> ID [ indexes . ] = expression ;
    (26) assign_instr -> ID [ indexes . ] PLUSASSIGN expression ;
    (27) assign_instr -> ID [ indexes . ] SUBASSIGN expression ;
    (28) assign_instr -> ID [ indexes . ] MULASSIGN expression ;
    (29) assign_instr -> ID [ indexes . ] DIVASSIGN expression ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 125
    ,               shift and go to state 126


state 97

    (36) indexes -> index .

    ]               reduce using rule 36 (indexes -> index .)
    ,               reduce using rule 36 (indexes -> index .)
    )               reduce using rule 36 (indexes -> index .)


state 98

    (37) index -> INTNUM .

    ]               reduce using rule 37 (index -> INTNUM .)
    ,               reduce using rule 37 (index -> INTNUM .)
    )               reduce using rule 37 (index -> INTNUM .)


state 99

    (69) expression -> ( expression ) .

    LESSER_THAN     reduce using rule 69 (expression -> ( expression ) .)
    GREATER_THAN    reduce using rule 69 (expression -> ( expression ) .)
    LESSER_EQUAL    reduce using rule 69 (expression -> ( expression ) .)
    GREATER_EQUAL   reduce using rule 69 (expression -> ( expression ) .)
    NOT_EQUAL       reduce using rule 69 (expression -> ( expression ) .)
    EQUAL           reduce using rule 69 (expression -> ( expression ) .)
    +               reduce using rule 69 (expression -> ( expression ) .)
    -               reduce using rule 69 (expression -> ( expression ) .)
    *               reduce using rule 69 (expression -> ( expression ) .)
    /               reduce using rule 69 (expression -> ( expression ) .)
    DOTADD          reduce using rule 69 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 69 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 69 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 69 (expression -> ( expression ) .)
    '               reduce using rule 69 (expression -> ( expression ) .)
    {               reduce using rule 69 (expression -> ( expression ) .)
    ID              reduce using rule 69 (expression -> ( expression ) .)
    IF              reduce using rule 69 (expression -> ( expression ) .)
    WHILE           reduce using rule 69 (expression -> ( expression ) .)
    FOR             reduce using rule 69 (expression -> ( expression ) .)
    BREAK           reduce using rule 69 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 69 (expression -> ( expression ) .)
    RETURN          reduce using rule 69 (expression -> ( expression ) .)
    PRINT           reduce using rule 69 (expression -> ( expression ) .)
    EYE             reduce using rule 69 (expression -> ( expression ) .)
    ONES            reduce using rule 69 (expression -> ( expression ) .)
    ZEROS           reduce using rule 69 (expression -> ( expression ) .)
    (               reduce using rule 69 (expression -> ( expression ) .)
    INTNUM          reduce using rule 69 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 69 (expression -> ( expression ) .)
    STRING          reduce using rule 69 (expression -> ( expression ) .)
    $end            reduce using rule 69 (expression -> ( expression ) .)
    }               reduce using rule 69 (expression -> ( expression ) .)
    )               reduce using rule 69 (expression -> ( expression ) .)
    ;               reduce using rule 69 (expression -> ( expression ) .)
    ,               reduce using rule 69 (expression -> ( expression ) .)
    ELSE            reduce using rule 69 (expression -> ( expression ) .)
    :               reduce using rule 69 (expression -> ( expression ) .)


state 100

    (39) if_instr -> IF ( expression . ) instruction
    (40) if_instr -> IF ( expression . ) instruction ELSE instruction
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 127
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 101

    (41) while_instr -> WHILE ( expression . ) instruction
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 128
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 102

    (42) for_instr -> FOR range instruction .

    {               reduce using rule 42 (for_instr -> FOR range instruction .)
    ID              reduce using rule 42 (for_instr -> FOR range instruction .)
    IF              reduce using rule 42 (for_instr -> FOR range instruction .)
    WHILE           reduce using rule 42 (for_instr -> FOR range instruction .)
    FOR             reduce using rule 42 (for_instr -> FOR range instruction .)
    BREAK           reduce using rule 42 (for_instr -> FOR range instruction .)
    CONTINUE        reduce using rule 42 (for_instr -> FOR range instruction .)
    RETURN          reduce using rule 42 (for_instr -> FOR range instruction .)
    PRINT           reduce using rule 42 (for_instr -> FOR range instruction .)
    EYE             reduce using rule 42 (for_instr -> FOR range instruction .)
    ONES            reduce using rule 42 (for_instr -> FOR range instruction .)
    ZEROS           reduce using rule 42 (for_instr -> FOR range instruction .)
    (               reduce using rule 42 (for_instr -> FOR range instruction .)
    INTNUM          reduce using rule 42 (for_instr -> FOR range instruction .)
    FLOATNUM        reduce using rule 42 (for_instr -> FOR range instruction .)
    STRING          reduce using rule 42 (for_instr -> FOR range instruction .)
    $end            reduce using rule 42 (for_instr -> FOR range instruction .)
    }               reduce using rule 42 (for_instr -> FOR range instruction .)
    ELSE            reduce using rule 42 (for_instr -> FOR range instruction .)


state 103

    (43) range -> ID = . expression : expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 129

state 104

    (47) return_instr -> RETURN expression ; .

    {               reduce using rule 47 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 47 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 47 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 47 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 47 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 47 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 47 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 47 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 47 (return_instr -> RETURN expression ; .)
    EYE             reduce using rule 47 (return_instr -> RETURN expression ; .)
    ONES            reduce using rule 47 (return_instr -> RETURN expression ; .)
    ZEROS           reduce using rule 47 (return_instr -> RETURN expression ; .)
    (               reduce using rule 47 (return_instr -> RETURN expression ; .)
    INTNUM          reduce using rule 47 (return_instr -> RETURN expression ; .)
    FLOATNUM        reduce using rule 47 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 47 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 47 (return_instr -> RETURN expression ; .)
    }               reduce using rule 47 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 47 (return_instr -> RETURN expression ; .)


state 105

    (48) print_instr -> PRINT printable ; .

    {               reduce using rule 48 (print_instr -> PRINT printable ; .)
    ID              reduce using rule 48 (print_instr -> PRINT printable ; .)
    IF              reduce using rule 48 (print_instr -> PRINT printable ; .)
    WHILE           reduce using rule 48 (print_instr -> PRINT printable ; .)
    FOR             reduce using rule 48 (print_instr -> PRINT printable ; .)
    BREAK           reduce using rule 48 (print_instr -> PRINT printable ; .)
    CONTINUE        reduce using rule 48 (print_instr -> PRINT printable ; .)
    RETURN          reduce using rule 48 (print_instr -> PRINT printable ; .)
    PRINT           reduce using rule 48 (print_instr -> PRINT printable ; .)
    EYE             reduce using rule 48 (print_instr -> PRINT printable ; .)
    ONES            reduce using rule 48 (print_instr -> PRINT printable ; .)
    ZEROS           reduce using rule 48 (print_instr -> PRINT printable ; .)
    (               reduce using rule 48 (print_instr -> PRINT printable ; .)
    INTNUM          reduce using rule 48 (print_instr -> PRINT printable ; .)
    FLOATNUM        reduce using rule 48 (print_instr -> PRINT printable ; .)
    STRING          reduce using rule 48 (print_instr -> PRINT printable ; .)
    $end            reduce using rule 48 (print_instr -> PRINT printable ; .)
    }               reduce using rule 48 (print_instr -> PRINT printable ; .)
    ELSE            reduce using rule 48 (print_instr -> PRINT printable ; .)


state 106

    (49) printable -> printable , . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 130

state 107

    (66) expression -> EYE ( indexes . )
    (35) indexes -> indexes . , index

    )               shift and go to state 131
    ,               shift and go to state 126


state 108

    (67) expression -> ONES ( indexes . )
    (35) indexes -> indexes . , index

    )               shift and go to state 132
    ,               shift and go to state 126


state 109

    (68) expression -> ZEROS ( indexes . )
    (35) indexes -> indexes . , index

    )               shift and go to state 133
    ,               shift and go to state 126


state 110

    (20) assign_instr -> ID = ID [ . indexes ] ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 134
    index                          shift and go to state 97

state 111

    (14) assign_instr -> ID = expression ; .

    {               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ID              reduce using rule 14 (assign_instr -> ID = expression ; .)
    IF              reduce using rule 14 (assign_instr -> ID = expression ; .)
    WHILE           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FOR             reduce using rule 14 (assign_instr -> ID = expression ; .)
    BREAK           reduce using rule 14 (assign_instr -> ID = expression ; .)
    CONTINUE        reduce using rule 14 (assign_instr -> ID = expression ; .)
    RETURN          reduce using rule 14 (assign_instr -> ID = expression ; .)
    PRINT           reduce using rule 14 (assign_instr -> ID = expression ; .)
    EYE             reduce using rule 14 (assign_instr -> ID = expression ; .)
    ONES            reduce using rule 14 (assign_instr -> ID = expression ; .)
    ZEROS           reduce using rule 14 (assign_instr -> ID = expression ; .)
    (               reduce using rule 14 (assign_instr -> ID = expression ; .)
    INTNUM          reduce using rule 14 (assign_instr -> ID = expression ; .)
    FLOATNUM        reduce using rule 14 (assign_instr -> ID = expression ; .)
    STRING          reduce using rule 14 (assign_instr -> ID = expression ; .)
    $end            reduce using rule 14 (assign_instr -> ID = expression ; .)
    }               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ELSE            reduce using rule 14 (assign_instr -> ID = expression ; .)


state 112

    (19) assign_instr -> ID = array ; .

    {               reduce using rule 19 (assign_instr -> ID = array ; .)
    ID              reduce using rule 19 (assign_instr -> ID = array ; .)
    IF              reduce using rule 19 (assign_instr -> ID = array ; .)
    WHILE           reduce using rule 19 (assign_instr -> ID = array ; .)
    FOR             reduce using rule 19 (assign_instr -> ID = array ; .)
    BREAK           reduce using rule 19 (assign_instr -> ID = array ; .)
    CONTINUE        reduce using rule 19 (assign_instr -> ID = array ; .)
    RETURN          reduce using rule 19 (assign_instr -> ID = array ; .)
    PRINT           reduce using rule 19 (assign_instr -> ID = array ; .)
    EYE             reduce using rule 19 (assign_instr -> ID = array ; .)
    ONES            reduce using rule 19 (assign_instr -> ID = array ; .)
    ZEROS           reduce using rule 19 (assign_instr -> ID = array ; .)
    (               reduce using rule 19 (assign_instr -> ID = array ; .)
    INTNUM          reduce using rule 19 (assign_instr -> ID = array ; .)
    FLOATNUM        reduce using rule 19 (assign_instr -> ID = array ; .)
    STRING          reduce using rule 19 (assign_instr -> ID = array ; .)
    $end            reduce using rule 19 (assign_instr -> ID = array ; .)
    }               reduce using rule 19 (assign_instr -> ID = array ; .)
    ELSE            reduce using rule 19 (assign_instr -> ID = array ; .)


state 113

    (31) array -> [ subarrays . ]
    (33) subarrays -> subarrays . , array

    ]               shift and go to state 135
    ,               shift and go to state 136


state 114

    (32) array -> [ indexes . ]
    (35) indexes -> indexes . , index

    ]               shift and go to state 137
    ,               shift and go to state 126


state 115

    (34) subarrays -> array .

    ]               reduce using rule 34 (subarrays -> array .)
    ,               reduce using rule 34 (subarrays -> array .)


state 116

    (30) assign_instr -> ID = ( - . expression ) ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 138

state 117

    (21) assign_instr -> ID PLUSASSIGN ID [ . indexes ] ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 139
    index                          shift and go to state 97

state 118

    (15) assign_instr -> ID PLUSASSIGN expression ; .

    {               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ID              reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    IF              reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    WHILE           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    FOR             reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    BREAK           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    RETURN          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    PRINT           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    EYE             reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ONES            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    (               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    STRING          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    $end            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    }               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ELSE            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)


state 119

    (22) assign_instr -> ID SUBASSIGN ID [ . indexes ] ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 140
    index                          shift and go to state 97

state 120

    (16) assign_instr -> ID SUBASSIGN expression ; .

    {               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ID              reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    IF              reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    WHILE           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    FOR             reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    BREAK           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    RETURN          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    PRINT           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    EYE             reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ONES            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ZEROS           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    (               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    INTNUM          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    STRING          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    $end            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    }               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ELSE            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)


state 121

    (23) assign_instr -> ID MULASSIGN ID [ . indexes ] ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 141
    index                          shift and go to state 97

state 122

    (17) assign_instr -> ID MULASSIGN expression ; .

    {               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ID              reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    IF              reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    WHILE           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    FOR             reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    BREAK           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    RETURN          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    PRINT           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    EYE             reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ONES            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ZEROS           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    (               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    INTNUM          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    STRING          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    $end            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    }               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ELSE            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)


state 123

    (24) assign_instr -> ID DIVASSIGN ID [ . indexes ] ;
    (35) indexes -> . indexes , index
    (36) indexes -> . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    indexes                        shift and go to state 142
    index                          shift and go to state 97

state 124

    (18) assign_instr -> ID DIVASSIGN expression ; .

    {               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ID              reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    IF              reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    WHILE           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    FOR             reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    BREAK           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    RETURN          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    PRINT           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    EYE             reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ONES            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ZEROS           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    (               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    INTNUM          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    STRING          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    $end            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    }               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ELSE            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)


state 125

    (25) assign_instr -> ID [ indexes ] . = expression ;
    (26) assign_instr -> ID [ indexes ] . PLUSASSIGN expression ;
    (27) assign_instr -> ID [ indexes ] . SUBASSIGN expression ;
    (28) assign_instr -> ID [ indexes ] . MULASSIGN expression ;
    (29) assign_instr -> ID [ indexes ] . DIVASSIGN expression ;

    =               shift and go to state 143
    PLUSASSIGN      shift and go to state 144
    SUBASSIGN       shift and go to state 145
    MULASSIGN       shift and go to state 146
    DIVASSIGN       shift and go to state 147


state 126

    (35) indexes -> indexes , . index
    (37) index -> . INTNUM
    (38) index -> . ID

    INTNUM          shift and go to state 98
    ID              shift and go to state 95

    index                          shift and go to state 148

state 127

    (39) if_instr -> IF ( expression ) . instruction
    (40) if_instr -> IF ( expression ) . instruction ELSE instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 12
    instruction                    shift and go to state 149
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 128

    (41) while_instr -> WHILE ( expression ) . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 12
    instruction                    shift and go to state 150
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 129

    (43) range -> ID = expression . : expression
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    :               shift and go to state 151
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 130

    (49) printable -> printable , expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 49 (printable -> printable , expression .)
    ,               reduce using rule 49 (printable -> printable , expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 131

    (66) expression -> EYE ( indexes ) .

    LESSER_THAN     reduce using rule 66 (expression -> EYE ( indexes ) .)
    GREATER_THAN    reduce using rule 66 (expression -> EYE ( indexes ) .)
    LESSER_EQUAL    reduce using rule 66 (expression -> EYE ( indexes ) .)
    GREATER_EQUAL   reduce using rule 66 (expression -> EYE ( indexes ) .)
    NOT_EQUAL       reduce using rule 66 (expression -> EYE ( indexes ) .)
    EQUAL           reduce using rule 66 (expression -> EYE ( indexes ) .)
    +               reduce using rule 66 (expression -> EYE ( indexes ) .)
    -               reduce using rule 66 (expression -> EYE ( indexes ) .)
    *               reduce using rule 66 (expression -> EYE ( indexes ) .)
    /               reduce using rule 66 (expression -> EYE ( indexes ) .)
    DOTADD          reduce using rule 66 (expression -> EYE ( indexes ) .)
    DOTSUB          reduce using rule 66 (expression -> EYE ( indexes ) .)
    DOTMUL          reduce using rule 66 (expression -> EYE ( indexes ) .)
    DOTDIV          reduce using rule 66 (expression -> EYE ( indexes ) .)
    '               reduce using rule 66 (expression -> EYE ( indexes ) .)
    {               reduce using rule 66 (expression -> EYE ( indexes ) .)
    ID              reduce using rule 66 (expression -> EYE ( indexes ) .)
    IF              reduce using rule 66 (expression -> EYE ( indexes ) .)
    WHILE           reduce using rule 66 (expression -> EYE ( indexes ) .)
    FOR             reduce using rule 66 (expression -> EYE ( indexes ) .)
    BREAK           reduce using rule 66 (expression -> EYE ( indexes ) .)
    CONTINUE        reduce using rule 66 (expression -> EYE ( indexes ) .)
    RETURN          reduce using rule 66 (expression -> EYE ( indexes ) .)
    PRINT           reduce using rule 66 (expression -> EYE ( indexes ) .)
    EYE             reduce using rule 66 (expression -> EYE ( indexes ) .)
    ONES            reduce using rule 66 (expression -> EYE ( indexes ) .)
    ZEROS           reduce using rule 66 (expression -> EYE ( indexes ) .)
    (               reduce using rule 66 (expression -> EYE ( indexes ) .)
    INTNUM          reduce using rule 66 (expression -> EYE ( indexes ) .)
    FLOATNUM        reduce using rule 66 (expression -> EYE ( indexes ) .)
    STRING          reduce using rule 66 (expression -> EYE ( indexes ) .)
    $end            reduce using rule 66 (expression -> EYE ( indexes ) .)
    }               reduce using rule 66 (expression -> EYE ( indexes ) .)
    )               reduce using rule 66 (expression -> EYE ( indexes ) .)
    ;               reduce using rule 66 (expression -> EYE ( indexes ) .)
    ,               reduce using rule 66 (expression -> EYE ( indexes ) .)
    ELSE            reduce using rule 66 (expression -> EYE ( indexes ) .)
    :               reduce using rule 66 (expression -> EYE ( indexes ) .)


state 132

    (67) expression -> ONES ( indexes ) .

    LESSER_THAN     reduce using rule 67 (expression -> ONES ( indexes ) .)
    GREATER_THAN    reduce using rule 67 (expression -> ONES ( indexes ) .)
    LESSER_EQUAL    reduce using rule 67 (expression -> ONES ( indexes ) .)
    GREATER_EQUAL   reduce using rule 67 (expression -> ONES ( indexes ) .)
    NOT_EQUAL       reduce using rule 67 (expression -> ONES ( indexes ) .)
    EQUAL           reduce using rule 67 (expression -> ONES ( indexes ) .)
    +               reduce using rule 67 (expression -> ONES ( indexes ) .)
    -               reduce using rule 67 (expression -> ONES ( indexes ) .)
    *               reduce using rule 67 (expression -> ONES ( indexes ) .)
    /               reduce using rule 67 (expression -> ONES ( indexes ) .)
    DOTADD          reduce using rule 67 (expression -> ONES ( indexes ) .)
    DOTSUB          reduce using rule 67 (expression -> ONES ( indexes ) .)
    DOTMUL          reduce using rule 67 (expression -> ONES ( indexes ) .)
    DOTDIV          reduce using rule 67 (expression -> ONES ( indexes ) .)
    '               reduce using rule 67 (expression -> ONES ( indexes ) .)
    {               reduce using rule 67 (expression -> ONES ( indexes ) .)
    ID              reduce using rule 67 (expression -> ONES ( indexes ) .)
    IF              reduce using rule 67 (expression -> ONES ( indexes ) .)
    WHILE           reduce using rule 67 (expression -> ONES ( indexes ) .)
    FOR             reduce using rule 67 (expression -> ONES ( indexes ) .)
    BREAK           reduce using rule 67 (expression -> ONES ( indexes ) .)
    CONTINUE        reduce using rule 67 (expression -> ONES ( indexes ) .)
    RETURN          reduce using rule 67 (expression -> ONES ( indexes ) .)
    PRINT           reduce using rule 67 (expression -> ONES ( indexes ) .)
    EYE             reduce using rule 67 (expression -> ONES ( indexes ) .)
    ONES            reduce using rule 67 (expression -> ONES ( indexes ) .)
    ZEROS           reduce using rule 67 (expression -> ONES ( indexes ) .)
    (               reduce using rule 67 (expression -> ONES ( indexes ) .)
    INTNUM          reduce using rule 67 (expression -> ONES ( indexes ) .)
    FLOATNUM        reduce using rule 67 (expression -> ONES ( indexes ) .)
    STRING          reduce using rule 67 (expression -> ONES ( indexes ) .)
    $end            reduce using rule 67 (expression -> ONES ( indexes ) .)
    }               reduce using rule 67 (expression -> ONES ( indexes ) .)
    )               reduce using rule 67 (expression -> ONES ( indexes ) .)
    ;               reduce using rule 67 (expression -> ONES ( indexes ) .)
    ,               reduce using rule 67 (expression -> ONES ( indexes ) .)
    ELSE            reduce using rule 67 (expression -> ONES ( indexes ) .)
    :               reduce using rule 67 (expression -> ONES ( indexes ) .)


state 133

    (68) expression -> ZEROS ( indexes ) .

    LESSER_THAN     reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    GREATER_THAN    reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    LESSER_EQUAL    reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    GREATER_EQUAL   reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    NOT_EQUAL       reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    EQUAL           reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    +               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    -               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    *               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    /               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    DOTADD          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    DOTSUB          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    DOTMUL          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    DOTDIV          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    '               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    {               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ID              reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    IF              reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    WHILE           reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    FOR             reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    BREAK           reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    CONTINUE        reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    RETURN          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    PRINT           reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    EYE             reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ONES            reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ZEROS           reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    (               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    INTNUM          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    FLOATNUM        reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    STRING          reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    $end            reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    }               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    )               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ;               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ,               reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    ELSE            reduce using rule 68 (expression -> ZEROS ( indexes ) .)
    :               reduce using rule 68 (expression -> ZEROS ( indexes ) .)


state 134

    (20) assign_instr -> ID = ID [ indexes . ] ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 152
    ,               shift and go to state 126


state 135

    (31) array -> [ subarrays ] .

    ;               reduce using rule 31 (array -> [ subarrays ] .)
    ]               reduce using rule 31 (array -> [ subarrays ] .)
    ,               reduce using rule 31 (array -> [ subarrays ] .)


state 136

    (33) subarrays -> subarrays , . array
    (31) array -> . [ subarrays ]
    (32) array -> . [ indexes ]

    [               shift and go to state 85

    array                          shift and go to state 153

state 137

    (32) array -> [ indexes ] .

    ;               reduce using rule 32 (array -> [ indexes ] .)
    ]               reduce using rule 32 (array -> [ indexes ] .)
    ,               reduce using rule 32 (array -> [ indexes ] .)


state 138

    (30) assign_instr -> ID = ( - expression . ) ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 154
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 139

    (21) assign_instr -> ID PLUSASSIGN ID [ indexes . ] ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 155
    ,               shift and go to state 126


state 140

    (22) assign_instr -> ID SUBASSIGN ID [ indexes . ] ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 156
    ,               shift and go to state 126


state 141

    (23) assign_instr -> ID MULASSIGN ID [ indexes . ] ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 157
    ,               shift and go to state 126


state 142

    (24) assign_instr -> ID DIVASSIGN ID [ indexes . ] ;
    (35) indexes -> indexes . , index

    ]               shift and go to state 158
    ,               shift and go to state 126


state 143

    (25) assign_instr -> ID [ indexes ] = . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 159

state 144

    (26) assign_instr -> ID [ indexes ] PLUSASSIGN . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 160

state 145

    (27) assign_instr -> ID [ indexes ] SUBASSIGN . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 161

state 146

    (28) assign_instr -> ID [ indexes ] MULASSIGN . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 162

state 147

    (29) assign_instr -> ID [ indexes ] DIVASSIGN . expression ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 163

state 148

    (35) indexes -> indexes , index .

    ]               reduce using rule 35 (indexes -> indexes , index .)
    ,               reduce using rule 35 (indexes -> indexes , index .)
    )               reduce using rule 35 (indexes -> indexes , index .)


state 149

    (39) if_instr -> IF ( expression ) instruction .
    (40) if_instr -> IF ( expression ) instruction . ELSE instruction

    {               reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    ID              reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    IF              reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    FOR             reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    EYE             reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    ONES            reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    ZEROS           reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    (               reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    INTNUM          reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    FLOATNUM        reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    STRING          reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    $end            reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    }               reduce using rule 39 (if_instr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 164

  ! ELSE            [ reduce using rule 39 (if_instr -> IF ( expression ) instruction .) ]


state 150

    (41) while_instr -> WHILE ( expression ) instruction .

    {               reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    ID              reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    IF              reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    EYE             reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    ONES            reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    ZEROS           reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    (               reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    INTNUM          reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    FLOATNUM        reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    STRING          reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    $end            reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    }               reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 41 (while_instr -> WHILE ( expression ) instruction .)


state 151

    (43) range -> ID = expression : . expression
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28
    ID              shift and go to state 53

    expression                     shift and go to state 165

state 152

    (20) assign_instr -> ID = ID [ indexes ] . ;

    ;               shift and go to state 166


state 153

    (33) subarrays -> subarrays , array .

    ]               reduce using rule 33 (subarrays -> subarrays , array .)
    ,               reduce using rule 33 (subarrays -> subarrays , array .)


state 154

    (30) assign_instr -> ID = ( - expression ) . ;

    ;               shift and go to state 167


state 155

    (21) assign_instr -> ID PLUSASSIGN ID [ indexes ] . ;

    ;               shift and go to state 168


state 156

    (22) assign_instr -> ID SUBASSIGN ID [ indexes ] . ;

    ;               shift and go to state 169


state 157

    (23) assign_instr -> ID MULASSIGN ID [ indexes ] . ;

    ;               shift and go to state 170


state 158

    (24) assign_instr -> ID DIVASSIGN ID [ indexes ] . ;

    ;               shift and go to state 171


state 159

    (25) assign_instr -> ID [ indexes ] = expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 172
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 160

    (26) assign_instr -> ID [ indexes ] PLUSASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 173
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 161

    (27) assign_instr -> ID [ indexes ] SUBASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 174
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 162

    (28) assign_instr -> ID [ indexes ] MULASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 175
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 163

    (29) assign_instr -> ID [ indexes ] DIVASSIGN expression . ;
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 176
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 164

    (40) if_instr -> IF ( expression ) instruction ELSE . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = ID [ indexes ] ;
    (21) assign_instr -> . ID PLUSASSIGN ID [ indexes ] ;
    (22) assign_instr -> . ID SUBASSIGN ID [ indexes ] ;
    (23) assign_instr -> . ID MULASSIGN ID [ indexes ] ;
    (24) assign_instr -> . ID DIVASSIGN ID [ indexes ] ;
    (25) assign_instr -> . ID [ indexes ] = expression ;
    (26) assign_instr -> . ID [ indexes ] PLUSASSIGN expression ;
    (27) assign_instr -> . ID [ indexes ] SUBASSIGN expression ;
    (28) assign_instr -> . ID [ indexes ] MULASSIGN expression ;
    (29) assign_instr -> . ID [ indexes ] DIVASSIGN expression ;
    (30) assign_instr -> . ID = ( - expression ) ;
    (39) if_instr -> . IF ( expression ) instruction
    (40) if_instr -> . IF ( expression ) instruction ELSE instruction
    (41) while_instr -> . WHILE ( expression ) instruction
    (42) for_instr -> . FOR range instruction
    (44) break_instr -> . BREAK ;
    (45) continue_instr -> . CONTINUE ;
    (46) return_instr -> . RETURN ;
    (47) return_instr -> . RETURN expression ;
    (48) print_instr -> . PRINT printable ;
    (51) expression -> . expression LESSER_THAN expression
    (52) expression -> . expression GREATER_THAN expression
    (53) expression -> . expression LESSER_EQUAL expression
    (54) expression -> . expression GREATER_EQUAL expression
    (55) expression -> . expression NOT_EQUAL expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression + expression
    (58) expression -> . expression - expression
    (59) expression -> . expression * expression
    (60) expression -> . expression / expression
    (61) expression -> . expression DOTADD expression
    (62) expression -> . expression DOTSUB expression
    (63) expression -> . expression DOTMUL expression
    (64) expression -> . expression DOTDIV expression
    (65) expression -> . expression '
    (66) expression -> . EYE ( indexes )
    (67) expression -> . ONES ( indexes )
    (68) expression -> . ZEROS ( indexes )
    (69) expression -> . ( expression )
    (70) expression -> . INTNUM
    (71) expression -> . FLOATNUM
    (72) expression -> . STRING
    (73) expression -> . ID

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    RETURN          shift and go to state 21
    PRINT           shift and go to state 22
    EYE             shift and go to state 23
    ONES            shift and go to state 24
    ZEROS           shift and go to state 25
    (               shift and go to state 15
    INTNUM          shift and go to state 26
    FLOATNUM        shift and go to state 27
    STRING          shift and go to state 28

    expression                     shift and go to state 12
    instruction                    shift and go to state 177
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 165

    (43) range -> ID = expression : expression .
    (51) expression -> expression . LESSER_THAN expression
    (52) expression -> expression . GREATER_THAN expression
    (53) expression -> expression . LESSER_EQUAL expression
    (54) expression -> expression . GREATER_EQUAL expression
    (55) expression -> expression . NOT_EQUAL expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . + expression
    (58) expression -> expression . - expression
    (59) expression -> expression . * expression
    (60) expression -> expression . / expression
    (61) expression -> expression . DOTADD expression
    (62) expression -> expression . DOTSUB expression
    (63) expression -> expression . DOTMUL expression
    (64) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    {               reduce using rule 43 (range -> ID = expression : expression .)
    ID              reduce using rule 43 (range -> ID = expression : expression .)
    IF              reduce using rule 43 (range -> ID = expression : expression .)
    WHILE           reduce using rule 43 (range -> ID = expression : expression .)
    FOR             reduce using rule 43 (range -> ID = expression : expression .)
    BREAK           reduce using rule 43 (range -> ID = expression : expression .)
    CONTINUE        reduce using rule 43 (range -> ID = expression : expression .)
    RETURN          reduce using rule 43 (range -> ID = expression : expression .)
    PRINT           reduce using rule 43 (range -> ID = expression : expression .)
    EYE             reduce using rule 43 (range -> ID = expression : expression .)
    ONES            reduce using rule 43 (range -> ID = expression : expression .)
    ZEROS           reduce using rule 43 (range -> ID = expression : expression .)
    (               reduce using rule 43 (range -> ID = expression : expression .)
    INTNUM          reduce using rule 43 (range -> ID = expression : expression .)
    FLOATNUM        reduce using rule 43 (range -> ID = expression : expression .)
    STRING          reduce using rule 43 (range -> ID = expression : expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 166

    (20) assign_instr -> ID = ID [ indexes ] ; .

    {               reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    ID              reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    IF              reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    WHILE           reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    FOR             reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    BREAK           reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    CONTINUE        reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    RETURN          reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    PRINT           reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    EYE             reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    ONES            reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    ZEROS           reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    (               reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    INTNUM          reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    FLOATNUM        reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    STRING          reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    $end            reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    }               reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)
    ELSE            reduce using rule 20 (assign_instr -> ID = ID [ indexes ] ; .)


state 167

    (30) assign_instr -> ID = ( - expression ) ; .

    {               reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    ID              reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    IF              reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    WHILE           reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    FOR             reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    BREAK           reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    CONTINUE        reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    RETURN          reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    PRINT           reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    EYE             reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    ONES            reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    ZEROS           reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    (               reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    INTNUM          reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    FLOATNUM        reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    STRING          reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    $end            reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    }               reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)
    ELSE            reduce using rule 30 (assign_instr -> ID = ( - expression ) ; .)


state 168

    (21) assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .

    {               reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    ID              reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    IF              reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    WHILE           reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    FOR             reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    BREAK           reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    CONTINUE        reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    RETURN          reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    PRINT           reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    EYE             reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    ONES            reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    ZEROS           reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    (               reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    INTNUM          reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    FLOATNUM        reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    STRING          reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    $end            reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    }               reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)
    ELSE            reduce using rule 21 (assign_instr -> ID PLUSASSIGN ID [ indexes ] ; .)


state 169

    (22) assign_instr -> ID SUBASSIGN ID [ indexes ] ; .

    {               reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    ID              reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    IF              reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    WHILE           reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    FOR             reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    BREAK           reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    CONTINUE        reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    RETURN          reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    PRINT           reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    EYE             reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    ONES            reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    ZEROS           reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    (               reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    INTNUM          reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    FLOATNUM        reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    STRING          reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    $end            reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    }               reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)
    ELSE            reduce using rule 22 (assign_instr -> ID SUBASSIGN ID [ indexes ] ; .)


state 170

    (23) assign_instr -> ID MULASSIGN ID [ indexes ] ; .

    {               reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    ID              reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    IF              reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    WHILE           reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    FOR             reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    BREAK           reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    CONTINUE        reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    RETURN          reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    PRINT           reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    EYE             reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    ONES            reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    ZEROS           reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    (               reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    INTNUM          reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    FLOATNUM        reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    STRING          reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    $end            reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    }               reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)
    ELSE            reduce using rule 23 (assign_instr -> ID MULASSIGN ID [ indexes ] ; .)


state 171

    (24) assign_instr -> ID DIVASSIGN ID [ indexes ] ; .

    {               reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    ID              reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    IF              reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    WHILE           reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    FOR             reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    BREAK           reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    CONTINUE        reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    RETURN          reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    PRINT           reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    EYE             reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    ONES            reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    ZEROS           reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    (               reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    INTNUM          reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    FLOATNUM        reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    STRING          reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    $end            reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    }               reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)
    ELSE            reduce using rule 24 (assign_instr -> ID DIVASSIGN ID [ indexes ] ; .)


state 172

    (25) assign_instr -> ID [ indexes ] = expression ; .

    {               reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    ID              reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    IF              reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    WHILE           reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    FOR             reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    BREAK           reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    CONTINUE        reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    RETURN          reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    PRINT           reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    EYE             reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    ONES            reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    ZEROS           reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    (               reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    INTNUM          reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    FLOATNUM        reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    STRING          reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    $end            reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    }               reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)
    ELSE            reduce using rule 25 (assign_instr -> ID [ indexes ] = expression ; .)


state 173

    (26) assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .

    {               reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    ID              reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    IF              reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    WHILE           reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    FOR             reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    BREAK           reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    RETURN          reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    PRINT           reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    EYE             reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    ONES            reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    (               reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    STRING          reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    $end            reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    }               reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)
    ELSE            reduce using rule 26 (assign_instr -> ID [ indexes ] PLUSASSIGN expression ; .)


state 174

    (27) assign_instr -> ID [ indexes ] SUBASSIGN expression ; .

    {               reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    ID              reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    IF              reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    WHILE           reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    FOR             reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    BREAK           reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    RETURN          reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    PRINT           reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    EYE             reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    ONES            reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    ZEROS           reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    (               reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    INTNUM          reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    STRING          reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    $end            reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    }               reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)
    ELSE            reduce using rule 27 (assign_instr -> ID [ indexes ] SUBASSIGN expression ; .)


state 175

    (28) assign_instr -> ID [ indexes ] MULASSIGN expression ; .

    {               reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    ID              reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    IF              reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    WHILE           reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    FOR             reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    BREAK           reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    CONTINUE        reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    RETURN          reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    PRINT           reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    EYE             reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    ONES            reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    ZEROS           reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    (               reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    INTNUM          reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    STRING          reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    $end            reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    }               reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)
    ELSE            reduce using rule 28 (assign_instr -> ID [ indexes ] MULASSIGN expression ; .)


state 176

    (29) assign_instr -> ID [ indexes ] DIVASSIGN expression ; .

    {               reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    ID              reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    IF              reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    WHILE           reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    FOR             reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    BREAK           reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    RETURN          reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    PRINT           reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    EYE             reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    ONES            reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    ZEROS           reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    (               reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    INTNUM          reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    STRING          reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    $end            reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    }               reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)
    ELSE            reduce using rule 29 (assign_instr -> ID [ indexes ] DIVASSIGN expression ; .)


state 177

    (40) if_instr -> IF ( expression ) instruction ELSE instruction .

    {               reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    EYE             reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ONES            reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    (               reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    STRING          reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 40 (if_instr -> IF ( expression ) instruction ELSE instruction .)

