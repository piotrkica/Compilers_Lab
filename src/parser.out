Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> assign_instr
Rule 5     instruction -> if_instr
Rule 6     instruction -> while_instr
Rule 7     instruction -> for_instr
Rule 8     instruction -> break_instr
Rule 9     instruction -> continue_instr
Rule 10    instruction -> return_instr
Rule 11    instruction -> print_instr
Rule 12    instruction -> expression
Rule 13    instruction -> { instructions }
Rule 14    assign_instr -> ID = expression ;
Rule 15    assign_instr -> ID = - expression ;
Rule 16    assign_instr -> ID PLUSASSIGN expression ;
Rule 17    assign_instr -> ID SUBASSIGN expression ;
Rule 18    assign_instr -> ID MULASSIGN expression ;
Rule 19    assign_instr -> ID DIVASSIGN expression ;
Rule 20    assign_instr -> ID [ indexes ] = expression ;
Rule 21    assign_instr -> ID = arrays ;
Rule 22    arrays -> [ arrays ]
Rule 23    arrays -> arrays , arrays
Rule 24    arrays -> [ indexes ]
Rule 25    indexes -> indexes , index
Rule 26    indexes -> index
Rule 27    index -> INTNUM
Rule 28    index -> ID
Rule 29    if_instr -> IF ( comparison ) instruction
Rule 30    if_instr -> IF ( comparison ) instruction ELSE instruction
Rule 31    while_instr -> WHILE ( comparison ) instruction
Rule 32    for_instr -> FOR range instruction
Rule 33    range -> ID = expression : expression
Rule 34    break_instr -> BREAK ;
Rule 35    continue_instr -> CONTINUE ;
Rule 36    return_instr -> RETURN expression ;
Rule 37    return_instr -> RETURN ;
Rule 38    print_instr -> PRINT printable ;
Rule 39    printable -> printable , expression
Rule 40    printable -> expression
Rule 41    expression -> comparison
Rule 42    expression -> expression + expression
Rule 43    expression -> expression - expression
Rule 44    expression -> expression * expression
Rule 45    expression -> expression / expression
Rule 46    expression -> expression DOTADD expression
Rule 47    expression -> expression DOTSUB expression
Rule 48    expression -> expression DOTMUL expression
Rule 49    expression -> expression DOTDIV expression
Rule 50    expression -> ( expression )
Rule 51    expression -> ( - expression )
Rule 52    expression -> EYE ( expression )
Rule 53    expression -> ONES ( expression )
Rule 54    expression -> ZEROS ( expression )
Rule 55    expression -> expression '
Rule 56    expression -> FLOATNUM
Rule 57    expression -> INTNUM
Rule 58    expression -> STRING
Rule 59    expression -> ID
Rule 60    comparison -> expression LESSER_THAN expression
Rule 61    comparison -> expression GREATER_THAN expression
Rule 62    comparison -> expression LESSER_EQUAL expression
Rule 63    comparison -> expression GREATER_EQUAL expression
Rule 64    comparison -> expression NOT_EQUAL expression
Rule 65    comparison -> expression EQUAL expression

Terminals, with rules where they appear

'                    : 55
(                    : 29 30 31 50 51 52 53 54
)                    : 29 30 31 50 51 52 53 54
*                    : 44
+                    : 42
,                    : 23 25 39
-                    : 15 43 51
/                    : 45
:                    : 33
;                    : 14 15 16 17 18 19 20 21 34 35 36 37 38
=                    : 14 15 20 21 33
BREAK                : 34
CONTINUE             : 35
DIVASSIGN            : 19
DOTADD               : 46
DOTDIV               : 49
DOTMUL               : 48
DOTSUB               : 47
ELSE                 : 30
EQUAL                : 65
EYE                  : 52
FLOATNUM             : 56
FOR                  : 32
GREATER_EQUAL        : 63
GREATER_THAN         : 61
ID                   : 14 15 16 17 18 19 20 21 28 33 59
IF                   : 29 30
INTNUM               : 27 57
LESSER_EQUAL         : 62
LESSER_THAN          : 60
MULASSIGN            : 18
NOT_EQUAL            : 64
ONES                 : 53
PLUSASSIGN           : 16
PRINT                : 38
RETURN               : 36 37
STRING               : 58
SUBASSIGN            : 17
WHILE                : 31
ZEROS                : 54
[                    : 20 22 24
]                    : 20 22 24
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

arrays               : 21 22 23 23
assign_instr         : 4
break_instr          : 8
comparison           : 29 30 31 41
continue_instr       : 9
expression           : 12 14 15 16 17 18 19 20 33 33 36 39 40 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 52 53 54 55 60 60 61 61 62 62 63 63 64 64 65 65
for_instr            : 7
if_instr             : 5
index                : 25 26
indexes              : 20 24 25
instruction          : 2 3 29 30 30 31 32
instructions         : 1 2 13
print_instr          : 11
printable            : 38 39
program              : 0
range                : 32
return_instr         : 10
while_instr          : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    comparison                     shift and go to state 17

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 30
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    comparison                     shift and go to state 17

state 3

    (3) instructions -> instruction .

    {               reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    (               reduce using rule 3 (instructions -> instruction .)
    EYE             reduce using rule 3 (instructions -> instruction .)
    ONES            reduce using rule 3 (instructions -> instruction .)
    ZEROS           reduce using rule 3 (instructions -> instruction .)
    FLOATNUM        reduce using rule 3 (instructions -> instruction .)
    INTNUM          reduce using rule 3 (instructions -> instruction .)
    STRING          reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> assign_instr .

    {               reduce using rule 4 (instruction -> assign_instr .)
    ID              reduce using rule 4 (instruction -> assign_instr .)
    IF              reduce using rule 4 (instruction -> assign_instr .)
    WHILE           reduce using rule 4 (instruction -> assign_instr .)
    FOR             reduce using rule 4 (instruction -> assign_instr .)
    BREAK           reduce using rule 4 (instruction -> assign_instr .)
    CONTINUE        reduce using rule 4 (instruction -> assign_instr .)
    RETURN          reduce using rule 4 (instruction -> assign_instr .)
    PRINT           reduce using rule 4 (instruction -> assign_instr .)
    (               reduce using rule 4 (instruction -> assign_instr .)
    EYE             reduce using rule 4 (instruction -> assign_instr .)
    ONES            reduce using rule 4 (instruction -> assign_instr .)
    ZEROS           reduce using rule 4 (instruction -> assign_instr .)
    FLOATNUM        reduce using rule 4 (instruction -> assign_instr .)
    INTNUM          reduce using rule 4 (instruction -> assign_instr .)
    STRING          reduce using rule 4 (instruction -> assign_instr .)
    $end            reduce using rule 4 (instruction -> assign_instr .)
    }               reduce using rule 4 (instruction -> assign_instr .)
    ELSE            reduce using rule 4 (instruction -> assign_instr .)


state 5

    (5) instruction -> if_instr .

    {               reduce using rule 5 (instruction -> if_instr .)
    ID              reduce using rule 5 (instruction -> if_instr .)
    IF              reduce using rule 5 (instruction -> if_instr .)
    WHILE           reduce using rule 5 (instruction -> if_instr .)
    FOR             reduce using rule 5 (instruction -> if_instr .)
    BREAK           reduce using rule 5 (instruction -> if_instr .)
    CONTINUE        reduce using rule 5 (instruction -> if_instr .)
    RETURN          reduce using rule 5 (instruction -> if_instr .)
    PRINT           reduce using rule 5 (instruction -> if_instr .)
    (               reduce using rule 5 (instruction -> if_instr .)
    EYE             reduce using rule 5 (instruction -> if_instr .)
    ONES            reduce using rule 5 (instruction -> if_instr .)
    ZEROS           reduce using rule 5 (instruction -> if_instr .)
    FLOATNUM        reduce using rule 5 (instruction -> if_instr .)
    INTNUM          reduce using rule 5 (instruction -> if_instr .)
    STRING          reduce using rule 5 (instruction -> if_instr .)
    $end            reduce using rule 5 (instruction -> if_instr .)
    }               reduce using rule 5 (instruction -> if_instr .)
    ELSE            reduce using rule 5 (instruction -> if_instr .)


state 6

    (6) instruction -> while_instr .

    {               reduce using rule 6 (instruction -> while_instr .)
    ID              reduce using rule 6 (instruction -> while_instr .)
    IF              reduce using rule 6 (instruction -> while_instr .)
    WHILE           reduce using rule 6 (instruction -> while_instr .)
    FOR             reduce using rule 6 (instruction -> while_instr .)
    BREAK           reduce using rule 6 (instruction -> while_instr .)
    CONTINUE        reduce using rule 6 (instruction -> while_instr .)
    RETURN          reduce using rule 6 (instruction -> while_instr .)
    PRINT           reduce using rule 6 (instruction -> while_instr .)
    (               reduce using rule 6 (instruction -> while_instr .)
    EYE             reduce using rule 6 (instruction -> while_instr .)
    ONES            reduce using rule 6 (instruction -> while_instr .)
    ZEROS           reduce using rule 6 (instruction -> while_instr .)
    FLOATNUM        reduce using rule 6 (instruction -> while_instr .)
    INTNUM          reduce using rule 6 (instruction -> while_instr .)
    STRING          reduce using rule 6 (instruction -> while_instr .)
    $end            reduce using rule 6 (instruction -> while_instr .)
    }               reduce using rule 6 (instruction -> while_instr .)
    ELSE            reduce using rule 6 (instruction -> while_instr .)


state 7

    (7) instruction -> for_instr .

    {               reduce using rule 7 (instruction -> for_instr .)
    ID              reduce using rule 7 (instruction -> for_instr .)
    IF              reduce using rule 7 (instruction -> for_instr .)
    WHILE           reduce using rule 7 (instruction -> for_instr .)
    FOR             reduce using rule 7 (instruction -> for_instr .)
    BREAK           reduce using rule 7 (instruction -> for_instr .)
    CONTINUE        reduce using rule 7 (instruction -> for_instr .)
    RETURN          reduce using rule 7 (instruction -> for_instr .)
    PRINT           reduce using rule 7 (instruction -> for_instr .)
    (               reduce using rule 7 (instruction -> for_instr .)
    EYE             reduce using rule 7 (instruction -> for_instr .)
    ONES            reduce using rule 7 (instruction -> for_instr .)
    ZEROS           reduce using rule 7 (instruction -> for_instr .)
    FLOATNUM        reduce using rule 7 (instruction -> for_instr .)
    INTNUM          reduce using rule 7 (instruction -> for_instr .)
    STRING          reduce using rule 7 (instruction -> for_instr .)
    $end            reduce using rule 7 (instruction -> for_instr .)
    }               reduce using rule 7 (instruction -> for_instr .)
    ELSE            reduce using rule 7 (instruction -> for_instr .)


state 8

    (8) instruction -> break_instr .

    {               reduce using rule 8 (instruction -> break_instr .)
    ID              reduce using rule 8 (instruction -> break_instr .)
    IF              reduce using rule 8 (instruction -> break_instr .)
    WHILE           reduce using rule 8 (instruction -> break_instr .)
    FOR             reduce using rule 8 (instruction -> break_instr .)
    BREAK           reduce using rule 8 (instruction -> break_instr .)
    CONTINUE        reduce using rule 8 (instruction -> break_instr .)
    RETURN          reduce using rule 8 (instruction -> break_instr .)
    PRINT           reduce using rule 8 (instruction -> break_instr .)
    (               reduce using rule 8 (instruction -> break_instr .)
    EYE             reduce using rule 8 (instruction -> break_instr .)
    ONES            reduce using rule 8 (instruction -> break_instr .)
    ZEROS           reduce using rule 8 (instruction -> break_instr .)
    FLOATNUM        reduce using rule 8 (instruction -> break_instr .)
    INTNUM          reduce using rule 8 (instruction -> break_instr .)
    STRING          reduce using rule 8 (instruction -> break_instr .)
    $end            reduce using rule 8 (instruction -> break_instr .)
    }               reduce using rule 8 (instruction -> break_instr .)
    ELSE            reduce using rule 8 (instruction -> break_instr .)


state 9

    (9) instruction -> continue_instr .

    {               reduce using rule 9 (instruction -> continue_instr .)
    ID              reduce using rule 9 (instruction -> continue_instr .)
    IF              reduce using rule 9 (instruction -> continue_instr .)
    WHILE           reduce using rule 9 (instruction -> continue_instr .)
    FOR             reduce using rule 9 (instruction -> continue_instr .)
    BREAK           reduce using rule 9 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 9 (instruction -> continue_instr .)
    RETURN          reduce using rule 9 (instruction -> continue_instr .)
    PRINT           reduce using rule 9 (instruction -> continue_instr .)
    (               reduce using rule 9 (instruction -> continue_instr .)
    EYE             reduce using rule 9 (instruction -> continue_instr .)
    ONES            reduce using rule 9 (instruction -> continue_instr .)
    ZEROS           reduce using rule 9 (instruction -> continue_instr .)
    FLOATNUM        reduce using rule 9 (instruction -> continue_instr .)
    INTNUM          reduce using rule 9 (instruction -> continue_instr .)
    STRING          reduce using rule 9 (instruction -> continue_instr .)
    $end            reduce using rule 9 (instruction -> continue_instr .)
    }               reduce using rule 9 (instruction -> continue_instr .)
    ELSE            reduce using rule 9 (instruction -> continue_instr .)


state 10

    (10) instruction -> return_instr .

    {               reduce using rule 10 (instruction -> return_instr .)
    ID              reduce using rule 10 (instruction -> return_instr .)
    IF              reduce using rule 10 (instruction -> return_instr .)
    WHILE           reduce using rule 10 (instruction -> return_instr .)
    FOR             reduce using rule 10 (instruction -> return_instr .)
    BREAK           reduce using rule 10 (instruction -> return_instr .)
    CONTINUE        reduce using rule 10 (instruction -> return_instr .)
    RETURN          reduce using rule 10 (instruction -> return_instr .)
    PRINT           reduce using rule 10 (instruction -> return_instr .)
    (               reduce using rule 10 (instruction -> return_instr .)
    EYE             reduce using rule 10 (instruction -> return_instr .)
    ONES            reduce using rule 10 (instruction -> return_instr .)
    ZEROS           reduce using rule 10 (instruction -> return_instr .)
    FLOATNUM        reduce using rule 10 (instruction -> return_instr .)
    INTNUM          reduce using rule 10 (instruction -> return_instr .)
    STRING          reduce using rule 10 (instruction -> return_instr .)
    $end            reduce using rule 10 (instruction -> return_instr .)
    }               reduce using rule 10 (instruction -> return_instr .)
    ELSE            reduce using rule 10 (instruction -> return_instr .)


state 11

    (11) instruction -> print_instr .

    {               reduce using rule 11 (instruction -> print_instr .)
    ID              reduce using rule 11 (instruction -> print_instr .)
    IF              reduce using rule 11 (instruction -> print_instr .)
    WHILE           reduce using rule 11 (instruction -> print_instr .)
    FOR             reduce using rule 11 (instruction -> print_instr .)
    BREAK           reduce using rule 11 (instruction -> print_instr .)
    CONTINUE        reduce using rule 11 (instruction -> print_instr .)
    RETURN          reduce using rule 11 (instruction -> print_instr .)
    PRINT           reduce using rule 11 (instruction -> print_instr .)
    (               reduce using rule 11 (instruction -> print_instr .)
    EYE             reduce using rule 11 (instruction -> print_instr .)
    ONES            reduce using rule 11 (instruction -> print_instr .)
    ZEROS           reduce using rule 11 (instruction -> print_instr .)
    FLOATNUM        reduce using rule 11 (instruction -> print_instr .)
    INTNUM          reduce using rule 11 (instruction -> print_instr .)
    STRING          reduce using rule 11 (instruction -> print_instr .)
    $end            reduce using rule 11 (instruction -> print_instr .)
    }               reduce using rule 11 (instruction -> print_instr .)
    ELSE            reduce using rule 11 (instruction -> print_instr .)


state 12

    (12) instruction -> expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    {               reduce using rule 12 (instruction -> expression .)
    ID              reduce using rule 12 (instruction -> expression .)
    IF              reduce using rule 12 (instruction -> expression .)
    WHILE           reduce using rule 12 (instruction -> expression .)
    FOR             reduce using rule 12 (instruction -> expression .)
    BREAK           reduce using rule 12 (instruction -> expression .)
    CONTINUE        reduce using rule 12 (instruction -> expression .)
    RETURN          reduce using rule 12 (instruction -> expression .)
    PRINT           reduce using rule 12 (instruction -> expression .)
    (               reduce using rule 12 (instruction -> expression .)
    EYE             reduce using rule 12 (instruction -> expression .)
    ONES            reduce using rule 12 (instruction -> expression .)
    ZEROS           reduce using rule 12 (instruction -> expression .)
    FLOATNUM        reduce using rule 12 (instruction -> expression .)
    INTNUM          reduce using rule 12 (instruction -> expression .)
    STRING          reduce using rule 12 (instruction -> expression .)
    $end            reduce using rule 12 (instruction -> expression .)
    }               reduce using rule 12 (instruction -> expression .)
    ELSE            reduce using rule 12 (instruction -> expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 13

    (13) instruction -> { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    instructions                   shift and go to state 46
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    comparison                     shift and go to state 17

state 14

    (14) assign_instr -> ID . = expression ;
    (15) assign_instr -> ID . = - expression ;
    (16) assign_instr -> ID . PLUSASSIGN expression ;
    (17) assign_instr -> ID . SUBASSIGN expression ;
    (18) assign_instr -> ID . MULASSIGN expression ;
    (19) assign_instr -> ID . DIVASSIGN expression ;
    (20) assign_instr -> ID . [ indexes ] = expression ;
    (21) assign_instr -> ID . = arrays ;
    (59) expression -> ID .

    =               shift and go to state 47
    PLUSASSIGN      shift and go to state 48
    SUBASSIGN       shift and go to state 49
    MULASSIGN       shift and go to state 50
    DIVASSIGN       shift and go to state 51
    [               shift and go to state 52
    +               reduce using rule 59 (expression -> ID .)
    -               reduce using rule 59 (expression -> ID .)
    *               reduce using rule 59 (expression -> ID .)
    /               reduce using rule 59 (expression -> ID .)
    DOTADD          reduce using rule 59 (expression -> ID .)
    DOTSUB          reduce using rule 59 (expression -> ID .)
    DOTMUL          reduce using rule 59 (expression -> ID .)
    DOTDIV          reduce using rule 59 (expression -> ID .)
    '               reduce using rule 59 (expression -> ID .)
    LESSER_THAN     reduce using rule 59 (expression -> ID .)
    GREATER_THAN    reduce using rule 59 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 59 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 59 (expression -> ID .)
    NOT_EQUAL       reduce using rule 59 (expression -> ID .)
    EQUAL           reduce using rule 59 (expression -> ID .)
    {               reduce using rule 59 (expression -> ID .)
    ID              reduce using rule 59 (expression -> ID .)
    IF              reduce using rule 59 (expression -> ID .)
    WHILE           reduce using rule 59 (expression -> ID .)
    FOR             reduce using rule 59 (expression -> ID .)
    BREAK           reduce using rule 59 (expression -> ID .)
    CONTINUE        reduce using rule 59 (expression -> ID .)
    RETURN          reduce using rule 59 (expression -> ID .)
    PRINT           reduce using rule 59 (expression -> ID .)
    (               reduce using rule 59 (expression -> ID .)
    EYE             reduce using rule 59 (expression -> ID .)
    ONES            reduce using rule 59 (expression -> ID .)
    ZEROS           reduce using rule 59 (expression -> ID .)
    FLOATNUM        reduce using rule 59 (expression -> ID .)
    INTNUM          reduce using rule 59 (expression -> ID .)
    STRING          reduce using rule 59 (expression -> ID .)
    $end            reduce using rule 59 (expression -> ID .)
    }               reduce using rule 59 (expression -> ID .)
    ELSE            reduce using rule 59 (expression -> ID .)


state 15

    (29) if_instr -> IF . ( comparison ) instruction
    (30) if_instr -> IF . ( comparison ) instruction ELSE instruction

    (               shift and go to state 53


state 16

    (50) expression -> ( . expression )
    (51) expression -> ( . - expression )
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    -               shift and go to state 55
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 54
    comparison                     shift and go to state 17

state 17

    (41) expression -> comparison .

    +               reduce using rule 41 (expression -> comparison .)
    -               reduce using rule 41 (expression -> comparison .)
    *               reduce using rule 41 (expression -> comparison .)
    /               reduce using rule 41 (expression -> comparison .)
    DOTADD          reduce using rule 41 (expression -> comparison .)
    DOTSUB          reduce using rule 41 (expression -> comparison .)
    DOTMUL          reduce using rule 41 (expression -> comparison .)
    DOTDIV          reduce using rule 41 (expression -> comparison .)
    '               reduce using rule 41 (expression -> comparison .)
    LESSER_THAN     reduce using rule 41 (expression -> comparison .)
    GREATER_THAN    reduce using rule 41 (expression -> comparison .)
    LESSER_EQUAL    reduce using rule 41 (expression -> comparison .)
    GREATER_EQUAL   reduce using rule 41 (expression -> comparison .)
    NOT_EQUAL       reduce using rule 41 (expression -> comparison .)
    EQUAL           reduce using rule 41 (expression -> comparison .)
    {               reduce using rule 41 (expression -> comparison .)
    ID              reduce using rule 41 (expression -> comparison .)
    IF              reduce using rule 41 (expression -> comparison .)
    WHILE           reduce using rule 41 (expression -> comparison .)
    FOR             reduce using rule 41 (expression -> comparison .)
    BREAK           reduce using rule 41 (expression -> comparison .)
    CONTINUE        reduce using rule 41 (expression -> comparison .)
    RETURN          reduce using rule 41 (expression -> comparison .)
    PRINT           reduce using rule 41 (expression -> comparison .)
    (               reduce using rule 41 (expression -> comparison .)
    EYE             reduce using rule 41 (expression -> comparison .)
    ONES            reduce using rule 41 (expression -> comparison .)
    ZEROS           reduce using rule 41 (expression -> comparison .)
    FLOATNUM        reduce using rule 41 (expression -> comparison .)
    INTNUM          reduce using rule 41 (expression -> comparison .)
    STRING          reduce using rule 41 (expression -> comparison .)
    $end            reduce using rule 41 (expression -> comparison .)
    }               reduce using rule 41 (expression -> comparison .)
    )               reduce using rule 41 (expression -> comparison .)
    ;               reduce using rule 41 (expression -> comparison .)
    ,               reduce using rule 41 (expression -> comparison .)
    ELSE            reduce using rule 41 (expression -> comparison .)
    :               reduce using rule 41 (expression -> comparison .)


state 18

    (31) while_instr -> WHILE . ( comparison ) instruction

    (               shift and go to state 57


state 19

    (32) for_instr -> FOR . range instruction
    (33) range -> . ID = expression : expression

    ID              shift and go to state 59

    range                          shift and go to state 58

state 20

    (34) break_instr -> BREAK . ;

    ;               shift and go to state 60


state 21

    (35) continue_instr -> CONTINUE . ;

    ;               shift and go to state 61


state 22

    (36) return_instr -> RETURN . expression ;
    (37) return_instr -> RETURN . ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    ;               shift and go to state 63
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 62
    comparison                     shift and go to state 17

state 23

    (38) print_instr -> PRINT . printable ;
    (39) printable -> . printable , expression
    (40) printable -> . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    printable                      shift and go to state 64
    expression                     shift and go to state 65
    comparison                     shift and go to state 17

state 24

    (52) expression -> EYE . ( expression )

    (               shift and go to state 66


state 25

    (53) expression -> ONES . ( expression )

    (               shift and go to state 67


state 26

    (54) expression -> ZEROS . ( expression )

    (               shift and go to state 68


state 27

    (56) expression -> FLOATNUM .

    +               reduce using rule 56 (expression -> FLOATNUM .)
    -               reduce using rule 56 (expression -> FLOATNUM .)
    *               reduce using rule 56 (expression -> FLOATNUM .)
    /               reduce using rule 56 (expression -> FLOATNUM .)
    DOTADD          reduce using rule 56 (expression -> FLOATNUM .)
    DOTSUB          reduce using rule 56 (expression -> FLOATNUM .)
    DOTMUL          reduce using rule 56 (expression -> FLOATNUM .)
    DOTDIV          reduce using rule 56 (expression -> FLOATNUM .)
    '               reduce using rule 56 (expression -> FLOATNUM .)
    LESSER_THAN     reduce using rule 56 (expression -> FLOATNUM .)
    GREATER_THAN    reduce using rule 56 (expression -> FLOATNUM .)
    LESSER_EQUAL    reduce using rule 56 (expression -> FLOATNUM .)
    GREATER_EQUAL   reduce using rule 56 (expression -> FLOATNUM .)
    NOT_EQUAL       reduce using rule 56 (expression -> FLOATNUM .)
    EQUAL           reduce using rule 56 (expression -> FLOATNUM .)
    {               reduce using rule 56 (expression -> FLOATNUM .)
    ID              reduce using rule 56 (expression -> FLOATNUM .)
    IF              reduce using rule 56 (expression -> FLOATNUM .)
    WHILE           reduce using rule 56 (expression -> FLOATNUM .)
    FOR             reduce using rule 56 (expression -> FLOATNUM .)
    BREAK           reduce using rule 56 (expression -> FLOATNUM .)
    CONTINUE        reduce using rule 56 (expression -> FLOATNUM .)
    RETURN          reduce using rule 56 (expression -> FLOATNUM .)
    PRINT           reduce using rule 56 (expression -> FLOATNUM .)
    (               reduce using rule 56 (expression -> FLOATNUM .)
    EYE             reduce using rule 56 (expression -> FLOATNUM .)
    ONES            reduce using rule 56 (expression -> FLOATNUM .)
    ZEROS           reduce using rule 56 (expression -> FLOATNUM .)
    FLOATNUM        reduce using rule 56 (expression -> FLOATNUM .)
    INTNUM          reduce using rule 56 (expression -> FLOATNUM .)
    STRING          reduce using rule 56 (expression -> FLOATNUM .)
    $end            reduce using rule 56 (expression -> FLOATNUM .)
    }               reduce using rule 56 (expression -> FLOATNUM .)
    )               reduce using rule 56 (expression -> FLOATNUM .)
    ;               reduce using rule 56 (expression -> FLOATNUM .)
    ,               reduce using rule 56 (expression -> FLOATNUM .)
    ELSE            reduce using rule 56 (expression -> FLOATNUM .)
    :               reduce using rule 56 (expression -> FLOATNUM .)


state 28

    (57) expression -> INTNUM .

    +               reduce using rule 57 (expression -> INTNUM .)
    -               reduce using rule 57 (expression -> INTNUM .)
    *               reduce using rule 57 (expression -> INTNUM .)
    /               reduce using rule 57 (expression -> INTNUM .)
    DOTADD          reduce using rule 57 (expression -> INTNUM .)
    DOTSUB          reduce using rule 57 (expression -> INTNUM .)
    DOTMUL          reduce using rule 57 (expression -> INTNUM .)
    DOTDIV          reduce using rule 57 (expression -> INTNUM .)
    '               reduce using rule 57 (expression -> INTNUM .)
    LESSER_THAN     reduce using rule 57 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 57 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 57 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 57 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 57 (expression -> INTNUM .)
    EQUAL           reduce using rule 57 (expression -> INTNUM .)
    {               reduce using rule 57 (expression -> INTNUM .)
    ID              reduce using rule 57 (expression -> INTNUM .)
    IF              reduce using rule 57 (expression -> INTNUM .)
    WHILE           reduce using rule 57 (expression -> INTNUM .)
    FOR             reduce using rule 57 (expression -> INTNUM .)
    BREAK           reduce using rule 57 (expression -> INTNUM .)
    CONTINUE        reduce using rule 57 (expression -> INTNUM .)
    RETURN          reduce using rule 57 (expression -> INTNUM .)
    PRINT           reduce using rule 57 (expression -> INTNUM .)
    (               reduce using rule 57 (expression -> INTNUM .)
    EYE             reduce using rule 57 (expression -> INTNUM .)
    ONES            reduce using rule 57 (expression -> INTNUM .)
    ZEROS           reduce using rule 57 (expression -> INTNUM .)
    FLOATNUM        reduce using rule 57 (expression -> INTNUM .)
    INTNUM          reduce using rule 57 (expression -> INTNUM .)
    STRING          reduce using rule 57 (expression -> INTNUM .)
    $end            reduce using rule 57 (expression -> INTNUM .)
    }               reduce using rule 57 (expression -> INTNUM .)
    )               reduce using rule 57 (expression -> INTNUM .)
    ;               reduce using rule 57 (expression -> INTNUM .)
    ,               reduce using rule 57 (expression -> INTNUM .)
    ELSE            reduce using rule 57 (expression -> INTNUM .)
    :               reduce using rule 57 (expression -> INTNUM .)


state 29

    (58) expression -> STRING .

    +               reduce using rule 58 (expression -> STRING .)
    -               reduce using rule 58 (expression -> STRING .)
    *               reduce using rule 58 (expression -> STRING .)
    /               reduce using rule 58 (expression -> STRING .)
    DOTADD          reduce using rule 58 (expression -> STRING .)
    DOTSUB          reduce using rule 58 (expression -> STRING .)
    DOTMUL          reduce using rule 58 (expression -> STRING .)
    DOTDIV          reduce using rule 58 (expression -> STRING .)
    '               reduce using rule 58 (expression -> STRING .)
    LESSER_THAN     reduce using rule 58 (expression -> STRING .)
    GREATER_THAN    reduce using rule 58 (expression -> STRING .)
    LESSER_EQUAL    reduce using rule 58 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 58 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 58 (expression -> STRING .)
    EQUAL           reduce using rule 58 (expression -> STRING .)
    {               reduce using rule 58 (expression -> STRING .)
    ID              reduce using rule 58 (expression -> STRING .)
    IF              reduce using rule 58 (expression -> STRING .)
    WHILE           reduce using rule 58 (expression -> STRING .)
    FOR             reduce using rule 58 (expression -> STRING .)
    BREAK           reduce using rule 58 (expression -> STRING .)
    CONTINUE        reduce using rule 58 (expression -> STRING .)
    RETURN          reduce using rule 58 (expression -> STRING .)
    PRINT           reduce using rule 58 (expression -> STRING .)
    (               reduce using rule 58 (expression -> STRING .)
    EYE             reduce using rule 58 (expression -> STRING .)
    ONES            reduce using rule 58 (expression -> STRING .)
    ZEROS           reduce using rule 58 (expression -> STRING .)
    FLOATNUM        reduce using rule 58 (expression -> STRING .)
    INTNUM          reduce using rule 58 (expression -> STRING .)
    STRING          reduce using rule 58 (expression -> STRING .)
    $end            reduce using rule 58 (expression -> STRING .)
    }               reduce using rule 58 (expression -> STRING .)
    )               reduce using rule 58 (expression -> STRING .)
    ;               reduce using rule 58 (expression -> STRING .)
    ,               reduce using rule 58 (expression -> STRING .)
    ELSE            reduce using rule 58 (expression -> STRING .)
    :               reduce using rule 58 (expression -> STRING .)


state 30

    (2) instructions -> instructions instruction .

    {               reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 31

    (42) expression -> expression + . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 69
    comparison                     shift and go to state 17

state 32

    (43) expression -> expression - . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 70
    comparison                     shift and go to state 17

state 33

    (44) expression -> expression * . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 71
    comparison                     shift and go to state 17

state 34

    (45) expression -> expression / . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 72
    comparison                     shift and go to state 17

state 35

    (46) expression -> expression DOTADD . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 73
    comparison                     shift and go to state 17

state 36

    (47) expression -> expression DOTSUB . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 74
    comparison                     shift and go to state 17

state 37

    (48) expression -> expression DOTMUL . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 75
    comparison                     shift and go to state 17

state 38

    (49) expression -> expression DOTDIV . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 76
    comparison                     shift and go to state 17

state 39

    (55) expression -> expression ' .

    +               reduce using rule 55 (expression -> expression ' .)
    -               reduce using rule 55 (expression -> expression ' .)
    *               reduce using rule 55 (expression -> expression ' .)
    /               reduce using rule 55 (expression -> expression ' .)
    DOTADD          reduce using rule 55 (expression -> expression ' .)
    DOTSUB          reduce using rule 55 (expression -> expression ' .)
    DOTMUL          reduce using rule 55 (expression -> expression ' .)
    DOTDIV          reduce using rule 55 (expression -> expression ' .)
    '               reduce using rule 55 (expression -> expression ' .)
    LESSER_THAN     reduce using rule 55 (expression -> expression ' .)
    GREATER_THAN    reduce using rule 55 (expression -> expression ' .)
    LESSER_EQUAL    reduce using rule 55 (expression -> expression ' .)
    GREATER_EQUAL   reduce using rule 55 (expression -> expression ' .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression ' .)
    EQUAL           reduce using rule 55 (expression -> expression ' .)
    {               reduce using rule 55 (expression -> expression ' .)
    ID              reduce using rule 55 (expression -> expression ' .)
    IF              reduce using rule 55 (expression -> expression ' .)
    WHILE           reduce using rule 55 (expression -> expression ' .)
    FOR             reduce using rule 55 (expression -> expression ' .)
    BREAK           reduce using rule 55 (expression -> expression ' .)
    CONTINUE        reduce using rule 55 (expression -> expression ' .)
    RETURN          reduce using rule 55 (expression -> expression ' .)
    PRINT           reduce using rule 55 (expression -> expression ' .)
    (               reduce using rule 55 (expression -> expression ' .)
    EYE             reduce using rule 55 (expression -> expression ' .)
    ONES            reduce using rule 55 (expression -> expression ' .)
    ZEROS           reduce using rule 55 (expression -> expression ' .)
    FLOATNUM        reduce using rule 55 (expression -> expression ' .)
    INTNUM          reduce using rule 55 (expression -> expression ' .)
    STRING          reduce using rule 55 (expression -> expression ' .)
    $end            reduce using rule 55 (expression -> expression ' .)
    }               reduce using rule 55 (expression -> expression ' .)
    )               reduce using rule 55 (expression -> expression ' .)
    ;               reduce using rule 55 (expression -> expression ' .)
    ,               reduce using rule 55 (expression -> expression ' .)
    ELSE            reduce using rule 55 (expression -> expression ' .)
    :               reduce using rule 55 (expression -> expression ' .)


state 40

    (60) comparison -> expression LESSER_THAN . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 77
    comparison                     shift and go to state 17

state 41

    (61) comparison -> expression GREATER_THAN . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 78
    comparison                     shift and go to state 17

state 42

    (62) comparison -> expression LESSER_EQUAL . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 79
    comparison                     shift and go to state 17

state 43

    (63) comparison -> expression GREATER_EQUAL . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 80
    comparison                     shift and go to state 17

state 44

    (64) comparison -> expression NOT_EQUAL . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 81
    comparison                     shift and go to state 17

state 45

    (65) comparison -> expression EQUAL . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 82
    comparison                     shift and go to state 17

state 46

    (13) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    }               shift and go to state 83
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 30
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    comparison                     shift and go to state 17

state 47

    (14) assign_instr -> ID = . expression ;
    (15) assign_instr -> ID = . - expression ;
    (21) assign_instr -> ID = . arrays ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    -               shift and go to state 85
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56
    [               shift and go to state 87

    expression                     shift and go to state 84
    arrays                         shift and go to state 86
    comparison                     shift and go to state 17

state 48

    (16) assign_instr -> ID PLUSASSIGN . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 88
    comparison                     shift and go to state 17

state 49

    (17) assign_instr -> ID SUBASSIGN . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 89
    comparison                     shift and go to state 17

state 50

    (18) assign_instr -> ID MULASSIGN . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 90
    comparison                     shift and go to state 17

state 51

    (19) assign_instr -> ID DIVASSIGN . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 91
    comparison                     shift and go to state 17

state 52

    (20) assign_instr -> ID [ . indexes ] = expression ;
    (25) indexes -> . indexes , index
    (26) indexes -> . index
    (27) index -> . INTNUM
    (28) index -> . ID

    INTNUM          shift and go to state 95
    ID              shift and go to state 92

    indexes                        shift and go to state 93
    index                          shift and go to state 94

state 53

    (29) if_instr -> IF ( . comparison ) instruction
    (30) if_instr -> IF ( . comparison ) instruction ELSE instruction
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    comparison                     shift and go to state 96
    expression                     shift and go to state 97

state 54

    (50) expression -> ( expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    )               shift and go to state 98
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 55

    (51) expression -> ( - . expression )
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 99
    comparison                     shift and go to state 17

state 56

    (59) expression -> ID .

    )               reduce using rule 59 (expression -> ID .)
    +               reduce using rule 59 (expression -> ID .)
    -               reduce using rule 59 (expression -> ID .)
    *               reduce using rule 59 (expression -> ID .)
    /               reduce using rule 59 (expression -> ID .)
    DOTADD          reduce using rule 59 (expression -> ID .)
    DOTSUB          reduce using rule 59 (expression -> ID .)
    DOTMUL          reduce using rule 59 (expression -> ID .)
    DOTDIV          reduce using rule 59 (expression -> ID .)
    '               reduce using rule 59 (expression -> ID .)
    LESSER_THAN     reduce using rule 59 (expression -> ID .)
    GREATER_THAN    reduce using rule 59 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 59 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 59 (expression -> ID .)
    NOT_EQUAL       reduce using rule 59 (expression -> ID .)
    EQUAL           reduce using rule 59 (expression -> ID .)
    ;               reduce using rule 59 (expression -> ID .)
    ,               reduce using rule 59 (expression -> ID .)
    {               reduce using rule 59 (expression -> ID .)
    ID              reduce using rule 59 (expression -> ID .)
    IF              reduce using rule 59 (expression -> ID .)
    WHILE           reduce using rule 59 (expression -> ID .)
    FOR             reduce using rule 59 (expression -> ID .)
    BREAK           reduce using rule 59 (expression -> ID .)
    CONTINUE        reduce using rule 59 (expression -> ID .)
    RETURN          reduce using rule 59 (expression -> ID .)
    PRINT           reduce using rule 59 (expression -> ID .)
    (               reduce using rule 59 (expression -> ID .)
    EYE             reduce using rule 59 (expression -> ID .)
    ONES            reduce using rule 59 (expression -> ID .)
    ZEROS           reduce using rule 59 (expression -> ID .)
    FLOATNUM        reduce using rule 59 (expression -> ID .)
    INTNUM          reduce using rule 59 (expression -> ID .)
    STRING          reduce using rule 59 (expression -> ID .)
    $end            reduce using rule 59 (expression -> ID .)
    }               reduce using rule 59 (expression -> ID .)
    ELSE            reduce using rule 59 (expression -> ID .)
    :               reduce using rule 59 (expression -> ID .)


state 57

    (31) while_instr -> WHILE ( . comparison ) instruction
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    comparison                     shift and go to state 100
    expression                     shift and go to state 97

state 58

    (32) for_instr -> FOR range . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 101
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    comparison                     shift and go to state 17

state 59

    (33) range -> ID . = expression : expression

    =               shift and go to state 102


state 60

    (34) break_instr -> BREAK ; .

    {               reduce using rule 34 (break_instr -> BREAK ; .)
    ID              reduce using rule 34 (break_instr -> BREAK ; .)
    IF              reduce using rule 34 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 34 (break_instr -> BREAK ; .)
    FOR             reduce using rule 34 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 34 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 34 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 34 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 34 (break_instr -> BREAK ; .)
    (               reduce using rule 34 (break_instr -> BREAK ; .)
    EYE             reduce using rule 34 (break_instr -> BREAK ; .)
    ONES            reduce using rule 34 (break_instr -> BREAK ; .)
    ZEROS           reduce using rule 34 (break_instr -> BREAK ; .)
    FLOATNUM        reduce using rule 34 (break_instr -> BREAK ; .)
    INTNUM          reduce using rule 34 (break_instr -> BREAK ; .)
    STRING          reduce using rule 34 (break_instr -> BREAK ; .)
    $end            reduce using rule 34 (break_instr -> BREAK ; .)
    }               reduce using rule 34 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 34 (break_instr -> BREAK ; .)


state 61

    (35) continue_instr -> CONTINUE ; .

    {               reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 35 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 35 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 35 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 35 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 35 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 35 (continue_instr -> CONTINUE ; .)
    EYE             reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ONES            reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ZEROS           reduce using rule 35 (continue_instr -> CONTINUE ; .)
    FLOATNUM        reduce using rule 35 (continue_instr -> CONTINUE ; .)
    INTNUM          reduce using rule 35 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 35 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 35 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 35 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 35 (continue_instr -> CONTINUE ; .)


state 62

    (36) return_instr -> RETURN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 103
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 63

    (37) return_instr -> RETURN ; .

    {               reduce using rule 37 (return_instr -> RETURN ; .)
    ID              reduce using rule 37 (return_instr -> RETURN ; .)
    IF              reduce using rule 37 (return_instr -> RETURN ; .)
    WHILE           reduce using rule 37 (return_instr -> RETURN ; .)
    FOR             reduce using rule 37 (return_instr -> RETURN ; .)
    BREAK           reduce using rule 37 (return_instr -> RETURN ; .)
    CONTINUE        reduce using rule 37 (return_instr -> RETURN ; .)
    RETURN          reduce using rule 37 (return_instr -> RETURN ; .)
    PRINT           reduce using rule 37 (return_instr -> RETURN ; .)
    (               reduce using rule 37 (return_instr -> RETURN ; .)
    EYE             reduce using rule 37 (return_instr -> RETURN ; .)
    ONES            reduce using rule 37 (return_instr -> RETURN ; .)
    ZEROS           reduce using rule 37 (return_instr -> RETURN ; .)
    FLOATNUM        reduce using rule 37 (return_instr -> RETURN ; .)
    INTNUM          reduce using rule 37 (return_instr -> RETURN ; .)
    STRING          reduce using rule 37 (return_instr -> RETURN ; .)
    $end            reduce using rule 37 (return_instr -> RETURN ; .)
    }               reduce using rule 37 (return_instr -> RETURN ; .)
    ELSE            reduce using rule 37 (return_instr -> RETURN ; .)


state 64

    (38) print_instr -> PRINT printable . ;
    (39) printable -> printable . , expression

    ;               shift and go to state 104
    ,               shift and go to state 105


state 65

    (40) printable -> expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               reduce using rule 40 (printable -> expression .)
    ,               reduce using rule 40 (printable -> expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 66

    (52) expression -> EYE ( . expression )
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 106
    comparison                     shift and go to state 17

state 67

    (53) expression -> ONES ( . expression )
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 107
    comparison                     shift and go to state 17

state 68

    (54) expression -> ZEROS ( . expression )
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 108
    comparison                     shift and go to state 17

state 69

    (42) expression -> expression + expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 42 (expression -> expression + expression .)
    -               reduce using rule 42 (expression -> expression + expression .)
    '               reduce using rule 42 (expression -> expression + expression .)
    LESSER_THAN     reduce using rule 42 (expression -> expression + expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression + expression .)
    LESSER_EQUAL    reduce using rule 42 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 42 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> expression + expression .)
    EQUAL           reduce using rule 42 (expression -> expression + expression .)
    {               reduce using rule 42 (expression -> expression + expression .)
    ID              reduce using rule 42 (expression -> expression + expression .)
    IF              reduce using rule 42 (expression -> expression + expression .)
    WHILE           reduce using rule 42 (expression -> expression + expression .)
    FOR             reduce using rule 42 (expression -> expression + expression .)
    BREAK           reduce using rule 42 (expression -> expression + expression .)
    CONTINUE        reduce using rule 42 (expression -> expression + expression .)
    RETURN          reduce using rule 42 (expression -> expression + expression .)
    PRINT           reduce using rule 42 (expression -> expression + expression .)
    (               reduce using rule 42 (expression -> expression + expression .)
    EYE             reduce using rule 42 (expression -> expression + expression .)
    ONES            reduce using rule 42 (expression -> expression + expression .)
    ZEROS           reduce using rule 42 (expression -> expression + expression .)
    FLOATNUM        reduce using rule 42 (expression -> expression + expression .)
    INTNUM          reduce using rule 42 (expression -> expression + expression .)
    STRING          reduce using rule 42 (expression -> expression + expression .)
    $end            reduce using rule 42 (expression -> expression + expression .)
    }               reduce using rule 42 (expression -> expression + expression .)
    )               reduce using rule 42 (expression -> expression + expression .)
    ;               reduce using rule 42 (expression -> expression + expression .)
    ,               reduce using rule 42 (expression -> expression + expression .)
    ELSE            reduce using rule 42 (expression -> expression + expression .)
    :               reduce using rule 42 (expression -> expression + expression .)
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! *               [ reduce using rule 42 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 42 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 42 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 42 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 42 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 42 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 70

    (43) expression -> expression - expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 43 (expression -> expression - expression .)
    -               reduce using rule 43 (expression -> expression - expression .)
    '               reduce using rule 43 (expression -> expression - expression .)
    LESSER_THAN     reduce using rule 43 (expression -> expression - expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression - expression .)
    LESSER_EQUAL    reduce using rule 43 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> expression - expression .)
    EQUAL           reduce using rule 43 (expression -> expression - expression .)
    {               reduce using rule 43 (expression -> expression - expression .)
    ID              reduce using rule 43 (expression -> expression - expression .)
    IF              reduce using rule 43 (expression -> expression - expression .)
    WHILE           reduce using rule 43 (expression -> expression - expression .)
    FOR             reduce using rule 43 (expression -> expression - expression .)
    BREAK           reduce using rule 43 (expression -> expression - expression .)
    CONTINUE        reduce using rule 43 (expression -> expression - expression .)
    RETURN          reduce using rule 43 (expression -> expression - expression .)
    PRINT           reduce using rule 43 (expression -> expression - expression .)
    (               reduce using rule 43 (expression -> expression - expression .)
    EYE             reduce using rule 43 (expression -> expression - expression .)
    ONES            reduce using rule 43 (expression -> expression - expression .)
    ZEROS           reduce using rule 43 (expression -> expression - expression .)
    FLOATNUM        reduce using rule 43 (expression -> expression - expression .)
    INTNUM          reduce using rule 43 (expression -> expression - expression .)
    STRING          reduce using rule 43 (expression -> expression - expression .)
    $end            reduce using rule 43 (expression -> expression - expression .)
    }               reduce using rule 43 (expression -> expression - expression .)
    )               reduce using rule 43 (expression -> expression - expression .)
    ;               reduce using rule 43 (expression -> expression - expression .)
    ,               reduce using rule 43 (expression -> expression - expression .)
    ELSE            reduce using rule 43 (expression -> expression - expression .)
    :               reduce using rule 43 (expression -> expression - expression .)
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! *               [ reduce using rule 43 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 43 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 43 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 43 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 43 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 43 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 71

    (44) expression -> expression * expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 44 (expression -> expression * expression .)
    -               reduce using rule 44 (expression -> expression * expression .)
    *               reduce using rule 44 (expression -> expression * expression .)
    /               reduce using rule 44 (expression -> expression * expression .)
    '               reduce using rule 44 (expression -> expression * expression .)
    LESSER_THAN     reduce using rule 44 (expression -> expression * expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression * expression .)
    LESSER_EQUAL    reduce using rule 44 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> expression * expression .)
    EQUAL           reduce using rule 44 (expression -> expression * expression .)
    {               reduce using rule 44 (expression -> expression * expression .)
    ID              reduce using rule 44 (expression -> expression * expression .)
    IF              reduce using rule 44 (expression -> expression * expression .)
    WHILE           reduce using rule 44 (expression -> expression * expression .)
    FOR             reduce using rule 44 (expression -> expression * expression .)
    BREAK           reduce using rule 44 (expression -> expression * expression .)
    CONTINUE        reduce using rule 44 (expression -> expression * expression .)
    RETURN          reduce using rule 44 (expression -> expression * expression .)
    PRINT           reduce using rule 44 (expression -> expression * expression .)
    (               reduce using rule 44 (expression -> expression * expression .)
    EYE             reduce using rule 44 (expression -> expression * expression .)
    ONES            reduce using rule 44 (expression -> expression * expression .)
    ZEROS           reduce using rule 44 (expression -> expression * expression .)
    FLOATNUM        reduce using rule 44 (expression -> expression * expression .)
    INTNUM          reduce using rule 44 (expression -> expression * expression .)
    STRING          reduce using rule 44 (expression -> expression * expression .)
    $end            reduce using rule 44 (expression -> expression * expression .)
    }               reduce using rule 44 (expression -> expression * expression .)
    )               reduce using rule 44 (expression -> expression * expression .)
    ;               reduce using rule 44 (expression -> expression * expression .)
    ,               reduce using rule 44 (expression -> expression * expression .)
    ELSE            reduce using rule 44 (expression -> expression * expression .)
    :               reduce using rule 44 (expression -> expression * expression .)
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! DOTADD          [ reduce using rule 44 (expression -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 44 (expression -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 44 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 44 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 72

    (45) expression -> expression / expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 45 (expression -> expression / expression .)
    -               reduce using rule 45 (expression -> expression / expression .)
    *               reduce using rule 45 (expression -> expression / expression .)
    /               reduce using rule 45 (expression -> expression / expression .)
    '               reduce using rule 45 (expression -> expression / expression .)
    LESSER_THAN     reduce using rule 45 (expression -> expression / expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression / expression .)
    LESSER_EQUAL    reduce using rule 45 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 45 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> expression / expression .)
    EQUAL           reduce using rule 45 (expression -> expression / expression .)
    {               reduce using rule 45 (expression -> expression / expression .)
    ID              reduce using rule 45 (expression -> expression / expression .)
    IF              reduce using rule 45 (expression -> expression / expression .)
    WHILE           reduce using rule 45 (expression -> expression / expression .)
    FOR             reduce using rule 45 (expression -> expression / expression .)
    BREAK           reduce using rule 45 (expression -> expression / expression .)
    CONTINUE        reduce using rule 45 (expression -> expression / expression .)
    RETURN          reduce using rule 45 (expression -> expression / expression .)
    PRINT           reduce using rule 45 (expression -> expression / expression .)
    (               reduce using rule 45 (expression -> expression / expression .)
    EYE             reduce using rule 45 (expression -> expression / expression .)
    ONES            reduce using rule 45 (expression -> expression / expression .)
    ZEROS           reduce using rule 45 (expression -> expression / expression .)
    FLOATNUM        reduce using rule 45 (expression -> expression / expression .)
    INTNUM          reduce using rule 45 (expression -> expression / expression .)
    STRING          reduce using rule 45 (expression -> expression / expression .)
    $end            reduce using rule 45 (expression -> expression / expression .)
    }               reduce using rule 45 (expression -> expression / expression .)
    )               reduce using rule 45 (expression -> expression / expression .)
    ;               reduce using rule 45 (expression -> expression / expression .)
    ,               reduce using rule 45 (expression -> expression / expression .)
    ELSE            reduce using rule 45 (expression -> expression / expression .)
    :               reduce using rule 45 (expression -> expression / expression .)
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! DOTADD          [ reduce using rule 45 (expression -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 45 (expression -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 45 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 45 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 73

    (46) expression -> expression DOTADD expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 46 (expression -> expression DOTADD expression .)
    -               reduce using rule 46 (expression -> expression DOTADD expression .)
    *               reduce using rule 46 (expression -> expression DOTADD expression .)
    /               reduce using rule 46 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 46 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 46 (expression -> expression DOTADD expression .)
    '               reduce using rule 46 (expression -> expression DOTADD expression .)
    LESSER_THAN     reduce using rule 46 (expression -> expression DOTADD expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression DOTADD expression .)
    LESSER_EQUAL    reduce using rule 46 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 46 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 46 (expression -> expression DOTADD expression .)
    {               reduce using rule 46 (expression -> expression DOTADD expression .)
    ID              reduce using rule 46 (expression -> expression DOTADD expression .)
    IF              reduce using rule 46 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 46 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 46 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 46 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 46 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 46 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 46 (expression -> expression DOTADD expression .)
    (               reduce using rule 46 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 46 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 46 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 46 (expression -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 46 (expression -> expression DOTADD expression .)
    INTNUM          reduce using rule 46 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 46 (expression -> expression DOTADD expression .)
    $end            reduce using rule 46 (expression -> expression DOTADD expression .)
    }               reduce using rule 46 (expression -> expression DOTADD expression .)
    )               reduce using rule 46 (expression -> expression DOTADD expression .)
    ;               reduce using rule 46 (expression -> expression DOTADD expression .)
    ,               reduce using rule 46 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 46 (expression -> expression DOTADD expression .)
    :               reduce using rule 46 (expression -> expression DOTADD expression .)
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! DOTMUL          [ reduce using rule 46 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 46 (expression -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! DOTADD          [ shift and go to state 35 ]
  ! DOTSUB          [ shift and go to state 36 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 74

    (47) expression -> expression DOTSUB expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 47 (expression -> expression DOTSUB expression .)
    -               reduce using rule 47 (expression -> expression DOTSUB expression .)
    *               reduce using rule 47 (expression -> expression DOTSUB expression .)
    /               reduce using rule 47 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 47 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 47 (expression -> expression DOTSUB expression .)
    '               reduce using rule 47 (expression -> expression DOTSUB expression .)
    LESSER_THAN     reduce using rule 47 (expression -> expression DOTSUB expression .)
    GREATER_THAN    reduce using rule 47 (expression -> expression DOTSUB expression .)
    LESSER_EQUAL    reduce using rule 47 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 47 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 47 (expression -> expression DOTSUB expression .)
    {               reduce using rule 47 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 47 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 47 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 47 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 47 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 47 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 47 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 47 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 47 (expression -> expression DOTSUB expression .)
    (               reduce using rule 47 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 47 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 47 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 47 (expression -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 47 (expression -> expression DOTSUB expression .)
    INTNUM          reduce using rule 47 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 47 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 47 (expression -> expression DOTSUB expression .)
    }               reduce using rule 47 (expression -> expression DOTSUB expression .)
    )               reduce using rule 47 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 47 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 47 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 47 (expression -> expression DOTSUB expression .)
    :               reduce using rule 47 (expression -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! DOTMUL          [ reduce using rule 47 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 47 (expression -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! DOTADD          [ shift and go to state 35 ]
  ! DOTSUB          [ shift and go to state 36 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 75

    (48) expression -> expression DOTMUL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 48 (expression -> expression DOTMUL expression .)
    -               reduce using rule 48 (expression -> expression DOTMUL expression .)
    *               reduce using rule 48 (expression -> expression DOTMUL expression .)
    /               reduce using rule 48 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 48 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 48 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 48 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 48 (expression -> expression DOTMUL expression .)
    '               reduce using rule 48 (expression -> expression DOTMUL expression .)
    LESSER_THAN     reduce using rule 48 (expression -> expression DOTMUL expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression DOTMUL expression .)
    LESSER_EQUAL    reduce using rule 48 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 48 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 48 (expression -> expression DOTMUL expression .)
    {               reduce using rule 48 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 48 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 48 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 48 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 48 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 48 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 48 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 48 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 48 (expression -> expression DOTMUL expression .)
    (               reduce using rule 48 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 48 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 48 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 48 (expression -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 48 (expression -> expression DOTMUL expression .)
    INTNUM          reduce using rule 48 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 48 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 48 (expression -> expression DOTMUL expression .)
    }               reduce using rule 48 (expression -> expression DOTMUL expression .)
    )               reduce using rule 48 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 48 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 48 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 48 (expression -> expression DOTMUL expression .)
    :               reduce using rule 48 (expression -> expression DOTMUL expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! DOTADD          [ shift and go to state 35 ]
  ! DOTSUB          [ shift and go to state 36 ]
  ! DOTMUL          [ shift and go to state 37 ]
  ! DOTDIV          [ shift and go to state 38 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 76

    (49) expression -> expression DOTDIV expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    +               reduce using rule 49 (expression -> expression DOTDIV expression .)
    -               reduce using rule 49 (expression -> expression DOTDIV expression .)
    *               reduce using rule 49 (expression -> expression DOTDIV expression .)
    /               reduce using rule 49 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 49 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 49 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 49 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 49 (expression -> expression DOTDIV expression .)
    '               reduce using rule 49 (expression -> expression DOTDIV expression .)
    LESSER_THAN     reduce using rule 49 (expression -> expression DOTDIV expression .)
    GREATER_THAN    reduce using rule 49 (expression -> expression DOTDIV expression .)
    LESSER_EQUAL    reduce using rule 49 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 49 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 49 (expression -> expression DOTDIV expression .)
    {               reduce using rule 49 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 49 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 49 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 49 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 49 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 49 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 49 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 49 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 49 (expression -> expression DOTDIV expression .)
    (               reduce using rule 49 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 49 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 49 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 49 (expression -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 49 (expression -> expression DOTDIV expression .)
    INTNUM          reduce using rule 49 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 49 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 49 (expression -> expression DOTDIV expression .)
    }               reduce using rule 49 (expression -> expression DOTDIV expression .)
    )               reduce using rule 49 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 49 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 49 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 49 (expression -> expression DOTDIV expression .)
    :               reduce using rule 49 (expression -> expression DOTDIV expression .)

  ! +               [ shift and go to state 31 ]
  ! -               [ shift and go to state 32 ]
  ! *               [ shift and go to state 33 ]
  ! /               [ shift and go to state 34 ]
  ! DOTADD          [ shift and go to state 35 ]
  ! DOTSUB          [ shift and go to state 36 ]
  ! DOTMUL          [ shift and go to state 37 ]
  ! DOTDIV          [ shift and go to state 38 ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 77

    (60) comparison -> expression LESSER_THAN expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    LESSER_THAN     reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    GREATER_THAN    reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    LESSER_EQUAL    reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    GREATER_EQUAL   reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    NOT_EQUAL       reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    EQUAL           reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    {               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ID              reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    IF              reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    WHILE           reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    FOR             reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    BREAK           reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    CONTINUE        reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    RETURN          reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    PRINT           reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    (               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    EYE             reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ONES            reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ZEROS           reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    FLOATNUM        reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    INTNUM          reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    STRING          reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    $end            reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    }               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    )               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ;               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ,               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    ELSE            reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    :               reduce using rule 60 (comparison -> expression LESSER_THAN expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! -               [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! *               [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! /               [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 60 (comparison -> expression LESSER_THAN expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 78

    (61) comparison -> expression GREATER_THAN expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    LESSER_THAN     reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    LESSER_EQUAL    reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    {               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ID              reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    IF              reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    FOR             reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    CONTINUE        reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    (               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    EYE             reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ONES            reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ZEROS           reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    FLOATNUM        reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    INTNUM          reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    STRING          reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    $end            reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    }               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    )               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ;               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ,               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    :               reduce using rule 61 (comparison -> expression GREATER_THAN expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! -               [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! *               [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! /               [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 61 (comparison -> expression GREATER_THAN expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 79

    (62) comparison -> expression LESSER_EQUAL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    LESSER_THAN     reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    GREATER_THAN    reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    EQUAL           reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    {               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ID              reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    IF              reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    WHILE           reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    FOR             reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    BREAK           reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    CONTINUE        reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    RETURN          reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    PRINT           reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    (               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    EYE             reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ONES            reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ZEROS           reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    FLOATNUM        reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    INTNUM          reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    STRING          reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    $end            reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    }               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    )               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ;               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ,               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    ELSE            reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    :               reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! -               [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! *               [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! /               [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 62 (comparison -> expression LESSER_EQUAL expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 80

    (63) comparison -> expression GREATER_EQUAL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    LESSER_THAN     reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    EQUAL           reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    {               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    CONTINUE        reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    (               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    EYE             reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ONES            reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ZEROS           reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    FLOATNUM        reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    INTNUM          reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    }               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    )               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ;               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ,               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    :               reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! -               [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! *               [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! /               [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 63 (comparison -> expression GREATER_EQUAL expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 81

    (64) comparison -> expression NOT_EQUAL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    LESSER_THAN     reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    {               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ID              reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    IF              reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    CONTINUE        reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    (               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    EYE             reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ONES            reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ZEROS           reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    FLOATNUM        reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    INTNUM          reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    $end            reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    }               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    )               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ;               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ,               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    :               reduce using rule 64 (comparison -> expression NOT_EQUAL expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! -               [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! *               [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! /               [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 64 (comparison -> expression NOT_EQUAL expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 82

    (65) comparison -> expression EQUAL expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    '               reduce using rule 65 (comparison -> expression EQUAL expression .)
    LESSER_THAN     reduce using rule 65 (comparison -> expression EQUAL expression .)
    GREATER_THAN    reduce using rule 65 (comparison -> expression EQUAL expression .)
    LESSER_EQUAL    reduce using rule 65 (comparison -> expression EQUAL expression .)
    GREATER_EQUAL   reduce using rule 65 (comparison -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 65 (comparison -> expression EQUAL expression .)
    EQUAL           reduce using rule 65 (comparison -> expression EQUAL expression .)
    {               reduce using rule 65 (comparison -> expression EQUAL expression .)
    ID              reduce using rule 65 (comparison -> expression EQUAL expression .)
    IF              reduce using rule 65 (comparison -> expression EQUAL expression .)
    WHILE           reduce using rule 65 (comparison -> expression EQUAL expression .)
    FOR             reduce using rule 65 (comparison -> expression EQUAL expression .)
    BREAK           reduce using rule 65 (comparison -> expression EQUAL expression .)
    CONTINUE        reduce using rule 65 (comparison -> expression EQUAL expression .)
    RETURN          reduce using rule 65 (comparison -> expression EQUAL expression .)
    PRINT           reduce using rule 65 (comparison -> expression EQUAL expression .)
    (               reduce using rule 65 (comparison -> expression EQUAL expression .)
    EYE             reduce using rule 65 (comparison -> expression EQUAL expression .)
    ONES            reduce using rule 65 (comparison -> expression EQUAL expression .)
    ZEROS           reduce using rule 65 (comparison -> expression EQUAL expression .)
    FLOATNUM        reduce using rule 65 (comparison -> expression EQUAL expression .)
    INTNUM          reduce using rule 65 (comparison -> expression EQUAL expression .)
    STRING          reduce using rule 65 (comparison -> expression EQUAL expression .)
    $end            reduce using rule 65 (comparison -> expression EQUAL expression .)
    }               reduce using rule 65 (comparison -> expression EQUAL expression .)
    )               reduce using rule 65 (comparison -> expression EQUAL expression .)
    ;               reduce using rule 65 (comparison -> expression EQUAL expression .)
    ,               reduce using rule 65 (comparison -> expression EQUAL expression .)
    ELSE            reduce using rule 65 (comparison -> expression EQUAL expression .)
    :               reduce using rule 65 (comparison -> expression EQUAL expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38

  ! +               [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 65 (comparison -> expression EQUAL expression .) ]
  ! '               [ shift and go to state 39 ]
  ! LESSER_THAN     [ shift and go to state 40 ]
  ! GREATER_THAN    [ shift and go to state 41 ]
  ! LESSER_EQUAL    [ shift and go to state 42 ]
  ! GREATER_EQUAL   [ shift and go to state 43 ]
  ! NOT_EQUAL       [ shift and go to state 44 ]
  ! EQUAL           [ shift and go to state 45 ]


state 83

    (13) instruction -> { instructions } .

    {               reduce using rule 13 (instruction -> { instructions } .)
    ID              reduce using rule 13 (instruction -> { instructions } .)
    IF              reduce using rule 13 (instruction -> { instructions } .)
    WHILE           reduce using rule 13 (instruction -> { instructions } .)
    FOR             reduce using rule 13 (instruction -> { instructions } .)
    BREAK           reduce using rule 13 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 13 (instruction -> { instructions } .)
    RETURN          reduce using rule 13 (instruction -> { instructions } .)
    PRINT           reduce using rule 13 (instruction -> { instructions } .)
    (               reduce using rule 13 (instruction -> { instructions } .)
    EYE             reduce using rule 13 (instruction -> { instructions } .)
    ONES            reduce using rule 13 (instruction -> { instructions } .)
    ZEROS           reduce using rule 13 (instruction -> { instructions } .)
    FLOATNUM        reduce using rule 13 (instruction -> { instructions } .)
    INTNUM          reduce using rule 13 (instruction -> { instructions } .)
    STRING          reduce using rule 13 (instruction -> { instructions } .)
    $end            reduce using rule 13 (instruction -> { instructions } .)
    }               reduce using rule 13 (instruction -> { instructions } .)
    ELSE            reduce using rule 13 (instruction -> { instructions } .)


state 84

    (14) assign_instr -> ID = expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 109
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 85

    (15) assign_instr -> ID = - . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 110
    comparison                     shift and go to state 17

state 86

    (21) assign_instr -> ID = arrays . ;
    (23) arrays -> arrays . , arrays

    ;               shift and go to state 111
    ,               shift and go to state 112


state 87

    (22) arrays -> [ . arrays ]
    (24) arrays -> [ . indexes ]
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]
    (25) indexes -> . indexes , index
    (26) indexes -> . index
    (27) index -> . INTNUM
    (28) index -> . ID

    [               shift and go to state 87
    INTNUM          shift and go to state 95
    ID              shift and go to state 92

    arrays                         shift and go to state 113
    indexes                        shift and go to state 114
    index                          shift and go to state 94

state 88

    (16) assign_instr -> ID PLUSASSIGN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 115
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 89

    (17) assign_instr -> ID SUBASSIGN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 116
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 90

    (18) assign_instr -> ID MULASSIGN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 117
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 91

    (19) assign_instr -> ID DIVASSIGN expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 118
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 92

    (28) index -> ID .

    ]               reduce using rule 28 (index -> ID .)
    ,               reduce using rule 28 (index -> ID .)


state 93

    (20) assign_instr -> ID [ indexes . ] = expression ;
    (25) indexes -> indexes . , index

    ]               shift and go to state 119
    ,               shift and go to state 120


state 94

    (26) indexes -> index .

    ]               reduce using rule 26 (indexes -> index .)
    ,               reduce using rule 26 (indexes -> index .)


state 95

    (27) index -> INTNUM .

    ]               reduce using rule 27 (index -> INTNUM .)
    ,               reduce using rule 27 (index -> INTNUM .)


state 96

    (29) if_instr -> IF ( comparison . ) instruction
    (30) if_instr -> IF ( comparison . ) instruction ELSE instruction
    (41) expression -> comparison .

    )               shift and go to state 121
    LESSER_THAN     reduce using rule 41 (expression -> comparison .)
    GREATER_THAN    reduce using rule 41 (expression -> comparison .)
    LESSER_EQUAL    reduce using rule 41 (expression -> comparison .)
    GREATER_EQUAL   reduce using rule 41 (expression -> comparison .)
    NOT_EQUAL       reduce using rule 41 (expression -> comparison .)
    EQUAL           reduce using rule 41 (expression -> comparison .)
    +               reduce using rule 41 (expression -> comparison .)
    -               reduce using rule 41 (expression -> comparison .)
    *               reduce using rule 41 (expression -> comparison .)
    /               reduce using rule 41 (expression -> comparison .)
    DOTADD          reduce using rule 41 (expression -> comparison .)
    DOTSUB          reduce using rule 41 (expression -> comparison .)
    DOTMUL          reduce using rule 41 (expression -> comparison .)
    DOTDIV          reduce using rule 41 (expression -> comparison .)
    '               reduce using rule 41 (expression -> comparison .)


state 97

    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '

    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39


state 98

    (50) expression -> ( expression ) .

    +               reduce using rule 50 (expression -> ( expression ) .)
    -               reduce using rule 50 (expression -> ( expression ) .)
    *               reduce using rule 50 (expression -> ( expression ) .)
    /               reduce using rule 50 (expression -> ( expression ) .)
    DOTADD          reduce using rule 50 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 50 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 50 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 50 (expression -> ( expression ) .)
    '               reduce using rule 50 (expression -> ( expression ) .)
    LESSER_THAN     reduce using rule 50 (expression -> ( expression ) .)
    GREATER_THAN    reduce using rule 50 (expression -> ( expression ) .)
    LESSER_EQUAL    reduce using rule 50 (expression -> ( expression ) .)
    GREATER_EQUAL   reduce using rule 50 (expression -> ( expression ) .)
    NOT_EQUAL       reduce using rule 50 (expression -> ( expression ) .)
    EQUAL           reduce using rule 50 (expression -> ( expression ) .)
    {               reduce using rule 50 (expression -> ( expression ) .)
    ID              reduce using rule 50 (expression -> ( expression ) .)
    IF              reduce using rule 50 (expression -> ( expression ) .)
    WHILE           reduce using rule 50 (expression -> ( expression ) .)
    FOR             reduce using rule 50 (expression -> ( expression ) .)
    BREAK           reduce using rule 50 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 50 (expression -> ( expression ) .)
    RETURN          reduce using rule 50 (expression -> ( expression ) .)
    PRINT           reduce using rule 50 (expression -> ( expression ) .)
    (               reduce using rule 50 (expression -> ( expression ) .)
    EYE             reduce using rule 50 (expression -> ( expression ) .)
    ONES            reduce using rule 50 (expression -> ( expression ) .)
    ZEROS           reduce using rule 50 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 50 (expression -> ( expression ) .)
    INTNUM          reduce using rule 50 (expression -> ( expression ) .)
    STRING          reduce using rule 50 (expression -> ( expression ) .)
    $end            reduce using rule 50 (expression -> ( expression ) .)
    }               reduce using rule 50 (expression -> ( expression ) .)
    )               reduce using rule 50 (expression -> ( expression ) .)
    ;               reduce using rule 50 (expression -> ( expression ) .)
    ,               reduce using rule 50 (expression -> ( expression ) .)
    ELSE            reduce using rule 50 (expression -> ( expression ) .)
    :               reduce using rule 50 (expression -> ( expression ) .)


state 99

    (51) expression -> ( - expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    )               shift and go to state 122
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 100

    (31) while_instr -> WHILE ( comparison . ) instruction
    (41) expression -> comparison .

    )               shift and go to state 123
    LESSER_THAN     reduce using rule 41 (expression -> comparison .)
    GREATER_THAN    reduce using rule 41 (expression -> comparison .)
    LESSER_EQUAL    reduce using rule 41 (expression -> comparison .)
    GREATER_EQUAL   reduce using rule 41 (expression -> comparison .)
    NOT_EQUAL       reduce using rule 41 (expression -> comparison .)
    EQUAL           reduce using rule 41 (expression -> comparison .)
    +               reduce using rule 41 (expression -> comparison .)
    -               reduce using rule 41 (expression -> comparison .)
    *               reduce using rule 41 (expression -> comparison .)
    /               reduce using rule 41 (expression -> comparison .)
    DOTADD          reduce using rule 41 (expression -> comparison .)
    DOTSUB          reduce using rule 41 (expression -> comparison .)
    DOTMUL          reduce using rule 41 (expression -> comparison .)
    DOTDIV          reduce using rule 41 (expression -> comparison .)
    '               reduce using rule 41 (expression -> comparison .)


state 101

    (32) for_instr -> FOR range instruction .

    {               reduce using rule 32 (for_instr -> FOR range instruction .)
    ID              reduce using rule 32 (for_instr -> FOR range instruction .)
    IF              reduce using rule 32 (for_instr -> FOR range instruction .)
    WHILE           reduce using rule 32 (for_instr -> FOR range instruction .)
    FOR             reduce using rule 32 (for_instr -> FOR range instruction .)
    BREAK           reduce using rule 32 (for_instr -> FOR range instruction .)
    CONTINUE        reduce using rule 32 (for_instr -> FOR range instruction .)
    RETURN          reduce using rule 32 (for_instr -> FOR range instruction .)
    PRINT           reduce using rule 32 (for_instr -> FOR range instruction .)
    (               reduce using rule 32 (for_instr -> FOR range instruction .)
    EYE             reduce using rule 32 (for_instr -> FOR range instruction .)
    ONES            reduce using rule 32 (for_instr -> FOR range instruction .)
    ZEROS           reduce using rule 32 (for_instr -> FOR range instruction .)
    FLOATNUM        reduce using rule 32 (for_instr -> FOR range instruction .)
    INTNUM          reduce using rule 32 (for_instr -> FOR range instruction .)
    STRING          reduce using rule 32 (for_instr -> FOR range instruction .)
    $end            reduce using rule 32 (for_instr -> FOR range instruction .)
    }               reduce using rule 32 (for_instr -> FOR range instruction .)
    ELSE            reduce using rule 32 (for_instr -> FOR range instruction .)


state 102

    (33) range -> ID = . expression : expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 124
    comparison                     shift and go to state 17

state 103

    (36) return_instr -> RETURN expression ; .

    {               reduce using rule 36 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 36 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 36 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 36 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 36 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 36 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 36 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 36 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 36 (return_instr -> RETURN expression ; .)
    (               reduce using rule 36 (return_instr -> RETURN expression ; .)
    EYE             reduce using rule 36 (return_instr -> RETURN expression ; .)
    ONES            reduce using rule 36 (return_instr -> RETURN expression ; .)
    ZEROS           reduce using rule 36 (return_instr -> RETURN expression ; .)
    FLOATNUM        reduce using rule 36 (return_instr -> RETURN expression ; .)
    INTNUM          reduce using rule 36 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 36 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 36 (return_instr -> RETURN expression ; .)
    }               reduce using rule 36 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 36 (return_instr -> RETURN expression ; .)


state 104

    (38) print_instr -> PRINT printable ; .

    {               reduce using rule 38 (print_instr -> PRINT printable ; .)
    ID              reduce using rule 38 (print_instr -> PRINT printable ; .)
    IF              reduce using rule 38 (print_instr -> PRINT printable ; .)
    WHILE           reduce using rule 38 (print_instr -> PRINT printable ; .)
    FOR             reduce using rule 38 (print_instr -> PRINT printable ; .)
    BREAK           reduce using rule 38 (print_instr -> PRINT printable ; .)
    CONTINUE        reduce using rule 38 (print_instr -> PRINT printable ; .)
    RETURN          reduce using rule 38 (print_instr -> PRINT printable ; .)
    PRINT           reduce using rule 38 (print_instr -> PRINT printable ; .)
    (               reduce using rule 38 (print_instr -> PRINT printable ; .)
    EYE             reduce using rule 38 (print_instr -> PRINT printable ; .)
    ONES            reduce using rule 38 (print_instr -> PRINT printable ; .)
    ZEROS           reduce using rule 38 (print_instr -> PRINT printable ; .)
    FLOATNUM        reduce using rule 38 (print_instr -> PRINT printable ; .)
    INTNUM          reduce using rule 38 (print_instr -> PRINT printable ; .)
    STRING          reduce using rule 38 (print_instr -> PRINT printable ; .)
    $end            reduce using rule 38 (print_instr -> PRINT printable ; .)
    }               reduce using rule 38 (print_instr -> PRINT printable ; .)
    ELSE            reduce using rule 38 (print_instr -> PRINT printable ; .)


state 105

    (39) printable -> printable , . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 125
    comparison                     shift and go to state 17

state 106

    (52) expression -> EYE ( expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    )               shift and go to state 126
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 107

    (53) expression -> ONES ( expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    )               shift and go to state 127
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 108

    (54) expression -> ZEROS ( expression . )
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    )               shift and go to state 128
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 109

    (14) assign_instr -> ID = expression ; .

    {               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ID              reduce using rule 14 (assign_instr -> ID = expression ; .)
    IF              reduce using rule 14 (assign_instr -> ID = expression ; .)
    WHILE           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FOR             reduce using rule 14 (assign_instr -> ID = expression ; .)
    BREAK           reduce using rule 14 (assign_instr -> ID = expression ; .)
    CONTINUE        reduce using rule 14 (assign_instr -> ID = expression ; .)
    RETURN          reduce using rule 14 (assign_instr -> ID = expression ; .)
    PRINT           reduce using rule 14 (assign_instr -> ID = expression ; .)
    (               reduce using rule 14 (assign_instr -> ID = expression ; .)
    EYE             reduce using rule 14 (assign_instr -> ID = expression ; .)
    ONES            reduce using rule 14 (assign_instr -> ID = expression ; .)
    ZEROS           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FLOATNUM        reduce using rule 14 (assign_instr -> ID = expression ; .)
    INTNUM          reduce using rule 14 (assign_instr -> ID = expression ; .)
    STRING          reduce using rule 14 (assign_instr -> ID = expression ; .)
    $end            reduce using rule 14 (assign_instr -> ID = expression ; .)
    }               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ELSE            reduce using rule 14 (assign_instr -> ID = expression ; .)


state 110

    (15) assign_instr -> ID = - expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 129
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 111

    (21) assign_instr -> ID = arrays ; .

    {               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ID              reduce using rule 21 (assign_instr -> ID = arrays ; .)
    IF              reduce using rule 21 (assign_instr -> ID = arrays ; .)
    WHILE           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    FOR             reduce using rule 21 (assign_instr -> ID = arrays ; .)
    BREAK           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    CONTINUE        reduce using rule 21 (assign_instr -> ID = arrays ; .)
    RETURN          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    PRINT           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    (               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    EYE             reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ONES            reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ZEROS           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    FLOATNUM        reduce using rule 21 (assign_instr -> ID = arrays ; .)
    INTNUM          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    STRING          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    $end            reduce using rule 21 (assign_instr -> ID = arrays ; .)
    }               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ELSE            reduce using rule 21 (assign_instr -> ID = arrays ; .)


state 112

    (23) arrays -> arrays , . arrays
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]

    [               shift and go to state 87

    arrays                         shift and go to state 130

state 113

    (22) arrays -> [ arrays . ]
    (23) arrays -> arrays . , arrays

    ]               shift and go to state 131
    ,               shift and go to state 112


state 114

    (24) arrays -> [ indexes . ]
    (25) indexes -> indexes . , index

    ]               shift and go to state 132
    ,               shift and go to state 120


state 115

    (16) assign_instr -> ID PLUSASSIGN expression ; .

    {               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ID              reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    IF              reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    WHILE           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    FOR             reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    BREAK           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    RETURN          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    PRINT           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    (               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    EYE             reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ONES            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    STRING          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    $end            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    }               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ELSE            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)


state 116

    (17) assign_instr -> ID SUBASSIGN expression ; .

    {               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ID              reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    IF              reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    WHILE           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    FOR             reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    BREAK           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    RETURN          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    PRINT           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    (               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    EYE             reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ONES            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ZEROS           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    INTNUM          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    STRING          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    $end            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    }               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ELSE            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)


state 117

    (18) assign_instr -> ID MULASSIGN expression ; .

    {               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ID              reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    IF              reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    WHILE           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    FOR             reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    BREAK           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    RETURN          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    PRINT           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    (               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    EYE             reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ONES            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ZEROS           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    INTNUM          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    STRING          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    $end            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    }               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ELSE            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)


state 118

    (19) assign_instr -> ID DIVASSIGN expression ; .

    {               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ID              reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    IF              reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    WHILE           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    FOR             reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    BREAK           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    RETURN          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    PRINT           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    (               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    EYE             reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ONES            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ZEROS           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    INTNUM          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    STRING          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    $end            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    }               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ELSE            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)


state 119

    (20) assign_instr -> ID [ indexes ] . = expression ;

    =               shift and go to state 133


state 120

    (25) indexes -> indexes , . index
    (27) index -> . INTNUM
    (28) index -> . ID

    INTNUM          shift and go to state 95
    ID              shift and go to state 92

    index                          shift and go to state 134

state 121

    (29) if_instr -> IF ( comparison ) . instruction
    (30) if_instr -> IF ( comparison ) . instruction ELSE instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    comparison                     shift and go to state 17
    instruction                    shift and go to state 135
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 122

    (51) expression -> ( - expression ) .

    +               reduce using rule 51 (expression -> ( - expression ) .)
    -               reduce using rule 51 (expression -> ( - expression ) .)
    *               reduce using rule 51 (expression -> ( - expression ) .)
    /               reduce using rule 51 (expression -> ( - expression ) .)
    DOTADD          reduce using rule 51 (expression -> ( - expression ) .)
    DOTSUB          reduce using rule 51 (expression -> ( - expression ) .)
    DOTMUL          reduce using rule 51 (expression -> ( - expression ) .)
    DOTDIV          reduce using rule 51 (expression -> ( - expression ) .)
    '               reduce using rule 51 (expression -> ( - expression ) .)
    LESSER_THAN     reduce using rule 51 (expression -> ( - expression ) .)
    GREATER_THAN    reduce using rule 51 (expression -> ( - expression ) .)
    LESSER_EQUAL    reduce using rule 51 (expression -> ( - expression ) .)
    GREATER_EQUAL   reduce using rule 51 (expression -> ( - expression ) .)
    NOT_EQUAL       reduce using rule 51 (expression -> ( - expression ) .)
    EQUAL           reduce using rule 51 (expression -> ( - expression ) .)
    {               reduce using rule 51 (expression -> ( - expression ) .)
    ID              reduce using rule 51 (expression -> ( - expression ) .)
    IF              reduce using rule 51 (expression -> ( - expression ) .)
    WHILE           reduce using rule 51 (expression -> ( - expression ) .)
    FOR             reduce using rule 51 (expression -> ( - expression ) .)
    BREAK           reduce using rule 51 (expression -> ( - expression ) .)
    CONTINUE        reduce using rule 51 (expression -> ( - expression ) .)
    RETURN          reduce using rule 51 (expression -> ( - expression ) .)
    PRINT           reduce using rule 51 (expression -> ( - expression ) .)
    (               reduce using rule 51 (expression -> ( - expression ) .)
    EYE             reduce using rule 51 (expression -> ( - expression ) .)
    ONES            reduce using rule 51 (expression -> ( - expression ) .)
    ZEROS           reduce using rule 51 (expression -> ( - expression ) .)
    FLOATNUM        reduce using rule 51 (expression -> ( - expression ) .)
    INTNUM          reduce using rule 51 (expression -> ( - expression ) .)
    STRING          reduce using rule 51 (expression -> ( - expression ) .)
    $end            reduce using rule 51 (expression -> ( - expression ) .)
    }               reduce using rule 51 (expression -> ( - expression ) .)
    )               reduce using rule 51 (expression -> ( - expression ) .)
    ;               reduce using rule 51 (expression -> ( - expression ) .)
    ,               reduce using rule 51 (expression -> ( - expression ) .)
    ELSE            reduce using rule 51 (expression -> ( - expression ) .)
    :               reduce using rule 51 (expression -> ( - expression ) .)


state 123

    (31) while_instr -> WHILE ( comparison ) . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    comparison                     shift and go to state 17
    instruction                    shift and go to state 136
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 124

    (33) range -> ID = expression . : expression
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    :               shift and go to state 137
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 125

    (39) printable -> printable , expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               reduce using rule 39 (printable -> printable , expression .)
    ,               reduce using rule 39 (printable -> printable , expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 126

    (52) expression -> EYE ( expression ) .

    +               reduce using rule 52 (expression -> EYE ( expression ) .)
    -               reduce using rule 52 (expression -> EYE ( expression ) .)
    *               reduce using rule 52 (expression -> EYE ( expression ) .)
    /               reduce using rule 52 (expression -> EYE ( expression ) .)
    DOTADD          reduce using rule 52 (expression -> EYE ( expression ) .)
    DOTSUB          reduce using rule 52 (expression -> EYE ( expression ) .)
    DOTMUL          reduce using rule 52 (expression -> EYE ( expression ) .)
    DOTDIV          reduce using rule 52 (expression -> EYE ( expression ) .)
    '               reduce using rule 52 (expression -> EYE ( expression ) .)
    LESSER_THAN     reduce using rule 52 (expression -> EYE ( expression ) .)
    GREATER_THAN    reduce using rule 52 (expression -> EYE ( expression ) .)
    LESSER_EQUAL    reduce using rule 52 (expression -> EYE ( expression ) .)
    GREATER_EQUAL   reduce using rule 52 (expression -> EYE ( expression ) .)
    NOT_EQUAL       reduce using rule 52 (expression -> EYE ( expression ) .)
    EQUAL           reduce using rule 52 (expression -> EYE ( expression ) .)
    {               reduce using rule 52 (expression -> EYE ( expression ) .)
    ID              reduce using rule 52 (expression -> EYE ( expression ) .)
    IF              reduce using rule 52 (expression -> EYE ( expression ) .)
    WHILE           reduce using rule 52 (expression -> EYE ( expression ) .)
    FOR             reduce using rule 52 (expression -> EYE ( expression ) .)
    BREAK           reduce using rule 52 (expression -> EYE ( expression ) .)
    CONTINUE        reduce using rule 52 (expression -> EYE ( expression ) .)
    RETURN          reduce using rule 52 (expression -> EYE ( expression ) .)
    PRINT           reduce using rule 52 (expression -> EYE ( expression ) .)
    (               reduce using rule 52 (expression -> EYE ( expression ) .)
    EYE             reduce using rule 52 (expression -> EYE ( expression ) .)
    ONES            reduce using rule 52 (expression -> EYE ( expression ) .)
    ZEROS           reduce using rule 52 (expression -> EYE ( expression ) .)
    FLOATNUM        reduce using rule 52 (expression -> EYE ( expression ) .)
    INTNUM          reduce using rule 52 (expression -> EYE ( expression ) .)
    STRING          reduce using rule 52 (expression -> EYE ( expression ) .)
    $end            reduce using rule 52 (expression -> EYE ( expression ) .)
    }               reduce using rule 52 (expression -> EYE ( expression ) .)
    )               reduce using rule 52 (expression -> EYE ( expression ) .)
    ;               reduce using rule 52 (expression -> EYE ( expression ) .)
    ,               reduce using rule 52 (expression -> EYE ( expression ) .)
    ELSE            reduce using rule 52 (expression -> EYE ( expression ) .)
    :               reduce using rule 52 (expression -> EYE ( expression ) .)


state 127

    (53) expression -> ONES ( expression ) .

    +               reduce using rule 53 (expression -> ONES ( expression ) .)
    -               reduce using rule 53 (expression -> ONES ( expression ) .)
    *               reduce using rule 53 (expression -> ONES ( expression ) .)
    /               reduce using rule 53 (expression -> ONES ( expression ) .)
    DOTADD          reduce using rule 53 (expression -> ONES ( expression ) .)
    DOTSUB          reduce using rule 53 (expression -> ONES ( expression ) .)
    DOTMUL          reduce using rule 53 (expression -> ONES ( expression ) .)
    DOTDIV          reduce using rule 53 (expression -> ONES ( expression ) .)
    '               reduce using rule 53 (expression -> ONES ( expression ) .)
    LESSER_THAN     reduce using rule 53 (expression -> ONES ( expression ) .)
    GREATER_THAN    reduce using rule 53 (expression -> ONES ( expression ) .)
    LESSER_EQUAL    reduce using rule 53 (expression -> ONES ( expression ) .)
    GREATER_EQUAL   reduce using rule 53 (expression -> ONES ( expression ) .)
    NOT_EQUAL       reduce using rule 53 (expression -> ONES ( expression ) .)
    EQUAL           reduce using rule 53 (expression -> ONES ( expression ) .)
    {               reduce using rule 53 (expression -> ONES ( expression ) .)
    ID              reduce using rule 53 (expression -> ONES ( expression ) .)
    IF              reduce using rule 53 (expression -> ONES ( expression ) .)
    WHILE           reduce using rule 53 (expression -> ONES ( expression ) .)
    FOR             reduce using rule 53 (expression -> ONES ( expression ) .)
    BREAK           reduce using rule 53 (expression -> ONES ( expression ) .)
    CONTINUE        reduce using rule 53 (expression -> ONES ( expression ) .)
    RETURN          reduce using rule 53 (expression -> ONES ( expression ) .)
    PRINT           reduce using rule 53 (expression -> ONES ( expression ) .)
    (               reduce using rule 53 (expression -> ONES ( expression ) .)
    EYE             reduce using rule 53 (expression -> ONES ( expression ) .)
    ONES            reduce using rule 53 (expression -> ONES ( expression ) .)
    ZEROS           reduce using rule 53 (expression -> ONES ( expression ) .)
    FLOATNUM        reduce using rule 53 (expression -> ONES ( expression ) .)
    INTNUM          reduce using rule 53 (expression -> ONES ( expression ) .)
    STRING          reduce using rule 53 (expression -> ONES ( expression ) .)
    $end            reduce using rule 53 (expression -> ONES ( expression ) .)
    }               reduce using rule 53 (expression -> ONES ( expression ) .)
    )               reduce using rule 53 (expression -> ONES ( expression ) .)
    ;               reduce using rule 53 (expression -> ONES ( expression ) .)
    ,               reduce using rule 53 (expression -> ONES ( expression ) .)
    ELSE            reduce using rule 53 (expression -> ONES ( expression ) .)
    :               reduce using rule 53 (expression -> ONES ( expression ) .)


state 128

    (54) expression -> ZEROS ( expression ) .

    +               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    -               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    *               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    /               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    DOTADD          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    DOTSUB          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    DOTMUL          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    DOTDIV          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    '               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    LESSER_THAN     reduce using rule 54 (expression -> ZEROS ( expression ) .)
    GREATER_THAN    reduce using rule 54 (expression -> ZEROS ( expression ) .)
    LESSER_EQUAL    reduce using rule 54 (expression -> ZEROS ( expression ) .)
    GREATER_EQUAL   reduce using rule 54 (expression -> ZEROS ( expression ) .)
    NOT_EQUAL       reduce using rule 54 (expression -> ZEROS ( expression ) .)
    EQUAL           reduce using rule 54 (expression -> ZEROS ( expression ) .)
    {               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ID              reduce using rule 54 (expression -> ZEROS ( expression ) .)
    IF              reduce using rule 54 (expression -> ZEROS ( expression ) .)
    WHILE           reduce using rule 54 (expression -> ZEROS ( expression ) .)
    FOR             reduce using rule 54 (expression -> ZEROS ( expression ) .)
    BREAK           reduce using rule 54 (expression -> ZEROS ( expression ) .)
    CONTINUE        reduce using rule 54 (expression -> ZEROS ( expression ) .)
    RETURN          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    PRINT           reduce using rule 54 (expression -> ZEROS ( expression ) .)
    (               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    EYE             reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ONES            reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ZEROS           reduce using rule 54 (expression -> ZEROS ( expression ) .)
    FLOATNUM        reduce using rule 54 (expression -> ZEROS ( expression ) .)
    INTNUM          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    STRING          reduce using rule 54 (expression -> ZEROS ( expression ) .)
    $end            reduce using rule 54 (expression -> ZEROS ( expression ) .)
    }               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    )               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ;               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ,               reduce using rule 54 (expression -> ZEROS ( expression ) .)
    ELSE            reduce using rule 54 (expression -> ZEROS ( expression ) .)
    :               reduce using rule 54 (expression -> ZEROS ( expression ) .)


state 129

    (15) assign_instr -> ID = - expression ; .

    {               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ID              reduce using rule 15 (assign_instr -> ID = - expression ; .)
    IF              reduce using rule 15 (assign_instr -> ID = - expression ; .)
    WHILE           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    FOR             reduce using rule 15 (assign_instr -> ID = - expression ; .)
    BREAK           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    CONTINUE        reduce using rule 15 (assign_instr -> ID = - expression ; .)
    RETURN          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    PRINT           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    (               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    EYE             reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ONES            reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ZEROS           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    FLOATNUM        reduce using rule 15 (assign_instr -> ID = - expression ; .)
    INTNUM          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    STRING          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    $end            reduce using rule 15 (assign_instr -> ID = - expression ; .)
    }               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ELSE            reduce using rule 15 (assign_instr -> ID = - expression ; .)


state 130

    (23) arrays -> arrays , arrays .
    (23) arrays -> arrays . , arrays

    ;               reduce using rule 23 (arrays -> arrays , arrays .)
    ,               reduce using rule 23 (arrays -> arrays , arrays .)
    ]               reduce using rule 23 (arrays -> arrays , arrays .)

  ! ,               [ shift and go to state 112 ]


state 131

    (22) arrays -> [ arrays ] .

    ;               reduce using rule 22 (arrays -> [ arrays ] .)
    ,               reduce using rule 22 (arrays -> [ arrays ] .)
    ]               reduce using rule 22 (arrays -> [ arrays ] .)


state 132

    (24) arrays -> [ indexes ] .

    ;               reduce using rule 24 (arrays -> [ indexes ] .)
    ,               reduce using rule 24 (arrays -> [ indexes ] .)
    ]               reduce using rule 24 (arrays -> [ indexes ] .)


state 133

    (20) assign_instr -> ID [ indexes ] = . expression ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 138
    comparison                     shift and go to state 17

state 134

    (25) indexes -> indexes , index .

    ]               reduce using rule 25 (indexes -> indexes , index .)
    ,               reduce using rule 25 (indexes -> indexes , index .)


state 135

    (29) if_instr -> IF ( comparison ) instruction .
    (30) if_instr -> IF ( comparison ) instruction . ELSE instruction

    {               reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    ID              reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    IF              reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    WHILE           reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    FOR             reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    BREAK           reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    CONTINUE        reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    RETURN          reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    PRINT           reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    (               reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    EYE             reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    ONES            reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    ZEROS           reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    FLOATNUM        reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    INTNUM          reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    STRING          reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    $end            reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    }               reduce using rule 29 (if_instr -> IF ( comparison ) instruction .)
    ELSE            shift and go to state 139

  ! ELSE            [ reduce using rule 29 (if_instr -> IF ( comparison ) instruction .) ]


state 136

    (31) while_instr -> WHILE ( comparison ) instruction .

    {               reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    ID              reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    IF              reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    WHILE           reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    FOR             reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    BREAK           reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    CONTINUE        reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    RETURN          reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    PRINT           reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    (               reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    EYE             reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    ONES            reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    ZEROS           reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    FLOATNUM        reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    INTNUM          reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    STRING          reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    $end            reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    }               reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)
    ELSE            reduce using rule 31 (while_instr -> WHILE ( comparison ) instruction .)


state 137

    (33) range -> ID = expression : . expression
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 56

    expression                     shift and go to state 140
    comparison                     shift and go to state 17

state 138

    (20) assign_instr -> ID [ indexes ] = expression . ;
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    ;               shift and go to state 141
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 139

    (30) if_instr -> IF ( comparison ) instruction ELSE . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( comparison ) instruction
    (30) if_instr -> . IF ( comparison ) instruction ELSE instruction
    (31) while_instr -> . WHILE ( comparison ) instruction
    (32) for_instr -> . FOR range instruction
    (34) break_instr -> . BREAK ;
    (35) continue_instr -> . CONTINUE ;
    (36) return_instr -> . RETURN expression ;
    (37) return_instr -> . RETURN ;
    (38) print_instr -> . PRINT printable ;
    (41) expression -> . comparison
    (42) expression -> . expression + expression
    (43) expression -> . expression - expression
    (44) expression -> . expression * expression
    (45) expression -> . expression / expression
    (46) expression -> . expression DOTADD expression
    (47) expression -> . expression DOTSUB expression
    (48) expression -> . expression DOTMUL expression
    (49) expression -> . expression DOTDIV expression
    (50) expression -> . ( expression )
    (51) expression -> . ( - expression )
    (52) expression -> . EYE ( expression )
    (53) expression -> . ONES ( expression )
    (54) expression -> . ZEROS ( expression )
    (55) expression -> . expression '
    (56) expression -> . FLOATNUM
    (57) expression -> . INTNUM
    (58) expression -> . STRING
    (59) expression -> . ID
    (60) comparison -> . expression LESSER_THAN expression
    (61) comparison -> . expression GREATER_THAN expression
    (62) comparison -> . expression LESSER_EQUAL expression
    (63) comparison -> . expression GREATER_EQUAL expression
    (64) comparison -> . expression NOT_EQUAL expression
    (65) comparison -> . expression EQUAL expression

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 15
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    (               shift and go to state 16
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    FLOATNUM        shift and go to state 27
    INTNUM          shift and go to state 28
    STRING          shift and go to state 29

    comparison                     shift and go to state 17
    instruction                    shift and go to state 142
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 140

    (33) range -> ID = expression : expression .
    (42) expression -> expression . + expression
    (43) expression -> expression . - expression
    (44) expression -> expression . * expression
    (45) expression -> expression . / expression
    (46) expression -> expression . DOTADD expression
    (47) expression -> expression . DOTSUB expression
    (48) expression -> expression . DOTMUL expression
    (49) expression -> expression . DOTDIV expression
    (55) expression -> expression . '
    (60) comparison -> expression . LESSER_THAN expression
    (61) comparison -> expression . GREATER_THAN expression
    (62) comparison -> expression . LESSER_EQUAL expression
    (63) comparison -> expression . GREATER_EQUAL expression
    (64) comparison -> expression . NOT_EQUAL expression
    (65) comparison -> expression . EQUAL expression

    {               reduce using rule 33 (range -> ID = expression : expression .)
    ID              reduce using rule 33 (range -> ID = expression : expression .)
    IF              reduce using rule 33 (range -> ID = expression : expression .)
    WHILE           reduce using rule 33 (range -> ID = expression : expression .)
    FOR             reduce using rule 33 (range -> ID = expression : expression .)
    BREAK           reduce using rule 33 (range -> ID = expression : expression .)
    CONTINUE        reduce using rule 33 (range -> ID = expression : expression .)
    RETURN          reduce using rule 33 (range -> ID = expression : expression .)
    PRINT           reduce using rule 33 (range -> ID = expression : expression .)
    (               reduce using rule 33 (range -> ID = expression : expression .)
    EYE             reduce using rule 33 (range -> ID = expression : expression .)
    ONES            reduce using rule 33 (range -> ID = expression : expression .)
    ZEROS           reduce using rule 33 (range -> ID = expression : expression .)
    FLOATNUM        reduce using rule 33 (range -> ID = expression : expression .)
    INTNUM          reduce using rule 33 (range -> ID = expression : expression .)
    STRING          reduce using rule 33 (range -> ID = expression : expression .)
    +               shift and go to state 31
    -               shift and go to state 32
    *               shift and go to state 33
    /               shift and go to state 34
    DOTADD          shift and go to state 35
    DOTSUB          shift and go to state 36
    DOTMUL          shift and go to state 37
    DOTDIV          shift and go to state 38
    '               shift and go to state 39
    LESSER_THAN     shift and go to state 40
    GREATER_THAN    shift and go to state 41
    LESSER_EQUAL    shift and go to state 42
    GREATER_EQUAL   shift and go to state 43
    NOT_EQUAL       shift and go to state 44
    EQUAL           shift and go to state 45


state 141

    (20) assign_instr -> ID [ indexes ] = expression ; .

    {               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ID              reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    IF              reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    WHILE           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    FOR             reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    BREAK           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    CONTINUE        reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    RETURN          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    PRINT           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    (               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    EYE             reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ONES            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ZEROS           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    FLOATNUM        reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    INTNUM          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    STRING          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    $end            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    }               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ELSE            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)


state 142

    (30) if_instr -> IF ( comparison ) instruction ELSE instruction .

    {               reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    ID              reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    IF              reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    WHILE           reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    FOR             reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    BREAK           reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    RETURN          reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    PRINT           reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    (               reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    EYE             reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    ONES            reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    ZEROS           reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    INTNUM          reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    STRING          reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    $end            reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    }               reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)
    ELSE            reduce using rule 30 (if_instr -> IF ( comparison ) instruction ELSE instruction .)

