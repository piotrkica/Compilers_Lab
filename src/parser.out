Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> assign_instr
Rule 5     instruction -> if_instr
Rule 6     instruction -> while_instr
Rule 7     instruction -> for_instr
Rule 8     instruction -> break_instr
Rule 9     instruction -> continue_instr
Rule 10    instruction -> return_instr
Rule 11    instruction -> print_instr
Rule 12    instruction -> expression
Rule 13    instruction -> { instructions }
Rule 14    assign_instr -> ID = expression ;
Rule 15    assign_instr -> ID PLUSASSIGN expression ;
Rule 16    assign_instr -> ID SUBASSIGN expression ;
Rule 17    assign_instr -> ID MULASSIGN expression ;
Rule 18    assign_instr -> ID DIVASSIGN expression ;
Rule 19    assign_instr -> ID = array ;
Rule 20    assign_instr -> ID = array_reference ;
Rule 21    assign_instr -> ID PLUSASSIGN array_reference ;
Rule 22    assign_instr -> ID SUBASSIGN array_reference ;
Rule 23    assign_instr -> ID MULASSIGN array_reference ;
Rule 24    assign_instr -> ID DIVASSIGN array_reference ;
Rule 25    assign_instr -> array_reference = expression ;
Rule 26    assign_instr -> array_reference PLUSASSIGN expression ;
Rule 27    assign_instr -> array_reference SUBASSIGN expression ;
Rule 28    assign_instr -> array_reference MULASSIGN expression ;
Rule 29    assign_instr -> array_reference DIVASSIGN expression ;
Rule 30    array_reference -> ID [ indexes ]
Rule 31    assign_instr -> ID = ( - expression ) ;
Rule 32    array -> [ subarrays ]
Rule 33    array -> [ indexes ]
Rule 34    subarrays -> subarrays , array
Rule 35    subarrays -> array
Rule 36    indexes -> indexes , index
Rule 37    indexes -> index
Rule 38    index -> INTNUM
Rule 39    index -> ID
Rule 40    index -> expression : expression
Rule 41    if_instr -> IF ( expression ) instruction
Rule 42    if_instr -> IF ( expression ) instruction ELSE instruction
Rule 43    while_instr -> WHILE ( expression ) instruction
Rule 44    for_instr -> FOR range instruction
Rule 45    range -> ID = expression : expression
Rule 46    break_instr -> BREAK ;
Rule 47    continue_instr -> CONTINUE ;
Rule 48    return_instr -> RETURN ;
Rule 49    return_instr -> RETURN expression ;
Rule 50    print_instr -> PRINT printable ;
Rule 51    printable -> printable , expression
Rule 52    printable -> expression
Rule 53    printable -> array_reference
Rule 54    expression -> expression LESSER_THAN expression
Rule 55    expression -> expression GREATER_THAN expression
Rule 56    expression -> expression LESSER_EQUAL expression
Rule 57    expression -> expression GREATER_EQUAL expression
Rule 58    expression -> expression NOT_EQUAL expression
Rule 59    expression -> expression EQUAL expression
Rule 60    expression -> expression + expression
Rule 61    expression -> expression - expression
Rule 62    expression -> expression * expression
Rule 63    expression -> expression / expression
Rule 64    expression -> expression DOTADD expression
Rule 65    expression -> expression DOTSUB expression
Rule 66    expression -> expression DOTMUL expression
Rule 67    expression -> expression DOTDIV expression
Rule 68    expression -> expression '
Rule 69    expression -> EYE ( indexes )
Rule 70    expression -> ONES ( indexes )
Rule 71    expression -> ZEROS ( indexes )
Rule 72    expression -> ( expression )
Rule 73    expression -> INTNUM
Rule 74    expression -> FLOATNUM
Rule 75    expression -> STRING
Rule 76    expression -> ID

Terminals, with rules where they appear

'                    : 68
(                    : 31 41 42 43 69 70 71 72
)                    : 31 41 42 43 69 70 71 72
*                    : 62
+                    : 60
,                    : 34 36 51
-                    : 31 61
/                    : 63
:                    : 40 45
;                    : 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 46 47 48 49 50
=                    : 14 19 20 25 31 45
BREAK                : 46
CONTINUE             : 47
DIVASSIGN            : 18 24 29
DOTADD               : 64
DOTDIV               : 67
DOTMUL               : 66
DOTSUB               : 65
ELSE                 : 42
EQUAL                : 59
EYE                  : 69
FLOATNUM             : 74
FOR                  : 44
GREATER_EQUAL        : 57
GREATER_THAN         : 55
ID                   : 14 15 16 17 18 19 20 21 22 23 24 30 31 39 45 76
IF                   : 41 42
INTNUM               : 38 73
LESSER_EQUAL         : 56
LESSER_THAN          : 54
MULASSIGN            : 17 23 28
NOT_EQUAL            : 58
ONES                 : 70
PLUSASSIGN           : 15 21 26
PRINT                : 50
RETURN               : 48 49
STRING               : 75
SUBASSIGN            : 16 22 27
WHILE                : 43
ZEROS                : 71
[                    : 30 32 33
]                    : 30 32 33
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

array                : 19 34 35
array_reference      : 20 21 22 23 24 25 26 27 28 29 53
assign_instr         : 4
break_instr          : 8
continue_instr       : 9
expression           : 12 14 15 16 17 18 25 26 27 28 29 31 40 40 41 42 43 45 45 49 51 52 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 72
for_instr            : 7
if_instr             : 5
index                : 36 37
indexes              : 30 33 36 69 70 71
instruction          : 2 3 41 42 42 43 44
instructions         : 1 2 13
print_instr          : 11
printable            : 50 51
program              : 0
range                : 44
return_instr         : 10
subarrays            : 32 34
while_instr          : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    array_reference                shift and go to state 15

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 30
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    array_reference                shift and go to state 15

state 3

    (3) instructions -> instruction .

    {               reduce using rule 3 (instructions -> instruction .)
    ID              reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    EYE             reduce using rule 3 (instructions -> instruction .)
    ONES            reduce using rule 3 (instructions -> instruction .)
    ZEROS           reduce using rule 3 (instructions -> instruction .)
    (               reduce using rule 3 (instructions -> instruction .)
    INTNUM          reduce using rule 3 (instructions -> instruction .)
    FLOATNUM        reduce using rule 3 (instructions -> instruction .)
    STRING          reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> assign_instr .

    {               reduce using rule 4 (instruction -> assign_instr .)
    ID              reduce using rule 4 (instruction -> assign_instr .)
    IF              reduce using rule 4 (instruction -> assign_instr .)
    WHILE           reduce using rule 4 (instruction -> assign_instr .)
    FOR             reduce using rule 4 (instruction -> assign_instr .)
    BREAK           reduce using rule 4 (instruction -> assign_instr .)
    CONTINUE        reduce using rule 4 (instruction -> assign_instr .)
    RETURN          reduce using rule 4 (instruction -> assign_instr .)
    PRINT           reduce using rule 4 (instruction -> assign_instr .)
    EYE             reduce using rule 4 (instruction -> assign_instr .)
    ONES            reduce using rule 4 (instruction -> assign_instr .)
    ZEROS           reduce using rule 4 (instruction -> assign_instr .)
    (               reduce using rule 4 (instruction -> assign_instr .)
    INTNUM          reduce using rule 4 (instruction -> assign_instr .)
    FLOATNUM        reduce using rule 4 (instruction -> assign_instr .)
    STRING          reduce using rule 4 (instruction -> assign_instr .)
    $end            reduce using rule 4 (instruction -> assign_instr .)
    }               reduce using rule 4 (instruction -> assign_instr .)
    ELSE            reduce using rule 4 (instruction -> assign_instr .)


state 5

    (5) instruction -> if_instr .

    {               reduce using rule 5 (instruction -> if_instr .)
    ID              reduce using rule 5 (instruction -> if_instr .)
    IF              reduce using rule 5 (instruction -> if_instr .)
    WHILE           reduce using rule 5 (instruction -> if_instr .)
    FOR             reduce using rule 5 (instruction -> if_instr .)
    BREAK           reduce using rule 5 (instruction -> if_instr .)
    CONTINUE        reduce using rule 5 (instruction -> if_instr .)
    RETURN          reduce using rule 5 (instruction -> if_instr .)
    PRINT           reduce using rule 5 (instruction -> if_instr .)
    EYE             reduce using rule 5 (instruction -> if_instr .)
    ONES            reduce using rule 5 (instruction -> if_instr .)
    ZEROS           reduce using rule 5 (instruction -> if_instr .)
    (               reduce using rule 5 (instruction -> if_instr .)
    INTNUM          reduce using rule 5 (instruction -> if_instr .)
    FLOATNUM        reduce using rule 5 (instruction -> if_instr .)
    STRING          reduce using rule 5 (instruction -> if_instr .)
    $end            reduce using rule 5 (instruction -> if_instr .)
    }               reduce using rule 5 (instruction -> if_instr .)
    ELSE            reduce using rule 5 (instruction -> if_instr .)


state 6

    (6) instruction -> while_instr .

    {               reduce using rule 6 (instruction -> while_instr .)
    ID              reduce using rule 6 (instruction -> while_instr .)
    IF              reduce using rule 6 (instruction -> while_instr .)
    WHILE           reduce using rule 6 (instruction -> while_instr .)
    FOR             reduce using rule 6 (instruction -> while_instr .)
    BREAK           reduce using rule 6 (instruction -> while_instr .)
    CONTINUE        reduce using rule 6 (instruction -> while_instr .)
    RETURN          reduce using rule 6 (instruction -> while_instr .)
    PRINT           reduce using rule 6 (instruction -> while_instr .)
    EYE             reduce using rule 6 (instruction -> while_instr .)
    ONES            reduce using rule 6 (instruction -> while_instr .)
    ZEROS           reduce using rule 6 (instruction -> while_instr .)
    (               reduce using rule 6 (instruction -> while_instr .)
    INTNUM          reduce using rule 6 (instruction -> while_instr .)
    FLOATNUM        reduce using rule 6 (instruction -> while_instr .)
    STRING          reduce using rule 6 (instruction -> while_instr .)
    $end            reduce using rule 6 (instruction -> while_instr .)
    }               reduce using rule 6 (instruction -> while_instr .)
    ELSE            reduce using rule 6 (instruction -> while_instr .)


state 7

    (7) instruction -> for_instr .

    {               reduce using rule 7 (instruction -> for_instr .)
    ID              reduce using rule 7 (instruction -> for_instr .)
    IF              reduce using rule 7 (instruction -> for_instr .)
    WHILE           reduce using rule 7 (instruction -> for_instr .)
    FOR             reduce using rule 7 (instruction -> for_instr .)
    BREAK           reduce using rule 7 (instruction -> for_instr .)
    CONTINUE        reduce using rule 7 (instruction -> for_instr .)
    RETURN          reduce using rule 7 (instruction -> for_instr .)
    PRINT           reduce using rule 7 (instruction -> for_instr .)
    EYE             reduce using rule 7 (instruction -> for_instr .)
    ONES            reduce using rule 7 (instruction -> for_instr .)
    ZEROS           reduce using rule 7 (instruction -> for_instr .)
    (               reduce using rule 7 (instruction -> for_instr .)
    INTNUM          reduce using rule 7 (instruction -> for_instr .)
    FLOATNUM        reduce using rule 7 (instruction -> for_instr .)
    STRING          reduce using rule 7 (instruction -> for_instr .)
    $end            reduce using rule 7 (instruction -> for_instr .)
    }               reduce using rule 7 (instruction -> for_instr .)
    ELSE            reduce using rule 7 (instruction -> for_instr .)


state 8

    (8) instruction -> break_instr .

    {               reduce using rule 8 (instruction -> break_instr .)
    ID              reduce using rule 8 (instruction -> break_instr .)
    IF              reduce using rule 8 (instruction -> break_instr .)
    WHILE           reduce using rule 8 (instruction -> break_instr .)
    FOR             reduce using rule 8 (instruction -> break_instr .)
    BREAK           reduce using rule 8 (instruction -> break_instr .)
    CONTINUE        reduce using rule 8 (instruction -> break_instr .)
    RETURN          reduce using rule 8 (instruction -> break_instr .)
    PRINT           reduce using rule 8 (instruction -> break_instr .)
    EYE             reduce using rule 8 (instruction -> break_instr .)
    ONES            reduce using rule 8 (instruction -> break_instr .)
    ZEROS           reduce using rule 8 (instruction -> break_instr .)
    (               reduce using rule 8 (instruction -> break_instr .)
    INTNUM          reduce using rule 8 (instruction -> break_instr .)
    FLOATNUM        reduce using rule 8 (instruction -> break_instr .)
    STRING          reduce using rule 8 (instruction -> break_instr .)
    $end            reduce using rule 8 (instruction -> break_instr .)
    }               reduce using rule 8 (instruction -> break_instr .)
    ELSE            reduce using rule 8 (instruction -> break_instr .)


state 9

    (9) instruction -> continue_instr .

    {               reduce using rule 9 (instruction -> continue_instr .)
    ID              reduce using rule 9 (instruction -> continue_instr .)
    IF              reduce using rule 9 (instruction -> continue_instr .)
    WHILE           reduce using rule 9 (instruction -> continue_instr .)
    FOR             reduce using rule 9 (instruction -> continue_instr .)
    BREAK           reduce using rule 9 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 9 (instruction -> continue_instr .)
    RETURN          reduce using rule 9 (instruction -> continue_instr .)
    PRINT           reduce using rule 9 (instruction -> continue_instr .)
    EYE             reduce using rule 9 (instruction -> continue_instr .)
    ONES            reduce using rule 9 (instruction -> continue_instr .)
    ZEROS           reduce using rule 9 (instruction -> continue_instr .)
    (               reduce using rule 9 (instruction -> continue_instr .)
    INTNUM          reduce using rule 9 (instruction -> continue_instr .)
    FLOATNUM        reduce using rule 9 (instruction -> continue_instr .)
    STRING          reduce using rule 9 (instruction -> continue_instr .)
    $end            reduce using rule 9 (instruction -> continue_instr .)
    }               reduce using rule 9 (instruction -> continue_instr .)
    ELSE            reduce using rule 9 (instruction -> continue_instr .)


state 10

    (10) instruction -> return_instr .

    {               reduce using rule 10 (instruction -> return_instr .)
    ID              reduce using rule 10 (instruction -> return_instr .)
    IF              reduce using rule 10 (instruction -> return_instr .)
    WHILE           reduce using rule 10 (instruction -> return_instr .)
    FOR             reduce using rule 10 (instruction -> return_instr .)
    BREAK           reduce using rule 10 (instruction -> return_instr .)
    CONTINUE        reduce using rule 10 (instruction -> return_instr .)
    RETURN          reduce using rule 10 (instruction -> return_instr .)
    PRINT           reduce using rule 10 (instruction -> return_instr .)
    EYE             reduce using rule 10 (instruction -> return_instr .)
    ONES            reduce using rule 10 (instruction -> return_instr .)
    ZEROS           reduce using rule 10 (instruction -> return_instr .)
    (               reduce using rule 10 (instruction -> return_instr .)
    INTNUM          reduce using rule 10 (instruction -> return_instr .)
    FLOATNUM        reduce using rule 10 (instruction -> return_instr .)
    STRING          reduce using rule 10 (instruction -> return_instr .)
    $end            reduce using rule 10 (instruction -> return_instr .)
    }               reduce using rule 10 (instruction -> return_instr .)
    ELSE            reduce using rule 10 (instruction -> return_instr .)


state 11

    (11) instruction -> print_instr .

    {               reduce using rule 11 (instruction -> print_instr .)
    ID              reduce using rule 11 (instruction -> print_instr .)
    IF              reduce using rule 11 (instruction -> print_instr .)
    WHILE           reduce using rule 11 (instruction -> print_instr .)
    FOR             reduce using rule 11 (instruction -> print_instr .)
    BREAK           reduce using rule 11 (instruction -> print_instr .)
    CONTINUE        reduce using rule 11 (instruction -> print_instr .)
    RETURN          reduce using rule 11 (instruction -> print_instr .)
    PRINT           reduce using rule 11 (instruction -> print_instr .)
    EYE             reduce using rule 11 (instruction -> print_instr .)
    ONES            reduce using rule 11 (instruction -> print_instr .)
    ZEROS           reduce using rule 11 (instruction -> print_instr .)
    (               reduce using rule 11 (instruction -> print_instr .)
    INTNUM          reduce using rule 11 (instruction -> print_instr .)
    FLOATNUM        reduce using rule 11 (instruction -> print_instr .)
    STRING          reduce using rule 11 (instruction -> print_instr .)
    $end            reduce using rule 11 (instruction -> print_instr .)
    }               reduce using rule 11 (instruction -> print_instr .)
    ELSE            reduce using rule 11 (instruction -> print_instr .)


state 12

    (12) instruction -> expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    {               reduce using rule 12 (instruction -> expression .)
    ID              reduce using rule 12 (instruction -> expression .)
    IF              reduce using rule 12 (instruction -> expression .)
    WHILE           reduce using rule 12 (instruction -> expression .)
    FOR             reduce using rule 12 (instruction -> expression .)
    BREAK           reduce using rule 12 (instruction -> expression .)
    CONTINUE        reduce using rule 12 (instruction -> expression .)
    RETURN          reduce using rule 12 (instruction -> expression .)
    PRINT           reduce using rule 12 (instruction -> expression .)
    EYE             reduce using rule 12 (instruction -> expression .)
    ONES            reduce using rule 12 (instruction -> expression .)
    ZEROS           reduce using rule 12 (instruction -> expression .)
    (               reduce using rule 12 (instruction -> expression .)
    INTNUM          reduce using rule 12 (instruction -> expression .)
    FLOATNUM        reduce using rule 12 (instruction -> expression .)
    STRING          reduce using rule 12 (instruction -> expression .)
    $end            reduce using rule 12 (instruction -> expression .)
    }               reduce using rule 12 (instruction -> expression .)
    ELSE            reduce using rule 12 (instruction -> expression .)
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 13

    (13) instruction -> { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    instructions                   shift and go to state 46
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    array_reference                shift and go to state 15

state 14

    (14) assign_instr -> ID . = expression ;
    (15) assign_instr -> ID . PLUSASSIGN expression ;
    (16) assign_instr -> ID . SUBASSIGN expression ;
    (17) assign_instr -> ID . MULASSIGN expression ;
    (18) assign_instr -> ID . DIVASSIGN expression ;
    (19) assign_instr -> ID . = array ;
    (20) assign_instr -> ID . = array_reference ;
    (21) assign_instr -> ID . PLUSASSIGN array_reference ;
    (22) assign_instr -> ID . SUBASSIGN array_reference ;
    (23) assign_instr -> ID . MULASSIGN array_reference ;
    (24) assign_instr -> ID . DIVASSIGN array_reference ;
    (31) assign_instr -> ID . = ( - expression ) ;
    (76) expression -> ID .
    (30) array_reference -> ID . [ indexes ]

    =               shift and go to state 47
    PLUSASSIGN      shift and go to state 48
    SUBASSIGN       shift and go to state 49
    MULASSIGN       shift and go to state 50
    DIVASSIGN       shift and go to state 51
    LESSER_THAN     reduce using rule 76 (expression -> ID .)
    GREATER_THAN    reduce using rule 76 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 76 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 76 (expression -> ID .)
    NOT_EQUAL       reduce using rule 76 (expression -> ID .)
    EQUAL           reduce using rule 76 (expression -> ID .)
    +               reduce using rule 76 (expression -> ID .)
    -               reduce using rule 76 (expression -> ID .)
    *               reduce using rule 76 (expression -> ID .)
    /               reduce using rule 76 (expression -> ID .)
    DOTADD          reduce using rule 76 (expression -> ID .)
    DOTSUB          reduce using rule 76 (expression -> ID .)
    DOTMUL          reduce using rule 76 (expression -> ID .)
    DOTDIV          reduce using rule 76 (expression -> ID .)
    '               reduce using rule 76 (expression -> ID .)
    {               reduce using rule 76 (expression -> ID .)
    ID              reduce using rule 76 (expression -> ID .)
    IF              reduce using rule 76 (expression -> ID .)
    WHILE           reduce using rule 76 (expression -> ID .)
    FOR             reduce using rule 76 (expression -> ID .)
    BREAK           reduce using rule 76 (expression -> ID .)
    CONTINUE        reduce using rule 76 (expression -> ID .)
    RETURN          reduce using rule 76 (expression -> ID .)
    PRINT           reduce using rule 76 (expression -> ID .)
    EYE             reduce using rule 76 (expression -> ID .)
    ONES            reduce using rule 76 (expression -> ID .)
    ZEROS           reduce using rule 76 (expression -> ID .)
    (               reduce using rule 76 (expression -> ID .)
    INTNUM          reduce using rule 76 (expression -> ID .)
    FLOATNUM        reduce using rule 76 (expression -> ID .)
    STRING          reduce using rule 76 (expression -> ID .)
    $end            reduce using rule 76 (expression -> ID .)
    }               reduce using rule 76 (expression -> ID .)
    ELSE            reduce using rule 76 (expression -> ID .)
    [               shift and go to state 52


state 15

    (25) assign_instr -> array_reference . = expression ;
    (26) assign_instr -> array_reference . PLUSASSIGN expression ;
    (27) assign_instr -> array_reference . SUBASSIGN expression ;
    (28) assign_instr -> array_reference . MULASSIGN expression ;
    (29) assign_instr -> array_reference . DIVASSIGN expression ;

    =               shift and go to state 53
    PLUSASSIGN      shift and go to state 54
    SUBASSIGN       shift and go to state 55
    MULASSIGN       shift and go to state 56
    DIVASSIGN       shift and go to state 57


state 16

    (72) expression -> ( . expression )
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 58

state 17

    (41) if_instr -> IF . ( expression ) instruction
    (42) if_instr -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 60


state 18

    (43) while_instr -> WHILE . ( expression ) instruction

    (               shift and go to state 61


state 19

    (44) for_instr -> FOR . range instruction
    (45) range -> . ID = expression : expression

    ID              shift and go to state 63

    range                          shift and go to state 62

state 20

    (46) break_instr -> BREAK . ;

    ;               shift and go to state 64


state 21

    (47) continue_instr -> CONTINUE . ;

    ;               shift and go to state 65


state 22

    (48) return_instr -> RETURN . ;
    (49) return_instr -> RETURN . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    ;               shift and go to state 66
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 67

state 23

    (50) print_instr -> PRINT . printable ;
    (51) printable -> . printable , expression
    (52) printable -> . expression
    (53) printable -> . array_reference
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71

    printable                      shift and go to state 68
    expression                     shift and go to state 69
    array_reference                shift and go to state 70

state 24

    (69) expression -> EYE . ( indexes )

    (               shift and go to state 72


state 25

    (70) expression -> ONES . ( indexes )

    (               shift and go to state 73


state 26

    (71) expression -> ZEROS . ( indexes )

    (               shift and go to state 74


state 27

    (73) expression -> INTNUM .

    LESSER_THAN     reduce using rule 73 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 73 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 73 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 73 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 73 (expression -> INTNUM .)
    EQUAL           reduce using rule 73 (expression -> INTNUM .)
    +               reduce using rule 73 (expression -> INTNUM .)
    -               reduce using rule 73 (expression -> INTNUM .)
    *               reduce using rule 73 (expression -> INTNUM .)
    /               reduce using rule 73 (expression -> INTNUM .)
    DOTADD          reduce using rule 73 (expression -> INTNUM .)
    DOTSUB          reduce using rule 73 (expression -> INTNUM .)
    DOTMUL          reduce using rule 73 (expression -> INTNUM .)
    DOTDIV          reduce using rule 73 (expression -> INTNUM .)
    '               reduce using rule 73 (expression -> INTNUM .)
    {               reduce using rule 73 (expression -> INTNUM .)
    ID              reduce using rule 73 (expression -> INTNUM .)
    IF              reduce using rule 73 (expression -> INTNUM .)
    WHILE           reduce using rule 73 (expression -> INTNUM .)
    FOR             reduce using rule 73 (expression -> INTNUM .)
    BREAK           reduce using rule 73 (expression -> INTNUM .)
    CONTINUE        reduce using rule 73 (expression -> INTNUM .)
    RETURN          reduce using rule 73 (expression -> INTNUM .)
    PRINT           reduce using rule 73 (expression -> INTNUM .)
    EYE             reduce using rule 73 (expression -> INTNUM .)
    ONES            reduce using rule 73 (expression -> INTNUM .)
    ZEROS           reduce using rule 73 (expression -> INTNUM .)
    (               reduce using rule 73 (expression -> INTNUM .)
    INTNUM          reduce using rule 73 (expression -> INTNUM .)
    FLOATNUM        reduce using rule 73 (expression -> INTNUM .)
    STRING          reduce using rule 73 (expression -> INTNUM .)
    $end            reduce using rule 73 (expression -> INTNUM .)
    }               reduce using rule 73 (expression -> INTNUM .)
    )               reduce using rule 73 (expression -> INTNUM .)
    ;               reduce using rule 73 (expression -> INTNUM .)
    ,               reduce using rule 73 (expression -> INTNUM .)
    :               reduce using rule 73 (expression -> INTNUM .)
    ELSE            reduce using rule 73 (expression -> INTNUM .)
    ]               reduce using rule 73 (expression -> INTNUM .)


state 28

    (74) expression -> FLOATNUM .

    LESSER_THAN     reduce using rule 74 (expression -> FLOATNUM .)
    GREATER_THAN    reduce using rule 74 (expression -> FLOATNUM .)
    LESSER_EQUAL    reduce using rule 74 (expression -> FLOATNUM .)
    GREATER_EQUAL   reduce using rule 74 (expression -> FLOATNUM .)
    NOT_EQUAL       reduce using rule 74 (expression -> FLOATNUM .)
    EQUAL           reduce using rule 74 (expression -> FLOATNUM .)
    +               reduce using rule 74 (expression -> FLOATNUM .)
    -               reduce using rule 74 (expression -> FLOATNUM .)
    *               reduce using rule 74 (expression -> FLOATNUM .)
    /               reduce using rule 74 (expression -> FLOATNUM .)
    DOTADD          reduce using rule 74 (expression -> FLOATNUM .)
    DOTSUB          reduce using rule 74 (expression -> FLOATNUM .)
    DOTMUL          reduce using rule 74 (expression -> FLOATNUM .)
    DOTDIV          reduce using rule 74 (expression -> FLOATNUM .)
    '               reduce using rule 74 (expression -> FLOATNUM .)
    {               reduce using rule 74 (expression -> FLOATNUM .)
    ID              reduce using rule 74 (expression -> FLOATNUM .)
    IF              reduce using rule 74 (expression -> FLOATNUM .)
    WHILE           reduce using rule 74 (expression -> FLOATNUM .)
    FOR             reduce using rule 74 (expression -> FLOATNUM .)
    BREAK           reduce using rule 74 (expression -> FLOATNUM .)
    CONTINUE        reduce using rule 74 (expression -> FLOATNUM .)
    RETURN          reduce using rule 74 (expression -> FLOATNUM .)
    PRINT           reduce using rule 74 (expression -> FLOATNUM .)
    EYE             reduce using rule 74 (expression -> FLOATNUM .)
    ONES            reduce using rule 74 (expression -> FLOATNUM .)
    ZEROS           reduce using rule 74 (expression -> FLOATNUM .)
    (               reduce using rule 74 (expression -> FLOATNUM .)
    INTNUM          reduce using rule 74 (expression -> FLOATNUM .)
    FLOATNUM        reduce using rule 74 (expression -> FLOATNUM .)
    STRING          reduce using rule 74 (expression -> FLOATNUM .)
    $end            reduce using rule 74 (expression -> FLOATNUM .)
    }               reduce using rule 74 (expression -> FLOATNUM .)
    )               reduce using rule 74 (expression -> FLOATNUM .)
    ;               reduce using rule 74 (expression -> FLOATNUM .)
    ,               reduce using rule 74 (expression -> FLOATNUM .)
    :               reduce using rule 74 (expression -> FLOATNUM .)
    ELSE            reduce using rule 74 (expression -> FLOATNUM .)
    ]               reduce using rule 74 (expression -> FLOATNUM .)


state 29

    (75) expression -> STRING .

    LESSER_THAN     reduce using rule 75 (expression -> STRING .)
    GREATER_THAN    reduce using rule 75 (expression -> STRING .)
    LESSER_EQUAL    reduce using rule 75 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 75 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 75 (expression -> STRING .)
    EQUAL           reduce using rule 75 (expression -> STRING .)
    +               reduce using rule 75 (expression -> STRING .)
    -               reduce using rule 75 (expression -> STRING .)
    *               reduce using rule 75 (expression -> STRING .)
    /               reduce using rule 75 (expression -> STRING .)
    DOTADD          reduce using rule 75 (expression -> STRING .)
    DOTSUB          reduce using rule 75 (expression -> STRING .)
    DOTMUL          reduce using rule 75 (expression -> STRING .)
    DOTDIV          reduce using rule 75 (expression -> STRING .)
    '               reduce using rule 75 (expression -> STRING .)
    {               reduce using rule 75 (expression -> STRING .)
    ID              reduce using rule 75 (expression -> STRING .)
    IF              reduce using rule 75 (expression -> STRING .)
    WHILE           reduce using rule 75 (expression -> STRING .)
    FOR             reduce using rule 75 (expression -> STRING .)
    BREAK           reduce using rule 75 (expression -> STRING .)
    CONTINUE        reduce using rule 75 (expression -> STRING .)
    RETURN          reduce using rule 75 (expression -> STRING .)
    PRINT           reduce using rule 75 (expression -> STRING .)
    EYE             reduce using rule 75 (expression -> STRING .)
    ONES            reduce using rule 75 (expression -> STRING .)
    ZEROS           reduce using rule 75 (expression -> STRING .)
    (               reduce using rule 75 (expression -> STRING .)
    INTNUM          reduce using rule 75 (expression -> STRING .)
    FLOATNUM        reduce using rule 75 (expression -> STRING .)
    STRING          reduce using rule 75 (expression -> STRING .)
    $end            reduce using rule 75 (expression -> STRING .)
    }               reduce using rule 75 (expression -> STRING .)
    )               reduce using rule 75 (expression -> STRING .)
    ;               reduce using rule 75 (expression -> STRING .)
    ,               reduce using rule 75 (expression -> STRING .)
    :               reduce using rule 75 (expression -> STRING .)
    ELSE            reduce using rule 75 (expression -> STRING .)
    ]               reduce using rule 75 (expression -> STRING .)


state 30

    (2) instructions -> instructions instruction .

    {               reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 31

    (54) expression -> expression LESSER_THAN . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 75

state 32

    (55) expression -> expression GREATER_THAN . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 76

state 33

    (56) expression -> expression LESSER_EQUAL . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 77

state 34

    (57) expression -> expression GREATER_EQUAL . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 78

state 35

    (58) expression -> expression NOT_EQUAL . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 79

state 36

    (59) expression -> expression EQUAL . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 80

state 37

    (60) expression -> expression + . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 81

state 38

    (61) expression -> expression - . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 82

state 39

    (62) expression -> expression * . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 83

state 40

    (63) expression -> expression / . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 84

state 41

    (64) expression -> expression DOTADD . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 85

state 42

    (65) expression -> expression DOTSUB . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 86

state 43

    (66) expression -> expression DOTMUL . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 87

state 44

    (67) expression -> expression DOTDIV . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 88

state 45

    (68) expression -> expression ' .

    LESSER_THAN     reduce using rule 68 (expression -> expression ' .)
    GREATER_THAN    reduce using rule 68 (expression -> expression ' .)
    LESSER_EQUAL    reduce using rule 68 (expression -> expression ' .)
    GREATER_EQUAL   reduce using rule 68 (expression -> expression ' .)
    NOT_EQUAL       reduce using rule 68 (expression -> expression ' .)
    EQUAL           reduce using rule 68 (expression -> expression ' .)
    +               reduce using rule 68 (expression -> expression ' .)
    -               reduce using rule 68 (expression -> expression ' .)
    *               reduce using rule 68 (expression -> expression ' .)
    /               reduce using rule 68 (expression -> expression ' .)
    DOTADD          reduce using rule 68 (expression -> expression ' .)
    DOTSUB          reduce using rule 68 (expression -> expression ' .)
    DOTMUL          reduce using rule 68 (expression -> expression ' .)
    DOTDIV          reduce using rule 68 (expression -> expression ' .)
    '               reduce using rule 68 (expression -> expression ' .)
    {               reduce using rule 68 (expression -> expression ' .)
    ID              reduce using rule 68 (expression -> expression ' .)
    IF              reduce using rule 68 (expression -> expression ' .)
    WHILE           reduce using rule 68 (expression -> expression ' .)
    FOR             reduce using rule 68 (expression -> expression ' .)
    BREAK           reduce using rule 68 (expression -> expression ' .)
    CONTINUE        reduce using rule 68 (expression -> expression ' .)
    RETURN          reduce using rule 68 (expression -> expression ' .)
    PRINT           reduce using rule 68 (expression -> expression ' .)
    EYE             reduce using rule 68 (expression -> expression ' .)
    ONES            reduce using rule 68 (expression -> expression ' .)
    ZEROS           reduce using rule 68 (expression -> expression ' .)
    (               reduce using rule 68 (expression -> expression ' .)
    INTNUM          reduce using rule 68 (expression -> expression ' .)
    FLOATNUM        reduce using rule 68 (expression -> expression ' .)
    STRING          reduce using rule 68 (expression -> expression ' .)
    $end            reduce using rule 68 (expression -> expression ' .)
    }               reduce using rule 68 (expression -> expression ' .)
    )               reduce using rule 68 (expression -> expression ' .)
    ;               reduce using rule 68 (expression -> expression ' .)
    ,               reduce using rule 68 (expression -> expression ' .)
    :               reduce using rule 68 (expression -> expression ' .)
    ELSE            reduce using rule 68 (expression -> expression ' .)
    ]               reduce using rule 68 (expression -> expression ' .)


state 46

    (13) instruction -> { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    }               shift and go to state 89
    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 30
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    array_reference                shift and go to state 15

state 47

    (14) assign_instr -> ID = . expression ;
    (19) assign_instr -> ID = . array ;
    (20) assign_instr -> ID = . array_reference ;
    (31) assign_instr -> ID = . ( - expression ) ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (32) array -> . [ subarrays ]
    (33) array -> . [ indexes ]
    (30) array_reference -> . ID [ indexes ]

    (               shift and go to state 93
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71
    [               shift and go to state 94

    expression                     shift and go to state 90
    array                          shift and go to state 91
    array_reference                shift and go to state 92

state 48

    (15) assign_instr -> ID PLUSASSIGN . expression ;
    (21) assign_instr -> ID PLUSASSIGN . array_reference ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71

    expression                     shift and go to state 95
    array_reference                shift and go to state 96

state 49

    (16) assign_instr -> ID SUBASSIGN . expression ;
    (22) assign_instr -> ID SUBASSIGN . array_reference ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71

    expression                     shift and go to state 97
    array_reference                shift and go to state 98

state 50

    (17) assign_instr -> ID MULASSIGN . expression ;
    (23) assign_instr -> ID MULASSIGN . array_reference ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71

    expression                     shift and go to state 99
    array_reference                shift and go to state 100

state 51

    (18) assign_instr -> ID DIVASSIGN . expression ;
    (24) assign_instr -> ID DIVASSIGN . array_reference ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 71

    expression                     shift and go to state 101
    array_reference                shift and go to state 102

state 52

    (30) array_reference -> ID [ . indexes ]
    (36) indexes -> . indexes , index
    (37) indexes -> . index
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    indexes                        shift and go to state 104
    index                          shift and go to state 105
    expression                     shift and go to state 107

state 53

    (25) assign_instr -> array_reference = . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 108

state 54

    (26) assign_instr -> array_reference PLUSASSIGN . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 109

state 55

    (27) assign_instr -> array_reference SUBASSIGN . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 110

state 56

    (28) assign_instr -> array_reference MULASSIGN . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 111

state 57

    (29) assign_instr -> array_reference DIVASSIGN . expression ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 112

state 58

    (72) expression -> ( expression . )
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    )               shift and go to state 113
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 59

    (76) expression -> ID .

    )               reduce using rule 76 (expression -> ID .)
    LESSER_THAN     reduce using rule 76 (expression -> ID .)
    GREATER_THAN    reduce using rule 76 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 76 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 76 (expression -> ID .)
    NOT_EQUAL       reduce using rule 76 (expression -> ID .)
    EQUAL           reduce using rule 76 (expression -> ID .)
    +               reduce using rule 76 (expression -> ID .)
    -               reduce using rule 76 (expression -> ID .)
    *               reduce using rule 76 (expression -> ID .)
    /               reduce using rule 76 (expression -> ID .)
    DOTADD          reduce using rule 76 (expression -> ID .)
    DOTSUB          reduce using rule 76 (expression -> ID .)
    DOTMUL          reduce using rule 76 (expression -> ID .)
    DOTDIV          reduce using rule 76 (expression -> ID .)
    '               reduce using rule 76 (expression -> ID .)
    ;               reduce using rule 76 (expression -> ID .)
    {               reduce using rule 76 (expression -> ID .)
    ID              reduce using rule 76 (expression -> ID .)
    IF              reduce using rule 76 (expression -> ID .)
    WHILE           reduce using rule 76 (expression -> ID .)
    FOR             reduce using rule 76 (expression -> ID .)
    BREAK           reduce using rule 76 (expression -> ID .)
    CONTINUE        reduce using rule 76 (expression -> ID .)
    RETURN          reduce using rule 76 (expression -> ID .)
    PRINT           reduce using rule 76 (expression -> ID .)
    EYE             reduce using rule 76 (expression -> ID .)
    ONES            reduce using rule 76 (expression -> ID .)
    ZEROS           reduce using rule 76 (expression -> ID .)
    (               reduce using rule 76 (expression -> ID .)
    INTNUM          reduce using rule 76 (expression -> ID .)
    FLOATNUM        reduce using rule 76 (expression -> ID .)
    STRING          reduce using rule 76 (expression -> ID .)
    $end            reduce using rule 76 (expression -> ID .)
    }               reduce using rule 76 (expression -> ID .)
    ,               reduce using rule 76 (expression -> ID .)
    :               reduce using rule 76 (expression -> ID .)
    ELSE            reduce using rule 76 (expression -> ID .)
    ]               reduce using rule 76 (expression -> ID .)


state 60

    (41) if_instr -> IF ( . expression ) instruction
    (42) if_instr -> IF ( . expression ) instruction ELSE instruction
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 114

state 61

    (43) while_instr -> WHILE ( . expression ) instruction
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 115

state 62

    (44) for_instr -> FOR range . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    instruction                    shift and go to state 116
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12
    array_reference                shift and go to state 15

state 63

    (45) range -> ID . = expression : expression

    =               shift and go to state 117


state 64

    (46) break_instr -> BREAK ; .

    {               reduce using rule 46 (break_instr -> BREAK ; .)
    ID              reduce using rule 46 (break_instr -> BREAK ; .)
    IF              reduce using rule 46 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 46 (break_instr -> BREAK ; .)
    FOR             reduce using rule 46 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 46 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 46 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 46 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 46 (break_instr -> BREAK ; .)
    EYE             reduce using rule 46 (break_instr -> BREAK ; .)
    ONES            reduce using rule 46 (break_instr -> BREAK ; .)
    ZEROS           reduce using rule 46 (break_instr -> BREAK ; .)
    (               reduce using rule 46 (break_instr -> BREAK ; .)
    INTNUM          reduce using rule 46 (break_instr -> BREAK ; .)
    FLOATNUM        reduce using rule 46 (break_instr -> BREAK ; .)
    STRING          reduce using rule 46 (break_instr -> BREAK ; .)
    $end            reduce using rule 46 (break_instr -> BREAK ; .)
    }               reduce using rule 46 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 46 (break_instr -> BREAK ; .)


state 65

    (47) continue_instr -> CONTINUE ; .

    {               reduce using rule 47 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 47 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 47 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 47 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 47 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 47 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 47 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 47 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 47 (continue_instr -> CONTINUE ; .)
    EYE             reduce using rule 47 (continue_instr -> CONTINUE ; .)
    ONES            reduce using rule 47 (continue_instr -> CONTINUE ; .)
    ZEROS           reduce using rule 47 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 47 (continue_instr -> CONTINUE ; .)
    INTNUM          reduce using rule 47 (continue_instr -> CONTINUE ; .)
    FLOATNUM        reduce using rule 47 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 47 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 47 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 47 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 47 (continue_instr -> CONTINUE ; .)


state 66

    (48) return_instr -> RETURN ; .

    {               reduce using rule 48 (return_instr -> RETURN ; .)
    ID              reduce using rule 48 (return_instr -> RETURN ; .)
    IF              reduce using rule 48 (return_instr -> RETURN ; .)
    WHILE           reduce using rule 48 (return_instr -> RETURN ; .)
    FOR             reduce using rule 48 (return_instr -> RETURN ; .)
    BREAK           reduce using rule 48 (return_instr -> RETURN ; .)
    CONTINUE        reduce using rule 48 (return_instr -> RETURN ; .)
    RETURN          reduce using rule 48 (return_instr -> RETURN ; .)
    PRINT           reduce using rule 48 (return_instr -> RETURN ; .)
    EYE             reduce using rule 48 (return_instr -> RETURN ; .)
    ONES            reduce using rule 48 (return_instr -> RETURN ; .)
    ZEROS           reduce using rule 48 (return_instr -> RETURN ; .)
    (               reduce using rule 48 (return_instr -> RETURN ; .)
    INTNUM          reduce using rule 48 (return_instr -> RETURN ; .)
    FLOATNUM        reduce using rule 48 (return_instr -> RETURN ; .)
    STRING          reduce using rule 48 (return_instr -> RETURN ; .)
    $end            reduce using rule 48 (return_instr -> RETURN ; .)
    }               reduce using rule 48 (return_instr -> RETURN ; .)
    ELSE            reduce using rule 48 (return_instr -> RETURN ; .)


state 67

    (49) return_instr -> RETURN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 118
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 68

    (50) print_instr -> PRINT printable . ;
    (51) printable -> printable . , expression

    ;               shift and go to state 119
    ,               shift and go to state 120


state 69

    (52) printable -> expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               reduce using rule 52 (printable -> expression .)
    ,               reduce using rule 52 (printable -> expression .)
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 70

    (53) printable -> array_reference .

    ;               reduce using rule 53 (printable -> array_reference .)
    ,               reduce using rule 53 (printable -> array_reference .)


state 71

    (76) expression -> ID .
    (30) array_reference -> ID . [ indexes ]

    LESSER_THAN     reduce using rule 76 (expression -> ID .)
    GREATER_THAN    reduce using rule 76 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 76 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 76 (expression -> ID .)
    NOT_EQUAL       reduce using rule 76 (expression -> ID .)
    EQUAL           reduce using rule 76 (expression -> ID .)
    +               reduce using rule 76 (expression -> ID .)
    -               reduce using rule 76 (expression -> ID .)
    *               reduce using rule 76 (expression -> ID .)
    /               reduce using rule 76 (expression -> ID .)
    DOTADD          reduce using rule 76 (expression -> ID .)
    DOTSUB          reduce using rule 76 (expression -> ID .)
    DOTMUL          reduce using rule 76 (expression -> ID .)
    DOTDIV          reduce using rule 76 (expression -> ID .)
    '               reduce using rule 76 (expression -> ID .)
    ;               reduce using rule 76 (expression -> ID .)
    ,               reduce using rule 76 (expression -> ID .)
    [               shift and go to state 52


state 72

    (69) expression -> EYE ( . indexes )
    (36) indexes -> . indexes , index
    (37) indexes -> . index
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    indexes                        shift and go to state 121
    index                          shift and go to state 105
    expression                     shift and go to state 107

state 73

    (70) expression -> ONES ( . indexes )
    (36) indexes -> . indexes , index
    (37) indexes -> . index
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    indexes                        shift and go to state 122
    index                          shift and go to state 105
    expression                     shift and go to state 107

state 74

    (71) expression -> ZEROS ( . indexes )
    (36) indexes -> . indexes , index
    (37) indexes -> . index
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    indexes                        shift and go to state 123
    index                          shift and go to state 105
    expression                     shift and go to state 107

state 75

    (54) expression -> expression LESSER_THAN expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    GREATER_THAN    reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    LESSER_EQUAL    reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    GREATER_EQUAL   reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    EQUAL           reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    {               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ID              reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    IF              reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    WHILE           reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    FOR             reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    BREAK           reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    CONTINUE        reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    RETURN          reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    PRINT           reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    EYE             reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ONES            reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ZEROS           reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    (               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    INTNUM          reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    FLOATNUM        reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    STRING          reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    $end            reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    }               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    )               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ;               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ,               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    :               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ELSE            reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    ]               reduce using rule 54 (expression -> expression LESSER_THAN expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! '               [ reduce using rule 54 (expression -> expression LESSER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 76

    (55) expression -> expression GREATER_THAN expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    LESSER_EQUAL    reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    {               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ID              reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    CONTINUE        reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    EYE             reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ONES            reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ZEROS           reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    (               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    INTNUM          reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    FLOATNUM        reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    STRING          reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    }               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    )               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ;               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ,               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    :               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    ]               reduce using rule 55 (expression -> expression GREATER_THAN expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! '               [ reduce using rule 55 (expression -> expression GREATER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 77

    (56) expression -> expression LESSER_EQUAL expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    EQUAL           reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    {               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ID              reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    IF              reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    WHILE           reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    FOR             reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    BREAK           reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    CONTINUE        reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    RETURN          reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    PRINT           reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    EYE             reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ONES            reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ZEROS           reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    (               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    INTNUM          reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    FLOATNUM        reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    STRING          reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    $end            reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    }               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    )               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ;               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ,               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    :               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ELSE            reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    ]               reduce using rule 56 (expression -> expression LESSER_EQUAL expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! '               [ reduce using rule 56 (expression -> expression LESSER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 78

    (57) expression -> expression GREATER_EQUAL expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    EQUAL           reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    {               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    CONTINUE        reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    EYE             reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ONES            reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ZEROS           reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    (               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    INTNUM          reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    FLOATNUM        reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    }               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    )               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ;               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ,               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    :               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    ]               reduce using rule 57 (expression -> expression GREATER_EQUAL expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! '               [ reduce using rule 57 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 79

    (58) expression -> expression NOT_EQUAL expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    {               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    CONTINUE        reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    EYE             reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ONES            reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ZEROS           reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    (               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    INTNUM          reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    FLOATNUM        reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    }               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    )               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ;               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ,               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    :               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    ]               reduce using rule 58 (expression -> expression NOT_EQUAL expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! '               [ reduce using rule 58 (expression -> expression NOT_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 80

    (59) expression -> expression EQUAL expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 59 (expression -> expression EQUAL expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression EQUAL expression .)
    LESSER_EQUAL    reduce using rule 59 (expression -> expression EQUAL expression .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 59 (expression -> expression EQUAL expression .)
    {               reduce using rule 59 (expression -> expression EQUAL expression .)
    ID              reduce using rule 59 (expression -> expression EQUAL expression .)
    IF              reduce using rule 59 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 59 (expression -> expression EQUAL expression .)
    FOR             reduce using rule 59 (expression -> expression EQUAL expression .)
    BREAK           reduce using rule 59 (expression -> expression EQUAL expression .)
    CONTINUE        reduce using rule 59 (expression -> expression EQUAL expression .)
    RETURN          reduce using rule 59 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 59 (expression -> expression EQUAL expression .)
    EYE             reduce using rule 59 (expression -> expression EQUAL expression .)
    ONES            reduce using rule 59 (expression -> expression EQUAL expression .)
    ZEROS           reduce using rule 59 (expression -> expression EQUAL expression .)
    (               reduce using rule 59 (expression -> expression EQUAL expression .)
    INTNUM          reduce using rule 59 (expression -> expression EQUAL expression .)
    FLOATNUM        reduce using rule 59 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 59 (expression -> expression EQUAL expression .)
    $end            reduce using rule 59 (expression -> expression EQUAL expression .)
    }               reduce using rule 59 (expression -> expression EQUAL expression .)
    )               reduce using rule 59 (expression -> expression EQUAL expression .)
    ;               reduce using rule 59 (expression -> expression EQUAL expression .)
    ,               reduce using rule 59 (expression -> expression EQUAL expression .)
    :               reduce using rule 59 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 59 (expression -> expression EQUAL expression .)
    ]               reduce using rule 59 (expression -> expression EQUAL expression .)
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! +               [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! '               [ reduce using rule 59 (expression -> expression EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]


state 81

    (60) expression -> expression + expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 60 (expression -> expression + expression .)
    GREATER_THAN    reduce using rule 60 (expression -> expression + expression .)
    LESSER_EQUAL    reduce using rule 60 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 60 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 60 (expression -> expression + expression .)
    EQUAL           reduce using rule 60 (expression -> expression + expression .)
    +               reduce using rule 60 (expression -> expression + expression .)
    -               reduce using rule 60 (expression -> expression + expression .)
    DOTADD          reduce using rule 60 (expression -> expression + expression .)
    DOTSUB          reduce using rule 60 (expression -> expression + expression .)
    {               reduce using rule 60 (expression -> expression + expression .)
    ID              reduce using rule 60 (expression -> expression + expression .)
    IF              reduce using rule 60 (expression -> expression + expression .)
    WHILE           reduce using rule 60 (expression -> expression + expression .)
    FOR             reduce using rule 60 (expression -> expression + expression .)
    BREAK           reduce using rule 60 (expression -> expression + expression .)
    CONTINUE        reduce using rule 60 (expression -> expression + expression .)
    RETURN          reduce using rule 60 (expression -> expression + expression .)
    PRINT           reduce using rule 60 (expression -> expression + expression .)
    EYE             reduce using rule 60 (expression -> expression + expression .)
    ONES            reduce using rule 60 (expression -> expression + expression .)
    ZEROS           reduce using rule 60 (expression -> expression + expression .)
    (               reduce using rule 60 (expression -> expression + expression .)
    INTNUM          reduce using rule 60 (expression -> expression + expression .)
    FLOATNUM        reduce using rule 60 (expression -> expression + expression .)
    STRING          reduce using rule 60 (expression -> expression + expression .)
    $end            reduce using rule 60 (expression -> expression + expression .)
    }               reduce using rule 60 (expression -> expression + expression .)
    )               reduce using rule 60 (expression -> expression + expression .)
    ;               reduce using rule 60 (expression -> expression + expression .)
    ,               reduce using rule 60 (expression -> expression + expression .)
    :               reduce using rule 60 (expression -> expression + expression .)
    ELSE            reduce using rule 60 (expression -> expression + expression .)
    ]               reduce using rule 60 (expression -> expression + expression .)
    *               shift and go to state 39
    /               shift and go to state 40
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! *               [ reduce using rule 60 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 60 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 60 (expression -> expression + expression .) ]
  ! '               [ reduce using rule 60 (expression -> expression + expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]


state 82

    (61) expression -> expression - expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 61 (expression -> expression - expression .)
    GREATER_THAN    reduce using rule 61 (expression -> expression - expression .)
    LESSER_EQUAL    reduce using rule 61 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 61 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 61 (expression -> expression - expression .)
    EQUAL           reduce using rule 61 (expression -> expression - expression .)
    +               reduce using rule 61 (expression -> expression - expression .)
    -               reduce using rule 61 (expression -> expression - expression .)
    DOTADD          reduce using rule 61 (expression -> expression - expression .)
    DOTSUB          reduce using rule 61 (expression -> expression - expression .)
    {               reduce using rule 61 (expression -> expression - expression .)
    ID              reduce using rule 61 (expression -> expression - expression .)
    IF              reduce using rule 61 (expression -> expression - expression .)
    WHILE           reduce using rule 61 (expression -> expression - expression .)
    FOR             reduce using rule 61 (expression -> expression - expression .)
    BREAK           reduce using rule 61 (expression -> expression - expression .)
    CONTINUE        reduce using rule 61 (expression -> expression - expression .)
    RETURN          reduce using rule 61 (expression -> expression - expression .)
    PRINT           reduce using rule 61 (expression -> expression - expression .)
    EYE             reduce using rule 61 (expression -> expression - expression .)
    ONES            reduce using rule 61 (expression -> expression - expression .)
    ZEROS           reduce using rule 61 (expression -> expression - expression .)
    (               reduce using rule 61 (expression -> expression - expression .)
    INTNUM          reduce using rule 61 (expression -> expression - expression .)
    FLOATNUM        reduce using rule 61 (expression -> expression - expression .)
    STRING          reduce using rule 61 (expression -> expression - expression .)
    $end            reduce using rule 61 (expression -> expression - expression .)
    }               reduce using rule 61 (expression -> expression - expression .)
    )               reduce using rule 61 (expression -> expression - expression .)
    ;               reduce using rule 61 (expression -> expression - expression .)
    ,               reduce using rule 61 (expression -> expression - expression .)
    :               reduce using rule 61 (expression -> expression - expression .)
    ELSE            reduce using rule 61 (expression -> expression - expression .)
    ]               reduce using rule 61 (expression -> expression - expression .)
    *               shift and go to state 39
    /               shift and go to state 40
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! *               [ reduce using rule 61 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 61 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 61 (expression -> expression - expression .) ]
  ! '               [ reduce using rule 61 (expression -> expression - expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]


state 83

    (62) expression -> expression * expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 62 (expression -> expression * expression .)
    GREATER_THAN    reduce using rule 62 (expression -> expression * expression .)
    LESSER_EQUAL    reduce using rule 62 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 62 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression * expression .)
    EQUAL           reduce using rule 62 (expression -> expression * expression .)
    +               reduce using rule 62 (expression -> expression * expression .)
    -               reduce using rule 62 (expression -> expression * expression .)
    *               reduce using rule 62 (expression -> expression * expression .)
    /               reduce using rule 62 (expression -> expression * expression .)
    DOTADD          reduce using rule 62 (expression -> expression * expression .)
    DOTSUB          reduce using rule 62 (expression -> expression * expression .)
    DOTMUL          reduce using rule 62 (expression -> expression * expression .)
    DOTDIV          reduce using rule 62 (expression -> expression * expression .)
    {               reduce using rule 62 (expression -> expression * expression .)
    ID              reduce using rule 62 (expression -> expression * expression .)
    IF              reduce using rule 62 (expression -> expression * expression .)
    WHILE           reduce using rule 62 (expression -> expression * expression .)
    FOR             reduce using rule 62 (expression -> expression * expression .)
    BREAK           reduce using rule 62 (expression -> expression * expression .)
    CONTINUE        reduce using rule 62 (expression -> expression * expression .)
    RETURN          reduce using rule 62 (expression -> expression * expression .)
    PRINT           reduce using rule 62 (expression -> expression * expression .)
    EYE             reduce using rule 62 (expression -> expression * expression .)
    ONES            reduce using rule 62 (expression -> expression * expression .)
    ZEROS           reduce using rule 62 (expression -> expression * expression .)
    (               reduce using rule 62 (expression -> expression * expression .)
    INTNUM          reduce using rule 62 (expression -> expression * expression .)
    FLOATNUM        reduce using rule 62 (expression -> expression * expression .)
    STRING          reduce using rule 62 (expression -> expression * expression .)
    $end            reduce using rule 62 (expression -> expression * expression .)
    }               reduce using rule 62 (expression -> expression * expression .)
    )               reduce using rule 62 (expression -> expression * expression .)
    ;               reduce using rule 62 (expression -> expression * expression .)
    ,               reduce using rule 62 (expression -> expression * expression .)
    :               reduce using rule 62 (expression -> expression * expression .)
    ELSE            reduce using rule 62 (expression -> expression * expression .)
    ]               reduce using rule 62 (expression -> expression * expression .)
    '               shift and go to state 45

  ! '               [ reduce using rule 62 (expression -> expression * expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]


state 84

    (63) expression -> expression / expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 63 (expression -> expression / expression .)
    GREATER_THAN    reduce using rule 63 (expression -> expression / expression .)
    LESSER_EQUAL    reduce using rule 63 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 63 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression / expression .)
    EQUAL           reduce using rule 63 (expression -> expression / expression .)
    +               reduce using rule 63 (expression -> expression / expression .)
    -               reduce using rule 63 (expression -> expression / expression .)
    *               reduce using rule 63 (expression -> expression / expression .)
    /               reduce using rule 63 (expression -> expression / expression .)
    DOTADD          reduce using rule 63 (expression -> expression / expression .)
    DOTSUB          reduce using rule 63 (expression -> expression / expression .)
    DOTMUL          reduce using rule 63 (expression -> expression / expression .)
    DOTDIV          reduce using rule 63 (expression -> expression / expression .)
    {               reduce using rule 63 (expression -> expression / expression .)
    ID              reduce using rule 63 (expression -> expression / expression .)
    IF              reduce using rule 63 (expression -> expression / expression .)
    WHILE           reduce using rule 63 (expression -> expression / expression .)
    FOR             reduce using rule 63 (expression -> expression / expression .)
    BREAK           reduce using rule 63 (expression -> expression / expression .)
    CONTINUE        reduce using rule 63 (expression -> expression / expression .)
    RETURN          reduce using rule 63 (expression -> expression / expression .)
    PRINT           reduce using rule 63 (expression -> expression / expression .)
    EYE             reduce using rule 63 (expression -> expression / expression .)
    ONES            reduce using rule 63 (expression -> expression / expression .)
    ZEROS           reduce using rule 63 (expression -> expression / expression .)
    (               reduce using rule 63 (expression -> expression / expression .)
    INTNUM          reduce using rule 63 (expression -> expression / expression .)
    FLOATNUM        reduce using rule 63 (expression -> expression / expression .)
    STRING          reduce using rule 63 (expression -> expression / expression .)
    $end            reduce using rule 63 (expression -> expression / expression .)
    }               reduce using rule 63 (expression -> expression / expression .)
    )               reduce using rule 63 (expression -> expression / expression .)
    ;               reduce using rule 63 (expression -> expression / expression .)
    ,               reduce using rule 63 (expression -> expression / expression .)
    :               reduce using rule 63 (expression -> expression / expression .)
    ELSE            reduce using rule 63 (expression -> expression / expression .)
    ]               reduce using rule 63 (expression -> expression / expression .)
    '               shift and go to state 45

  ! '               [ reduce using rule 63 (expression -> expression / expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]


state 85

    (64) expression -> expression DOTADD expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 64 (expression -> expression DOTADD expression .)
    GREATER_THAN    reduce using rule 64 (expression -> expression DOTADD expression .)
    LESSER_EQUAL    reduce using rule 64 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 64 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 64 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 64 (expression -> expression DOTADD expression .)
    +               reduce using rule 64 (expression -> expression DOTADD expression .)
    -               reduce using rule 64 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 64 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 64 (expression -> expression DOTADD expression .)
    {               reduce using rule 64 (expression -> expression DOTADD expression .)
    ID              reduce using rule 64 (expression -> expression DOTADD expression .)
    IF              reduce using rule 64 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 64 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 64 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 64 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 64 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 64 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 64 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 64 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 64 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 64 (expression -> expression DOTADD expression .)
    (               reduce using rule 64 (expression -> expression DOTADD expression .)
    INTNUM          reduce using rule 64 (expression -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 64 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 64 (expression -> expression DOTADD expression .)
    $end            reduce using rule 64 (expression -> expression DOTADD expression .)
    }               reduce using rule 64 (expression -> expression DOTADD expression .)
    )               reduce using rule 64 (expression -> expression DOTADD expression .)
    ;               reduce using rule 64 (expression -> expression DOTADD expression .)
    ,               reduce using rule 64 (expression -> expression DOTADD expression .)
    :               reduce using rule 64 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 64 (expression -> expression DOTADD expression .)
    ]               reduce using rule 64 (expression -> expression DOTADD expression .)
    *               shift and go to state 39
    /               shift and go to state 40
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! *               [ reduce using rule 64 (expression -> expression DOTADD expression .) ]
  ! /               [ reduce using rule 64 (expression -> expression DOTADD expression .) ]
  ! DOTMUL          [ reduce using rule 64 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 64 (expression -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 64 (expression -> expression DOTADD expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]


state 86

    (65) expression -> expression DOTSUB expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 65 (expression -> expression DOTSUB expression .)
    GREATER_THAN    reduce using rule 65 (expression -> expression DOTSUB expression .)
    LESSER_EQUAL    reduce using rule 65 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 65 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 65 (expression -> expression DOTSUB expression .)
    +               reduce using rule 65 (expression -> expression DOTSUB expression .)
    -               reduce using rule 65 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 65 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 65 (expression -> expression DOTSUB expression .)
    {               reduce using rule 65 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 65 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 65 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 65 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 65 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 65 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 65 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 65 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 65 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 65 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 65 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 65 (expression -> expression DOTSUB expression .)
    (               reduce using rule 65 (expression -> expression DOTSUB expression .)
    INTNUM          reduce using rule 65 (expression -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 65 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 65 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 65 (expression -> expression DOTSUB expression .)
    }               reduce using rule 65 (expression -> expression DOTSUB expression .)
    )               reduce using rule 65 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 65 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 65 (expression -> expression DOTSUB expression .)
    :               reduce using rule 65 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 65 (expression -> expression DOTSUB expression .)
    ]               reduce using rule 65 (expression -> expression DOTSUB expression .)
    *               shift and go to state 39
    /               shift and go to state 40
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45

  ! *               [ reduce using rule 65 (expression -> expression DOTSUB expression .) ]
  ! /               [ reduce using rule 65 (expression -> expression DOTSUB expression .) ]
  ! DOTMUL          [ reduce using rule 65 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 65 (expression -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 65 (expression -> expression DOTSUB expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]


state 87

    (66) expression -> expression DOTMUL expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 66 (expression -> expression DOTMUL expression .)
    GREATER_THAN    reduce using rule 66 (expression -> expression DOTMUL expression .)
    LESSER_EQUAL    reduce using rule 66 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 66 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 66 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 66 (expression -> expression DOTMUL expression .)
    +               reduce using rule 66 (expression -> expression DOTMUL expression .)
    -               reduce using rule 66 (expression -> expression DOTMUL expression .)
    *               reduce using rule 66 (expression -> expression DOTMUL expression .)
    /               reduce using rule 66 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 66 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 66 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 66 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 66 (expression -> expression DOTMUL expression .)
    {               reduce using rule 66 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 66 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 66 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 66 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 66 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 66 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 66 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 66 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 66 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 66 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 66 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 66 (expression -> expression DOTMUL expression .)
    (               reduce using rule 66 (expression -> expression DOTMUL expression .)
    INTNUM          reduce using rule 66 (expression -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 66 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 66 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 66 (expression -> expression DOTMUL expression .)
    }               reduce using rule 66 (expression -> expression DOTMUL expression .)
    )               reduce using rule 66 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 66 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 66 (expression -> expression DOTMUL expression .)
    :               reduce using rule 66 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 66 (expression -> expression DOTMUL expression .)
    ]               reduce using rule 66 (expression -> expression DOTMUL expression .)
    '               shift and go to state 45

  ! '               [ reduce using rule 66 (expression -> expression DOTMUL expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]


state 88

    (67) expression -> expression DOTDIV expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    LESSER_THAN     reduce using rule 67 (expression -> expression DOTDIV expression .)
    GREATER_THAN    reduce using rule 67 (expression -> expression DOTDIV expression .)
    LESSER_EQUAL    reduce using rule 67 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 67 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 67 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 67 (expression -> expression DOTDIV expression .)
    +               reduce using rule 67 (expression -> expression DOTDIV expression .)
    -               reduce using rule 67 (expression -> expression DOTDIV expression .)
    *               reduce using rule 67 (expression -> expression DOTDIV expression .)
    /               reduce using rule 67 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 67 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 67 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 67 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 67 (expression -> expression DOTDIV expression .)
    {               reduce using rule 67 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 67 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 67 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 67 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 67 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 67 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 67 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 67 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 67 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 67 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 67 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 67 (expression -> expression DOTDIV expression .)
    (               reduce using rule 67 (expression -> expression DOTDIV expression .)
    INTNUM          reduce using rule 67 (expression -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 67 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 67 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 67 (expression -> expression DOTDIV expression .)
    }               reduce using rule 67 (expression -> expression DOTDIV expression .)
    )               reduce using rule 67 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 67 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 67 (expression -> expression DOTDIV expression .)
    :               reduce using rule 67 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 67 (expression -> expression DOTDIV expression .)
    ]               reduce using rule 67 (expression -> expression DOTDIV expression .)
    '               shift and go to state 45

  ! '               [ reduce using rule 67 (expression -> expression DOTDIV expression .) ]
  ! LESSER_THAN     [ shift and go to state 31 ]
  ! GREATER_THAN    [ shift and go to state 32 ]
  ! LESSER_EQUAL    [ shift and go to state 33 ]
  ! GREATER_EQUAL   [ shift and go to state 34 ]
  ! NOT_EQUAL       [ shift and go to state 35 ]
  ! EQUAL           [ shift and go to state 36 ]
  ! +               [ shift and go to state 37 ]
  ! -               [ shift and go to state 38 ]
  ! *               [ shift and go to state 39 ]
  ! /               [ shift and go to state 40 ]
  ! DOTADD          [ shift and go to state 41 ]
  ! DOTSUB          [ shift and go to state 42 ]
  ! DOTMUL          [ shift and go to state 43 ]
  ! DOTDIV          [ shift and go to state 44 ]


state 89

    (13) instruction -> { instructions } .

    {               reduce using rule 13 (instruction -> { instructions } .)
    ID              reduce using rule 13 (instruction -> { instructions } .)
    IF              reduce using rule 13 (instruction -> { instructions } .)
    WHILE           reduce using rule 13 (instruction -> { instructions } .)
    FOR             reduce using rule 13 (instruction -> { instructions } .)
    BREAK           reduce using rule 13 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 13 (instruction -> { instructions } .)
    RETURN          reduce using rule 13 (instruction -> { instructions } .)
    PRINT           reduce using rule 13 (instruction -> { instructions } .)
    EYE             reduce using rule 13 (instruction -> { instructions } .)
    ONES            reduce using rule 13 (instruction -> { instructions } .)
    ZEROS           reduce using rule 13 (instruction -> { instructions } .)
    (               reduce using rule 13 (instruction -> { instructions } .)
    INTNUM          reduce using rule 13 (instruction -> { instructions } .)
    FLOATNUM        reduce using rule 13 (instruction -> { instructions } .)
    STRING          reduce using rule 13 (instruction -> { instructions } .)
    $end            reduce using rule 13 (instruction -> { instructions } .)
    }               reduce using rule 13 (instruction -> { instructions } .)
    ELSE            reduce using rule 13 (instruction -> { instructions } .)


state 90

    (14) assign_instr -> ID = expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 124
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 91

    (19) assign_instr -> ID = array . ;

    ;               shift and go to state 125


state 92

    (20) assign_instr -> ID = array_reference . ;

    ;               shift and go to state 126


state 93

    (31) assign_instr -> ID = ( . - expression ) ;
    (72) expression -> ( . expression )
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    -               shift and go to state 127
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 58

state 94

    (32) array -> [ . subarrays ]
    (33) array -> [ . indexes ]
    (34) subarrays -> . subarrays , array
    (35) subarrays -> . array
    (36) indexes -> . indexes , index
    (37) indexes -> . index
    (32) array -> . [ subarrays ]
    (33) array -> . [ indexes ]
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    [               shift and go to state 94
    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    subarrays                      shift and go to state 128
    indexes                        shift and go to state 129
    array                          shift and go to state 130
    index                          shift and go to state 105
    expression                     shift and go to state 107

state 95

    (15) assign_instr -> ID PLUSASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 131
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 96

    (21) assign_instr -> ID PLUSASSIGN array_reference . ;

    ;               shift and go to state 132


state 97

    (16) assign_instr -> ID SUBASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 133
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 98

    (22) assign_instr -> ID SUBASSIGN array_reference . ;

    ;               shift and go to state 134


state 99

    (17) assign_instr -> ID MULASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 135
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 100

    (23) assign_instr -> ID MULASSIGN array_reference . ;

    ;               shift and go to state 136


state 101

    (18) assign_instr -> ID DIVASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 137
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 102

    (24) assign_instr -> ID DIVASSIGN array_reference . ;

    ;               shift and go to state 138


state 103

    (39) index -> ID .
    (76) expression -> ID .

    ]               reduce using rule 39 (index -> ID .)
    ,               reduce using rule 39 (index -> ID .)
    )               reduce using rule 39 (index -> ID .)
    :               reduce using rule 76 (expression -> ID .)
    LESSER_THAN     reduce using rule 76 (expression -> ID .)
    GREATER_THAN    reduce using rule 76 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 76 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 76 (expression -> ID .)
    NOT_EQUAL       reduce using rule 76 (expression -> ID .)
    EQUAL           reduce using rule 76 (expression -> ID .)
    +               reduce using rule 76 (expression -> ID .)
    -               reduce using rule 76 (expression -> ID .)
    *               reduce using rule 76 (expression -> ID .)
    /               reduce using rule 76 (expression -> ID .)
    DOTADD          reduce using rule 76 (expression -> ID .)
    DOTSUB          reduce using rule 76 (expression -> ID .)
    DOTMUL          reduce using rule 76 (expression -> ID .)
    DOTDIV          reduce using rule 76 (expression -> ID .)
    '               reduce using rule 76 (expression -> ID .)


state 104

    (30) array_reference -> ID [ indexes . ]
    (36) indexes -> indexes . , index

    ]               shift and go to state 139
    ,               shift and go to state 140


state 105

    (37) indexes -> index .

    ]               reduce using rule 37 (indexes -> index .)
    ,               reduce using rule 37 (indexes -> index .)
    )               reduce using rule 37 (indexes -> index .)


state 106

    (38) index -> INTNUM .
    (73) expression -> INTNUM .

    ]               reduce using rule 38 (index -> INTNUM .)
    ,               reduce using rule 38 (index -> INTNUM .)
    )               reduce using rule 38 (index -> INTNUM .)
    :               reduce using rule 73 (expression -> INTNUM .)
    LESSER_THAN     reduce using rule 73 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 73 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 73 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 73 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 73 (expression -> INTNUM .)
    EQUAL           reduce using rule 73 (expression -> INTNUM .)
    +               reduce using rule 73 (expression -> INTNUM .)
    -               reduce using rule 73 (expression -> INTNUM .)
    *               reduce using rule 73 (expression -> INTNUM .)
    /               reduce using rule 73 (expression -> INTNUM .)
    DOTADD          reduce using rule 73 (expression -> INTNUM .)
    DOTSUB          reduce using rule 73 (expression -> INTNUM .)
    DOTMUL          reduce using rule 73 (expression -> INTNUM .)
    DOTDIV          reduce using rule 73 (expression -> INTNUM .)
    '               reduce using rule 73 (expression -> INTNUM .)


state 107

    (40) index -> expression . : expression
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    :               shift and go to state 141
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 108

    (25) assign_instr -> array_reference = expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 142
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 109

    (26) assign_instr -> array_reference PLUSASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 143
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 110

    (27) assign_instr -> array_reference SUBASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 144
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 111

    (28) assign_instr -> array_reference MULASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 145
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 112

    (29) assign_instr -> array_reference DIVASSIGN expression . ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               shift and go to state 146
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 113

    (72) expression -> ( expression ) .

    LESSER_THAN     reduce using rule 72 (expression -> ( expression ) .)
    GREATER_THAN    reduce using rule 72 (expression -> ( expression ) .)
    LESSER_EQUAL    reduce using rule 72 (expression -> ( expression ) .)
    GREATER_EQUAL   reduce using rule 72 (expression -> ( expression ) .)
    NOT_EQUAL       reduce using rule 72 (expression -> ( expression ) .)
    EQUAL           reduce using rule 72 (expression -> ( expression ) .)
    +               reduce using rule 72 (expression -> ( expression ) .)
    -               reduce using rule 72 (expression -> ( expression ) .)
    *               reduce using rule 72 (expression -> ( expression ) .)
    /               reduce using rule 72 (expression -> ( expression ) .)
    DOTADD          reduce using rule 72 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 72 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 72 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 72 (expression -> ( expression ) .)
    '               reduce using rule 72 (expression -> ( expression ) .)
    {               reduce using rule 72 (expression -> ( expression ) .)
    ID              reduce using rule 72 (expression -> ( expression ) .)
    IF              reduce using rule 72 (expression -> ( expression ) .)
    WHILE           reduce using rule 72 (expression -> ( expression ) .)
    FOR             reduce using rule 72 (expression -> ( expression ) .)
    BREAK           reduce using rule 72 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 72 (expression -> ( expression ) .)
    RETURN          reduce using rule 72 (expression -> ( expression ) .)
    PRINT           reduce using rule 72 (expression -> ( expression ) .)
    EYE             reduce using rule 72 (expression -> ( expression ) .)
    ONES            reduce using rule 72 (expression -> ( expression ) .)
    ZEROS           reduce using rule 72 (expression -> ( expression ) .)
    (               reduce using rule 72 (expression -> ( expression ) .)
    INTNUM          reduce using rule 72 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 72 (expression -> ( expression ) .)
    STRING          reduce using rule 72 (expression -> ( expression ) .)
    $end            reduce using rule 72 (expression -> ( expression ) .)
    }               reduce using rule 72 (expression -> ( expression ) .)
    )               reduce using rule 72 (expression -> ( expression ) .)
    ;               reduce using rule 72 (expression -> ( expression ) .)
    ,               reduce using rule 72 (expression -> ( expression ) .)
    :               reduce using rule 72 (expression -> ( expression ) .)
    ELSE            reduce using rule 72 (expression -> ( expression ) .)
    ]               reduce using rule 72 (expression -> ( expression ) .)


state 114

    (41) if_instr -> IF ( expression . ) instruction
    (42) if_instr -> IF ( expression . ) instruction ELSE instruction
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    )               shift and go to state 147
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 115

    (43) while_instr -> WHILE ( expression . ) instruction
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    )               shift and go to state 148
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 116

    (44) for_instr -> FOR range instruction .

    {               reduce using rule 44 (for_instr -> FOR range instruction .)
    ID              reduce using rule 44 (for_instr -> FOR range instruction .)
    IF              reduce using rule 44 (for_instr -> FOR range instruction .)
    WHILE           reduce using rule 44 (for_instr -> FOR range instruction .)
    FOR             reduce using rule 44 (for_instr -> FOR range instruction .)
    BREAK           reduce using rule 44 (for_instr -> FOR range instruction .)
    CONTINUE        reduce using rule 44 (for_instr -> FOR range instruction .)
    RETURN          reduce using rule 44 (for_instr -> FOR range instruction .)
    PRINT           reduce using rule 44 (for_instr -> FOR range instruction .)
    EYE             reduce using rule 44 (for_instr -> FOR range instruction .)
    ONES            reduce using rule 44 (for_instr -> FOR range instruction .)
    ZEROS           reduce using rule 44 (for_instr -> FOR range instruction .)
    (               reduce using rule 44 (for_instr -> FOR range instruction .)
    INTNUM          reduce using rule 44 (for_instr -> FOR range instruction .)
    FLOATNUM        reduce using rule 44 (for_instr -> FOR range instruction .)
    STRING          reduce using rule 44 (for_instr -> FOR range instruction .)
    $end            reduce using rule 44 (for_instr -> FOR range instruction .)
    }               reduce using rule 44 (for_instr -> FOR range instruction .)
    ELSE            reduce using rule 44 (for_instr -> FOR range instruction .)


state 117

    (45) range -> ID = . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 149

state 118

    (49) return_instr -> RETURN expression ; .

    {               reduce using rule 49 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 49 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 49 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 49 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 49 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 49 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 49 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 49 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 49 (return_instr -> RETURN expression ; .)
    EYE             reduce using rule 49 (return_instr -> RETURN expression ; .)
    ONES            reduce using rule 49 (return_instr -> RETURN expression ; .)
    ZEROS           reduce using rule 49 (return_instr -> RETURN expression ; .)
    (               reduce using rule 49 (return_instr -> RETURN expression ; .)
    INTNUM          reduce using rule 49 (return_instr -> RETURN expression ; .)
    FLOATNUM        reduce using rule 49 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 49 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 49 (return_instr -> RETURN expression ; .)
    }               reduce using rule 49 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 49 (return_instr -> RETURN expression ; .)


state 119

    (50) print_instr -> PRINT printable ; .

    {               reduce using rule 50 (print_instr -> PRINT printable ; .)
    ID              reduce using rule 50 (print_instr -> PRINT printable ; .)
    IF              reduce using rule 50 (print_instr -> PRINT printable ; .)
    WHILE           reduce using rule 50 (print_instr -> PRINT printable ; .)
    FOR             reduce using rule 50 (print_instr -> PRINT printable ; .)
    BREAK           reduce using rule 50 (print_instr -> PRINT printable ; .)
    CONTINUE        reduce using rule 50 (print_instr -> PRINT printable ; .)
    RETURN          reduce using rule 50 (print_instr -> PRINT printable ; .)
    PRINT           reduce using rule 50 (print_instr -> PRINT printable ; .)
    EYE             reduce using rule 50 (print_instr -> PRINT printable ; .)
    ONES            reduce using rule 50 (print_instr -> PRINT printable ; .)
    ZEROS           reduce using rule 50 (print_instr -> PRINT printable ; .)
    (               reduce using rule 50 (print_instr -> PRINT printable ; .)
    INTNUM          reduce using rule 50 (print_instr -> PRINT printable ; .)
    FLOATNUM        reduce using rule 50 (print_instr -> PRINT printable ; .)
    STRING          reduce using rule 50 (print_instr -> PRINT printable ; .)
    $end            reduce using rule 50 (print_instr -> PRINT printable ; .)
    }               reduce using rule 50 (print_instr -> PRINT printable ; .)
    ELSE            reduce using rule 50 (print_instr -> PRINT printable ; .)


state 120

    (51) printable -> printable , . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 150

state 121

    (69) expression -> EYE ( indexes . )
    (36) indexes -> indexes . , index

    )               shift and go to state 151
    ,               shift and go to state 140


state 122

    (70) expression -> ONES ( indexes . )
    (36) indexes -> indexes . , index

    )               shift and go to state 152
    ,               shift and go to state 140


state 123

    (71) expression -> ZEROS ( indexes . )
    (36) indexes -> indexes . , index

    )               shift and go to state 153
    ,               shift and go to state 140


state 124

    (14) assign_instr -> ID = expression ; .

    {               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ID              reduce using rule 14 (assign_instr -> ID = expression ; .)
    IF              reduce using rule 14 (assign_instr -> ID = expression ; .)
    WHILE           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FOR             reduce using rule 14 (assign_instr -> ID = expression ; .)
    BREAK           reduce using rule 14 (assign_instr -> ID = expression ; .)
    CONTINUE        reduce using rule 14 (assign_instr -> ID = expression ; .)
    RETURN          reduce using rule 14 (assign_instr -> ID = expression ; .)
    PRINT           reduce using rule 14 (assign_instr -> ID = expression ; .)
    EYE             reduce using rule 14 (assign_instr -> ID = expression ; .)
    ONES            reduce using rule 14 (assign_instr -> ID = expression ; .)
    ZEROS           reduce using rule 14 (assign_instr -> ID = expression ; .)
    (               reduce using rule 14 (assign_instr -> ID = expression ; .)
    INTNUM          reduce using rule 14 (assign_instr -> ID = expression ; .)
    FLOATNUM        reduce using rule 14 (assign_instr -> ID = expression ; .)
    STRING          reduce using rule 14 (assign_instr -> ID = expression ; .)
    $end            reduce using rule 14 (assign_instr -> ID = expression ; .)
    }               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ELSE            reduce using rule 14 (assign_instr -> ID = expression ; .)


state 125

    (19) assign_instr -> ID = array ; .

    {               reduce using rule 19 (assign_instr -> ID = array ; .)
    ID              reduce using rule 19 (assign_instr -> ID = array ; .)
    IF              reduce using rule 19 (assign_instr -> ID = array ; .)
    WHILE           reduce using rule 19 (assign_instr -> ID = array ; .)
    FOR             reduce using rule 19 (assign_instr -> ID = array ; .)
    BREAK           reduce using rule 19 (assign_instr -> ID = array ; .)
    CONTINUE        reduce using rule 19 (assign_instr -> ID = array ; .)
    RETURN          reduce using rule 19 (assign_instr -> ID = array ; .)
    PRINT           reduce using rule 19 (assign_instr -> ID = array ; .)
    EYE             reduce using rule 19 (assign_instr -> ID = array ; .)
    ONES            reduce using rule 19 (assign_instr -> ID = array ; .)
    ZEROS           reduce using rule 19 (assign_instr -> ID = array ; .)
    (               reduce using rule 19 (assign_instr -> ID = array ; .)
    INTNUM          reduce using rule 19 (assign_instr -> ID = array ; .)
    FLOATNUM        reduce using rule 19 (assign_instr -> ID = array ; .)
    STRING          reduce using rule 19 (assign_instr -> ID = array ; .)
    $end            reduce using rule 19 (assign_instr -> ID = array ; .)
    }               reduce using rule 19 (assign_instr -> ID = array ; .)
    ELSE            reduce using rule 19 (assign_instr -> ID = array ; .)


state 126

    (20) assign_instr -> ID = array_reference ; .

    {               reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    ID              reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    IF              reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    WHILE           reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    FOR             reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    BREAK           reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    CONTINUE        reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    RETURN          reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    PRINT           reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    EYE             reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    ONES            reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    ZEROS           reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    (               reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    INTNUM          reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    FLOATNUM        reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    STRING          reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    $end            reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    }               reduce using rule 20 (assign_instr -> ID = array_reference ; .)
    ELSE            reduce using rule 20 (assign_instr -> ID = array_reference ; .)


state 127

    (31) assign_instr -> ID = ( - . expression ) ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 154

state 128

    (32) array -> [ subarrays . ]
    (34) subarrays -> subarrays . , array

    ]               shift and go to state 155
    ,               shift and go to state 156


state 129

    (33) array -> [ indexes . ]
    (36) indexes -> indexes . , index

    ]               shift and go to state 157
    ,               shift and go to state 140


state 130

    (35) subarrays -> array .

    ]               reduce using rule 35 (subarrays -> array .)
    ,               reduce using rule 35 (subarrays -> array .)


state 131

    (15) assign_instr -> ID PLUSASSIGN expression ; .

    {               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ID              reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    IF              reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    WHILE           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    FOR             reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    BREAK           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    RETURN          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    PRINT           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    EYE             reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ONES            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    (               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    STRING          reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    $end            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    }               reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)
    ELSE            reduce using rule 15 (assign_instr -> ID PLUSASSIGN expression ; .)


state 132

    (21) assign_instr -> ID PLUSASSIGN array_reference ; .

    {               reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    ID              reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    IF              reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    WHILE           reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    FOR             reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    BREAK           reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    CONTINUE        reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    RETURN          reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    PRINT           reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    EYE             reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    ONES            reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    ZEROS           reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    (               reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    INTNUM          reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    FLOATNUM        reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    STRING          reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    $end            reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    }               reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)
    ELSE            reduce using rule 21 (assign_instr -> ID PLUSASSIGN array_reference ; .)


state 133

    (16) assign_instr -> ID SUBASSIGN expression ; .

    {               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ID              reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    IF              reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    WHILE           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    FOR             reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    BREAK           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    RETURN          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    PRINT           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    EYE             reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ONES            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ZEROS           reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    (               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    INTNUM          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    STRING          reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    $end            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    }               reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)
    ELSE            reduce using rule 16 (assign_instr -> ID SUBASSIGN expression ; .)


state 134

    (22) assign_instr -> ID SUBASSIGN array_reference ; .

    {               reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    ID              reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    IF              reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    WHILE           reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    FOR             reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    BREAK           reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    CONTINUE        reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    RETURN          reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    PRINT           reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    EYE             reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    ONES            reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    ZEROS           reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    (               reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    INTNUM          reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    FLOATNUM        reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    STRING          reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    $end            reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    }               reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)
    ELSE            reduce using rule 22 (assign_instr -> ID SUBASSIGN array_reference ; .)


state 135

    (17) assign_instr -> ID MULASSIGN expression ; .

    {               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ID              reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    IF              reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    WHILE           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    FOR             reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    BREAK           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    RETURN          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    PRINT           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    EYE             reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ONES            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ZEROS           reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    (               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    INTNUM          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    STRING          reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    $end            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    }               reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)
    ELSE            reduce using rule 17 (assign_instr -> ID MULASSIGN expression ; .)


state 136

    (23) assign_instr -> ID MULASSIGN array_reference ; .

    {               reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    ID              reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    IF              reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    WHILE           reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    FOR             reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    BREAK           reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    CONTINUE        reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    RETURN          reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    PRINT           reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    EYE             reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    ONES            reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    ZEROS           reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    (               reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    INTNUM          reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    FLOATNUM        reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    STRING          reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    $end            reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    }               reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)
    ELSE            reduce using rule 23 (assign_instr -> ID MULASSIGN array_reference ; .)


state 137

    (18) assign_instr -> ID DIVASSIGN expression ; .

    {               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ID              reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    IF              reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    WHILE           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    FOR             reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    BREAK           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    RETURN          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    PRINT           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    EYE             reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ONES            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ZEROS           reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    (               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    INTNUM          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    STRING          reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    $end            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    }               reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)
    ELSE            reduce using rule 18 (assign_instr -> ID DIVASSIGN expression ; .)


state 138

    (24) assign_instr -> ID DIVASSIGN array_reference ; .

    {               reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    ID              reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    IF              reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    WHILE           reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    FOR             reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    BREAK           reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    CONTINUE        reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    RETURN          reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    PRINT           reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    EYE             reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    ONES            reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    ZEROS           reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    (               reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    INTNUM          reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    FLOATNUM        reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    STRING          reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    $end            reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    }               reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)
    ELSE            reduce using rule 24 (assign_instr -> ID DIVASSIGN array_reference ; .)


state 139

    (30) array_reference -> ID [ indexes ] .

    =               reduce using rule 30 (array_reference -> ID [ indexes ] .)
    PLUSASSIGN      reduce using rule 30 (array_reference -> ID [ indexes ] .)
    SUBASSIGN       reduce using rule 30 (array_reference -> ID [ indexes ] .)
    MULASSIGN       reduce using rule 30 (array_reference -> ID [ indexes ] .)
    DIVASSIGN       reduce using rule 30 (array_reference -> ID [ indexes ] .)
    ;               reduce using rule 30 (array_reference -> ID [ indexes ] .)
    ,               reduce using rule 30 (array_reference -> ID [ indexes ] .)


state 140

    (36) indexes -> indexes , . index
    (38) index -> . INTNUM
    (39) index -> . ID
    (40) index -> . expression : expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    INTNUM          shift and go to state 106
    ID              shift and go to state 103
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    index                          shift and go to state 158
    expression                     shift and go to state 107

state 141

    (40) index -> expression : . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 159

state 142

    (25) assign_instr -> array_reference = expression ; .

    {               reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    ID              reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    IF              reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    WHILE           reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    FOR             reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    BREAK           reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    CONTINUE        reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    RETURN          reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    PRINT           reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    EYE             reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    ONES            reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    ZEROS           reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    (               reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    INTNUM          reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    FLOATNUM        reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    STRING          reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    $end            reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    }               reduce using rule 25 (assign_instr -> array_reference = expression ; .)
    ELSE            reduce using rule 25 (assign_instr -> array_reference = expression ; .)


state 143

    (26) assign_instr -> array_reference PLUSASSIGN expression ; .

    {               reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    ID              reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    IF              reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    WHILE           reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    FOR             reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    BREAK           reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    RETURN          reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    PRINT           reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    EYE             reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    ONES            reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    (               reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    STRING          reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    $end            reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    }               reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)
    ELSE            reduce using rule 26 (assign_instr -> array_reference PLUSASSIGN expression ; .)


state 144

    (27) assign_instr -> array_reference SUBASSIGN expression ; .

    {               reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    ID              reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    IF              reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    WHILE           reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    FOR             reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    BREAK           reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    RETURN          reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    PRINT           reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    EYE             reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    ONES            reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    ZEROS           reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    (               reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    INTNUM          reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    STRING          reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    $end            reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    }               reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)
    ELSE            reduce using rule 27 (assign_instr -> array_reference SUBASSIGN expression ; .)


state 145

    (28) assign_instr -> array_reference MULASSIGN expression ; .

    {               reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    ID              reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    IF              reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    WHILE           reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    FOR             reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    BREAK           reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    CONTINUE        reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    RETURN          reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    PRINT           reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    EYE             reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    ONES            reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    ZEROS           reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    (               reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    INTNUM          reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    STRING          reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    $end            reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    }               reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)
    ELSE            reduce using rule 28 (assign_instr -> array_reference MULASSIGN expression ; .)


state 146

    (29) assign_instr -> array_reference DIVASSIGN expression ; .

    {               reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    ID              reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    IF              reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    WHILE           reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    FOR             reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    BREAK           reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    RETURN          reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    PRINT           reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    EYE             reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    ONES            reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    ZEROS           reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    (               reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    INTNUM          reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    STRING          reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    $end            reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    }               reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)
    ELSE            reduce using rule 29 (assign_instr -> array_reference DIVASSIGN expression ; .)


state 147

    (41) if_instr -> IF ( expression ) . instruction
    (42) if_instr -> IF ( expression ) . instruction ELSE instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    expression                     shift and go to state 12
    instruction                    shift and go to state 160
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    array_reference                shift and go to state 15

state 148

    (43) while_instr -> WHILE ( expression ) . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    expression                     shift and go to state 12
    instruction                    shift and go to state 161
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    array_reference                shift and go to state 15

state 149

    (45) range -> ID = expression . : expression
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    :               shift and go to state 162
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 150

    (51) printable -> printable , expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ;               reduce using rule 51 (printable -> printable , expression .)
    ,               reduce using rule 51 (printable -> printable , expression .)
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 151

    (69) expression -> EYE ( indexes ) .

    LESSER_THAN     reduce using rule 69 (expression -> EYE ( indexes ) .)
    GREATER_THAN    reduce using rule 69 (expression -> EYE ( indexes ) .)
    LESSER_EQUAL    reduce using rule 69 (expression -> EYE ( indexes ) .)
    GREATER_EQUAL   reduce using rule 69 (expression -> EYE ( indexes ) .)
    NOT_EQUAL       reduce using rule 69 (expression -> EYE ( indexes ) .)
    EQUAL           reduce using rule 69 (expression -> EYE ( indexes ) .)
    +               reduce using rule 69 (expression -> EYE ( indexes ) .)
    -               reduce using rule 69 (expression -> EYE ( indexes ) .)
    *               reduce using rule 69 (expression -> EYE ( indexes ) .)
    /               reduce using rule 69 (expression -> EYE ( indexes ) .)
    DOTADD          reduce using rule 69 (expression -> EYE ( indexes ) .)
    DOTSUB          reduce using rule 69 (expression -> EYE ( indexes ) .)
    DOTMUL          reduce using rule 69 (expression -> EYE ( indexes ) .)
    DOTDIV          reduce using rule 69 (expression -> EYE ( indexes ) .)
    '               reduce using rule 69 (expression -> EYE ( indexes ) .)
    {               reduce using rule 69 (expression -> EYE ( indexes ) .)
    ID              reduce using rule 69 (expression -> EYE ( indexes ) .)
    IF              reduce using rule 69 (expression -> EYE ( indexes ) .)
    WHILE           reduce using rule 69 (expression -> EYE ( indexes ) .)
    FOR             reduce using rule 69 (expression -> EYE ( indexes ) .)
    BREAK           reduce using rule 69 (expression -> EYE ( indexes ) .)
    CONTINUE        reduce using rule 69 (expression -> EYE ( indexes ) .)
    RETURN          reduce using rule 69 (expression -> EYE ( indexes ) .)
    PRINT           reduce using rule 69 (expression -> EYE ( indexes ) .)
    EYE             reduce using rule 69 (expression -> EYE ( indexes ) .)
    ONES            reduce using rule 69 (expression -> EYE ( indexes ) .)
    ZEROS           reduce using rule 69 (expression -> EYE ( indexes ) .)
    (               reduce using rule 69 (expression -> EYE ( indexes ) .)
    INTNUM          reduce using rule 69 (expression -> EYE ( indexes ) .)
    FLOATNUM        reduce using rule 69 (expression -> EYE ( indexes ) .)
    STRING          reduce using rule 69 (expression -> EYE ( indexes ) .)
    $end            reduce using rule 69 (expression -> EYE ( indexes ) .)
    }               reduce using rule 69 (expression -> EYE ( indexes ) .)
    )               reduce using rule 69 (expression -> EYE ( indexes ) .)
    ;               reduce using rule 69 (expression -> EYE ( indexes ) .)
    ,               reduce using rule 69 (expression -> EYE ( indexes ) .)
    :               reduce using rule 69 (expression -> EYE ( indexes ) .)
    ELSE            reduce using rule 69 (expression -> EYE ( indexes ) .)
    ]               reduce using rule 69 (expression -> EYE ( indexes ) .)


state 152

    (70) expression -> ONES ( indexes ) .

    LESSER_THAN     reduce using rule 70 (expression -> ONES ( indexes ) .)
    GREATER_THAN    reduce using rule 70 (expression -> ONES ( indexes ) .)
    LESSER_EQUAL    reduce using rule 70 (expression -> ONES ( indexes ) .)
    GREATER_EQUAL   reduce using rule 70 (expression -> ONES ( indexes ) .)
    NOT_EQUAL       reduce using rule 70 (expression -> ONES ( indexes ) .)
    EQUAL           reduce using rule 70 (expression -> ONES ( indexes ) .)
    +               reduce using rule 70 (expression -> ONES ( indexes ) .)
    -               reduce using rule 70 (expression -> ONES ( indexes ) .)
    *               reduce using rule 70 (expression -> ONES ( indexes ) .)
    /               reduce using rule 70 (expression -> ONES ( indexes ) .)
    DOTADD          reduce using rule 70 (expression -> ONES ( indexes ) .)
    DOTSUB          reduce using rule 70 (expression -> ONES ( indexes ) .)
    DOTMUL          reduce using rule 70 (expression -> ONES ( indexes ) .)
    DOTDIV          reduce using rule 70 (expression -> ONES ( indexes ) .)
    '               reduce using rule 70 (expression -> ONES ( indexes ) .)
    {               reduce using rule 70 (expression -> ONES ( indexes ) .)
    ID              reduce using rule 70 (expression -> ONES ( indexes ) .)
    IF              reduce using rule 70 (expression -> ONES ( indexes ) .)
    WHILE           reduce using rule 70 (expression -> ONES ( indexes ) .)
    FOR             reduce using rule 70 (expression -> ONES ( indexes ) .)
    BREAK           reduce using rule 70 (expression -> ONES ( indexes ) .)
    CONTINUE        reduce using rule 70 (expression -> ONES ( indexes ) .)
    RETURN          reduce using rule 70 (expression -> ONES ( indexes ) .)
    PRINT           reduce using rule 70 (expression -> ONES ( indexes ) .)
    EYE             reduce using rule 70 (expression -> ONES ( indexes ) .)
    ONES            reduce using rule 70 (expression -> ONES ( indexes ) .)
    ZEROS           reduce using rule 70 (expression -> ONES ( indexes ) .)
    (               reduce using rule 70 (expression -> ONES ( indexes ) .)
    INTNUM          reduce using rule 70 (expression -> ONES ( indexes ) .)
    FLOATNUM        reduce using rule 70 (expression -> ONES ( indexes ) .)
    STRING          reduce using rule 70 (expression -> ONES ( indexes ) .)
    $end            reduce using rule 70 (expression -> ONES ( indexes ) .)
    }               reduce using rule 70 (expression -> ONES ( indexes ) .)
    )               reduce using rule 70 (expression -> ONES ( indexes ) .)
    ;               reduce using rule 70 (expression -> ONES ( indexes ) .)
    ,               reduce using rule 70 (expression -> ONES ( indexes ) .)
    :               reduce using rule 70 (expression -> ONES ( indexes ) .)
    ELSE            reduce using rule 70 (expression -> ONES ( indexes ) .)
    ]               reduce using rule 70 (expression -> ONES ( indexes ) .)


state 153

    (71) expression -> ZEROS ( indexes ) .

    LESSER_THAN     reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    GREATER_THAN    reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    LESSER_EQUAL    reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    GREATER_EQUAL   reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    NOT_EQUAL       reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    EQUAL           reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    +               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    -               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    *               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    /               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    DOTADD          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    DOTSUB          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    DOTMUL          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    DOTDIV          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    '               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    {               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ID              reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    IF              reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    WHILE           reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    FOR             reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    BREAK           reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    CONTINUE        reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    RETURN          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    PRINT           reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    EYE             reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ONES            reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ZEROS           reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    (               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    INTNUM          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    FLOATNUM        reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    STRING          reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    $end            reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    }               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    )               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ;               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ,               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    :               reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ELSE            reduce using rule 71 (expression -> ZEROS ( indexes ) .)
    ]               reduce using rule 71 (expression -> ZEROS ( indexes ) .)


state 154

    (31) assign_instr -> ID = ( - expression . ) ;
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    )               shift and go to state 163
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 155

    (32) array -> [ subarrays ] .

    ;               reduce using rule 32 (array -> [ subarrays ] .)
    ]               reduce using rule 32 (array -> [ subarrays ] .)
    ,               reduce using rule 32 (array -> [ subarrays ] .)


state 156

    (34) subarrays -> subarrays , . array
    (32) array -> . [ subarrays ]
    (33) array -> . [ indexes ]

    [               shift and go to state 94

    array                          shift and go to state 164

state 157

    (33) array -> [ indexes ] .

    ;               reduce using rule 33 (array -> [ indexes ] .)
    ]               reduce using rule 33 (array -> [ indexes ] .)
    ,               reduce using rule 33 (array -> [ indexes ] .)


state 158

    (36) indexes -> indexes , index .

    ]               reduce using rule 36 (indexes -> indexes , index .)
    ,               reduce using rule 36 (indexes -> indexes , index .)
    )               reduce using rule 36 (indexes -> indexes , index .)


state 159

    (40) index -> expression : expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    ]               reduce using rule 40 (index -> expression : expression .)
    ,               reduce using rule 40 (index -> expression : expression .)
    )               reduce using rule 40 (index -> expression : expression .)
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 160

    (41) if_instr -> IF ( expression ) instruction .
    (42) if_instr -> IF ( expression ) instruction . ELSE instruction

    {               reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    ID              reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    IF              reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    FOR             reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    EYE             reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    ONES            reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    ZEROS           reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    (               reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    INTNUM          reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    FLOATNUM        reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    STRING          reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    $end            reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    }               reduce using rule 41 (if_instr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 165

  ! ELSE            [ reduce using rule 41 (if_instr -> IF ( expression ) instruction .) ]


state 161

    (43) while_instr -> WHILE ( expression ) instruction .

    {               reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    ID              reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    IF              reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    EYE             reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    ONES            reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    ZEROS           reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    (               reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    INTNUM          reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    FLOATNUM        reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    STRING          reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    $end            reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    }               reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 43 (while_instr -> WHILE ( expression ) instruction .)


state 162

    (45) range -> ID = expression : . expression
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID

    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29
    ID              shift and go to state 59

    expression                     shift and go to state 166

state 163

    (31) assign_instr -> ID = ( - expression ) . ;

    ;               shift and go to state 167


state 164

    (34) subarrays -> subarrays , array .

    ]               reduce using rule 34 (subarrays -> subarrays , array .)
    ,               reduce using rule 34 (subarrays -> subarrays , array .)


state 165

    (42) if_instr -> IF ( expression ) instruction ELSE . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) instruction -> . { instructions }
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID PLUSASSIGN expression ;
    (16) assign_instr -> . ID SUBASSIGN expression ;
    (17) assign_instr -> . ID MULASSIGN expression ;
    (18) assign_instr -> . ID DIVASSIGN expression ;
    (19) assign_instr -> . ID = array ;
    (20) assign_instr -> . ID = array_reference ;
    (21) assign_instr -> . ID PLUSASSIGN array_reference ;
    (22) assign_instr -> . ID SUBASSIGN array_reference ;
    (23) assign_instr -> . ID MULASSIGN array_reference ;
    (24) assign_instr -> . ID DIVASSIGN array_reference ;
    (25) assign_instr -> . array_reference = expression ;
    (26) assign_instr -> . array_reference PLUSASSIGN expression ;
    (27) assign_instr -> . array_reference SUBASSIGN expression ;
    (28) assign_instr -> . array_reference MULASSIGN expression ;
    (29) assign_instr -> . array_reference DIVASSIGN expression ;
    (31) assign_instr -> . ID = ( - expression ) ;
    (41) if_instr -> . IF ( expression ) instruction
    (42) if_instr -> . IF ( expression ) instruction ELSE instruction
    (43) while_instr -> . WHILE ( expression ) instruction
    (44) for_instr -> . FOR range instruction
    (46) break_instr -> . BREAK ;
    (47) continue_instr -> . CONTINUE ;
    (48) return_instr -> . RETURN ;
    (49) return_instr -> . RETURN expression ;
    (50) print_instr -> . PRINT printable ;
    (54) expression -> . expression LESSER_THAN expression
    (55) expression -> . expression GREATER_THAN expression
    (56) expression -> . expression LESSER_EQUAL expression
    (57) expression -> . expression GREATER_EQUAL expression
    (58) expression -> . expression NOT_EQUAL expression
    (59) expression -> . expression EQUAL expression
    (60) expression -> . expression + expression
    (61) expression -> . expression - expression
    (62) expression -> . expression * expression
    (63) expression -> . expression / expression
    (64) expression -> . expression DOTADD expression
    (65) expression -> . expression DOTSUB expression
    (66) expression -> . expression DOTMUL expression
    (67) expression -> . expression DOTDIV expression
    (68) expression -> . expression '
    (69) expression -> . EYE ( indexes )
    (70) expression -> . ONES ( indexes )
    (71) expression -> . ZEROS ( indexes )
    (72) expression -> . ( expression )
    (73) expression -> . INTNUM
    (74) expression -> . FLOATNUM
    (75) expression -> . STRING
    (76) expression -> . ID
    (30) array_reference -> . ID [ indexes ]

    {               shift and go to state 13
    ID              shift and go to state 14
    IF              shift and go to state 17
    WHILE           shift and go to state 18
    FOR             shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    RETURN          shift and go to state 22
    PRINT           shift and go to state 23
    EYE             shift and go to state 24
    ONES            shift and go to state 25
    ZEROS           shift and go to state 26
    (               shift and go to state 16
    INTNUM          shift and go to state 27
    FLOATNUM        shift and go to state 28
    STRING          shift and go to state 29

    expression                     shift and go to state 12
    instruction                    shift and go to state 168
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    array_reference                shift and go to state 15

state 166

    (45) range -> ID = expression : expression .
    (54) expression -> expression . LESSER_THAN expression
    (55) expression -> expression . GREATER_THAN expression
    (56) expression -> expression . LESSER_EQUAL expression
    (57) expression -> expression . GREATER_EQUAL expression
    (58) expression -> expression . NOT_EQUAL expression
    (59) expression -> expression . EQUAL expression
    (60) expression -> expression . + expression
    (61) expression -> expression . - expression
    (62) expression -> expression . * expression
    (63) expression -> expression . / expression
    (64) expression -> expression . DOTADD expression
    (65) expression -> expression . DOTSUB expression
    (66) expression -> expression . DOTMUL expression
    (67) expression -> expression . DOTDIV expression
    (68) expression -> expression . '

    {               reduce using rule 45 (range -> ID = expression : expression .)
    ID              reduce using rule 45 (range -> ID = expression : expression .)
    IF              reduce using rule 45 (range -> ID = expression : expression .)
    WHILE           reduce using rule 45 (range -> ID = expression : expression .)
    FOR             reduce using rule 45 (range -> ID = expression : expression .)
    BREAK           reduce using rule 45 (range -> ID = expression : expression .)
    CONTINUE        reduce using rule 45 (range -> ID = expression : expression .)
    RETURN          reduce using rule 45 (range -> ID = expression : expression .)
    PRINT           reduce using rule 45 (range -> ID = expression : expression .)
    EYE             reduce using rule 45 (range -> ID = expression : expression .)
    ONES            reduce using rule 45 (range -> ID = expression : expression .)
    ZEROS           reduce using rule 45 (range -> ID = expression : expression .)
    (               reduce using rule 45 (range -> ID = expression : expression .)
    INTNUM          reduce using rule 45 (range -> ID = expression : expression .)
    FLOATNUM        reduce using rule 45 (range -> ID = expression : expression .)
    STRING          reduce using rule 45 (range -> ID = expression : expression .)
    LESSER_THAN     shift and go to state 31
    GREATER_THAN    shift and go to state 32
    LESSER_EQUAL    shift and go to state 33
    GREATER_EQUAL   shift and go to state 34
    NOT_EQUAL       shift and go to state 35
    EQUAL           shift and go to state 36
    +               shift and go to state 37
    -               shift and go to state 38
    *               shift and go to state 39
    /               shift and go to state 40
    DOTADD          shift and go to state 41
    DOTSUB          shift and go to state 42
    DOTMUL          shift and go to state 43
    DOTDIV          shift and go to state 44
    '               shift and go to state 45


state 167

    (31) assign_instr -> ID = ( - expression ) ; .

    {               reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    ID              reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    IF              reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    WHILE           reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    FOR             reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    BREAK           reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    CONTINUE        reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    RETURN          reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    PRINT           reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    EYE             reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    ONES            reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    ZEROS           reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    (               reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    INTNUM          reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    FLOATNUM        reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    STRING          reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    $end            reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    }               reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)
    ELSE            reduce using rule 31 (assign_instr -> ID = ( - expression ) ; .)


state 168

    (42) if_instr -> IF ( expression ) instruction ELSE instruction .

    {               reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    EYE             reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ONES            reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    (               reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    STRING          reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 42 (if_instr -> IF ( expression ) instruction ELSE instruction .)

