Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instructions { instructions }
Rule 4     instructions -> instruction
Rule 5     instruction -> assign_instr
Rule 6     instruction -> if_instr
Rule 7     instruction -> while_instr
Rule 8     instruction -> for_instr
Rule 9     instruction -> break_instr
Rule 10    instruction -> continue_instr
Rule 11    instruction -> return_instr
Rule 12    instruction -> print_instr
Rule 13    instruction -> expression
Rule 14    assign_instr -> ID = expression ;
Rule 15    assign_instr -> ID = - expression ;
Rule 16    assign_instr -> ID PLUSASSIGN expression ;
Rule 17    assign_instr -> ID SUBASSIGN expression ;
Rule 18    assign_instr -> ID MULASSIGN expression ;
Rule 19    assign_instr -> ID DIVASSIGN expression ;
Rule 20    assign_instr -> ID [ indexes ] = expression ;
Rule 21    assign_instr -> ID = arrays ;
Rule 22    arrays -> [ arrays ]
Rule 23    arrays -> arrays , arrays
Rule 24    arrays -> [ indexes ]
Rule 25    indexes -> indexes , index
Rule 26    indexes -> index
Rule 27    index -> INTNUM
Rule 28    index -> ID
Rule 29    if_instr -> IF ( expression ) { instructions }
Rule 30    if_instr -> IF ( expression ) instruction
Rule 31    if_instr -> IF ( expression ) instruction ELSE instruction
Rule 32    if_instr -> IF ( expression ) instruction ELSE { instructions }
Rule 33    if_instr -> IF ( expression ) { instructions } ELSE instruction
Rule 34    if_instr -> IF ( expression ) { instructions } ELSE { instructions }
Rule 35    while_instr -> WHILE ( instruction ) instruction
Rule 36    while_instr -> WHILE ( instruction ) { instructions }
Rule 37    for_instr -> FOR range instruction
Rule 38    for_instr -> FOR range { instruction }
Rule 39    range -> ID = expression : expression
Rule 40    break_instr -> BREAK ;
Rule 41    continue_instr -> CONTINUE ;
Rule 42    return_instr -> RETURN expression ;
Rule 43    print_instr -> PRINT printable ;
Rule 44    printable -> printable , expression
Rule 45    printable -> expression
Rule 46    expression -> expression LESSER_THAN expression
Rule 47    expression -> expression GREATER_THAN expression
Rule 48    expression -> expression LESSER_EQUAL expression
Rule 49    expression -> expression GREATER_EQUAL expression
Rule 50    expression -> expression NOT_EQUAL expression
Rule 51    expression -> expression EQUAL expression
Rule 52    expression -> expression + expression
Rule 53    expression -> expression - expression
Rule 54    expression -> expression * expression
Rule 55    expression -> expression / expression
Rule 56    expression -> expression DOTADD expression
Rule 57    expression -> expression DOTSUB expression
Rule 58    expression -> expression DOTMUL expression
Rule 59    expression -> expression DOTDIV expression
Rule 60    expression -> ( expression )
Rule 61    expression -> ( - expression )
Rule 62    expression -> EYE ( expression )
Rule 63    expression -> ONES ( expression )
Rule 64    expression -> ZEROS ( expression )
Rule 65    expression -> expression '
Rule 66    expression -> FLOATNUM
Rule 67    expression -> INTNUM
Rule 68    expression -> STRING
Rule 69    expression -> ID

Terminals, with rules where they appear

'                    : 65
(                    : 29 30 31 32 33 34 35 36 60 61 62 63 64
)                    : 29 30 31 32 33 34 35 36 60 61 62 63 64
*                    : 54
+                    : 52
,                    : 23 25 44
-                    : 15 53 61
/                    : 55
:                    : 39
;                    : 14 15 16 17 18 19 20 21 40 41 42 43
=                    : 14 15 20 21 39
BREAK                : 40
CONTINUE             : 41
DIVASSIGN            : 19
DOTADD               : 56
DOTDIV               : 59
DOTMUL               : 58
DOTSUB               : 57
ELSE                 : 31 32 33 34
EQUAL                : 51
EYE                  : 62
FLOATNUM             : 66
FOR                  : 37 38
GREATER_EQUAL        : 49
GREATER_THAN         : 47
ID                   : 14 15 16 17 18 19 20 21 28 39 69
IF                   : 29 30 31 32 33 34
INTNUM               : 27 67
LESSER_EQUAL         : 48
LESSER_THAN          : 46
MULASSIGN            : 18
NOT_EQUAL            : 50
ONES                 : 63
PLUSASSIGN           : 16
PRINT                : 43
RETURN               : 42
STRING               : 68
SUBASSIGN            : 17
WHILE                : 35 36
ZEROS                : 64
[                    : 20 22 24
]                    : 20 22 24
error                : 
{                    : 3 29 32 33 34 34 36 38
}                    : 3 29 32 33 34 34 36 38

Nonterminals, with rules where they appear

arrays               : 21 22 23 23
assign_instr         : 5
break_instr          : 9
continue_instr       : 10
expression           : 13 14 15 16 17 18 19 20 29 30 31 32 33 34 39 39 42 44 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 61 62 63 64 65
for_instr            : 8
if_instr             : 6
index                : 25 26
indexes              : 20 24 25
instruction          : 2 4 30 31 31 32 33 35 35 36 37 38
instructions         : 1 2 3 3 29 32 33 34 34 36
print_instr          : 12
printable            : 43 44
program              : 0
range                : 37 38
return_instr         : 11
while_instr          : 7

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    $end            reduce using rule 1 (program -> instructions .)
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 3

    (4) instructions -> instruction .

    {               reduce using rule 4 (instructions -> instruction .)
    ID              reduce using rule 4 (instructions -> instruction .)
    IF              reduce using rule 4 (instructions -> instruction .)
    WHILE           reduce using rule 4 (instructions -> instruction .)
    FOR             reduce using rule 4 (instructions -> instruction .)
    BREAK           reduce using rule 4 (instructions -> instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instruction .)
    RETURN          reduce using rule 4 (instructions -> instruction .)
    PRINT           reduce using rule 4 (instructions -> instruction .)
    (               reduce using rule 4 (instructions -> instruction .)
    EYE             reduce using rule 4 (instructions -> instruction .)
    ONES            reduce using rule 4 (instructions -> instruction .)
    ZEROS           reduce using rule 4 (instructions -> instruction .)
    FLOATNUM        reduce using rule 4 (instructions -> instruction .)
    INTNUM          reduce using rule 4 (instructions -> instruction .)
    STRING          reduce using rule 4 (instructions -> instruction .)
    $end            reduce using rule 4 (instructions -> instruction .)
    }               reduce using rule 4 (instructions -> instruction .)


state 4

    (5) instruction -> assign_instr .

    {               reduce using rule 5 (instruction -> assign_instr .)
    ID              reduce using rule 5 (instruction -> assign_instr .)
    IF              reduce using rule 5 (instruction -> assign_instr .)
    WHILE           reduce using rule 5 (instruction -> assign_instr .)
    FOR             reduce using rule 5 (instruction -> assign_instr .)
    BREAK           reduce using rule 5 (instruction -> assign_instr .)
    CONTINUE        reduce using rule 5 (instruction -> assign_instr .)
    RETURN          reduce using rule 5 (instruction -> assign_instr .)
    PRINT           reduce using rule 5 (instruction -> assign_instr .)
    (               reduce using rule 5 (instruction -> assign_instr .)
    EYE             reduce using rule 5 (instruction -> assign_instr .)
    ONES            reduce using rule 5 (instruction -> assign_instr .)
    ZEROS           reduce using rule 5 (instruction -> assign_instr .)
    FLOATNUM        reduce using rule 5 (instruction -> assign_instr .)
    INTNUM          reduce using rule 5 (instruction -> assign_instr .)
    STRING          reduce using rule 5 (instruction -> assign_instr .)
    $end            reduce using rule 5 (instruction -> assign_instr .)
    }               reduce using rule 5 (instruction -> assign_instr .)
    )               reduce using rule 5 (instruction -> assign_instr .)
    ELSE            reduce using rule 5 (instruction -> assign_instr .)


state 5

    (6) instruction -> if_instr .

    {               reduce using rule 6 (instruction -> if_instr .)
    ID              reduce using rule 6 (instruction -> if_instr .)
    IF              reduce using rule 6 (instruction -> if_instr .)
    WHILE           reduce using rule 6 (instruction -> if_instr .)
    FOR             reduce using rule 6 (instruction -> if_instr .)
    BREAK           reduce using rule 6 (instruction -> if_instr .)
    CONTINUE        reduce using rule 6 (instruction -> if_instr .)
    RETURN          reduce using rule 6 (instruction -> if_instr .)
    PRINT           reduce using rule 6 (instruction -> if_instr .)
    (               reduce using rule 6 (instruction -> if_instr .)
    EYE             reduce using rule 6 (instruction -> if_instr .)
    ONES            reduce using rule 6 (instruction -> if_instr .)
    ZEROS           reduce using rule 6 (instruction -> if_instr .)
    FLOATNUM        reduce using rule 6 (instruction -> if_instr .)
    INTNUM          reduce using rule 6 (instruction -> if_instr .)
    STRING          reduce using rule 6 (instruction -> if_instr .)
    $end            reduce using rule 6 (instruction -> if_instr .)
    }               reduce using rule 6 (instruction -> if_instr .)
    )               reduce using rule 6 (instruction -> if_instr .)
    ELSE            reduce using rule 6 (instruction -> if_instr .)


state 6

    (7) instruction -> while_instr .

    {               reduce using rule 7 (instruction -> while_instr .)
    ID              reduce using rule 7 (instruction -> while_instr .)
    IF              reduce using rule 7 (instruction -> while_instr .)
    WHILE           reduce using rule 7 (instruction -> while_instr .)
    FOR             reduce using rule 7 (instruction -> while_instr .)
    BREAK           reduce using rule 7 (instruction -> while_instr .)
    CONTINUE        reduce using rule 7 (instruction -> while_instr .)
    RETURN          reduce using rule 7 (instruction -> while_instr .)
    PRINT           reduce using rule 7 (instruction -> while_instr .)
    (               reduce using rule 7 (instruction -> while_instr .)
    EYE             reduce using rule 7 (instruction -> while_instr .)
    ONES            reduce using rule 7 (instruction -> while_instr .)
    ZEROS           reduce using rule 7 (instruction -> while_instr .)
    FLOATNUM        reduce using rule 7 (instruction -> while_instr .)
    INTNUM          reduce using rule 7 (instruction -> while_instr .)
    STRING          reduce using rule 7 (instruction -> while_instr .)
    $end            reduce using rule 7 (instruction -> while_instr .)
    }               reduce using rule 7 (instruction -> while_instr .)
    )               reduce using rule 7 (instruction -> while_instr .)
    ELSE            reduce using rule 7 (instruction -> while_instr .)


state 7

    (8) instruction -> for_instr .

    {               reduce using rule 8 (instruction -> for_instr .)
    ID              reduce using rule 8 (instruction -> for_instr .)
    IF              reduce using rule 8 (instruction -> for_instr .)
    WHILE           reduce using rule 8 (instruction -> for_instr .)
    FOR             reduce using rule 8 (instruction -> for_instr .)
    BREAK           reduce using rule 8 (instruction -> for_instr .)
    CONTINUE        reduce using rule 8 (instruction -> for_instr .)
    RETURN          reduce using rule 8 (instruction -> for_instr .)
    PRINT           reduce using rule 8 (instruction -> for_instr .)
    (               reduce using rule 8 (instruction -> for_instr .)
    EYE             reduce using rule 8 (instruction -> for_instr .)
    ONES            reduce using rule 8 (instruction -> for_instr .)
    ZEROS           reduce using rule 8 (instruction -> for_instr .)
    FLOATNUM        reduce using rule 8 (instruction -> for_instr .)
    INTNUM          reduce using rule 8 (instruction -> for_instr .)
    STRING          reduce using rule 8 (instruction -> for_instr .)
    $end            reduce using rule 8 (instruction -> for_instr .)
    }               reduce using rule 8 (instruction -> for_instr .)
    )               reduce using rule 8 (instruction -> for_instr .)
    ELSE            reduce using rule 8 (instruction -> for_instr .)


state 8

    (9) instruction -> break_instr .

    {               reduce using rule 9 (instruction -> break_instr .)
    ID              reduce using rule 9 (instruction -> break_instr .)
    IF              reduce using rule 9 (instruction -> break_instr .)
    WHILE           reduce using rule 9 (instruction -> break_instr .)
    FOR             reduce using rule 9 (instruction -> break_instr .)
    BREAK           reduce using rule 9 (instruction -> break_instr .)
    CONTINUE        reduce using rule 9 (instruction -> break_instr .)
    RETURN          reduce using rule 9 (instruction -> break_instr .)
    PRINT           reduce using rule 9 (instruction -> break_instr .)
    (               reduce using rule 9 (instruction -> break_instr .)
    EYE             reduce using rule 9 (instruction -> break_instr .)
    ONES            reduce using rule 9 (instruction -> break_instr .)
    ZEROS           reduce using rule 9 (instruction -> break_instr .)
    FLOATNUM        reduce using rule 9 (instruction -> break_instr .)
    INTNUM          reduce using rule 9 (instruction -> break_instr .)
    STRING          reduce using rule 9 (instruction -> break_instr .)
    $end            reduce using rule 9 (instruction -> break_instr .)
    }               reduce using rule 9 (instruction -> break_instr .)
    )               reduce using rule 9 (instruction -> break_instr .)
    ELSE            reduce using rule 9 (instruction -> break_instr .)


state 9

    (10) instruction -> continue_instr .

    {               reduce using rule 10 (instruction -> continue_instr .)
    ID              reduce using rule 10 (instruction -> continue_instr .)
    IF              reduce using rule 10 (instruction -> continue_instr .)
    WHILE           reduce using rule 10 (instruction -> continue_instr .)
    FOR             reduce using rule 10 (instruction -> continue_instr .)
    BREAK           reduce using rule 10 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 10 (instruction -> continue_instr .)
    RETURN          reduce using rule 10 (instruction -> continue_instr .)
    PRINT           reduce using rule 10 (instruction -> continue_instr .)
    (               reduce using rule 10 (instruction -> continue_instr .)
    EYE             reduce using rule 10 (instruction -> continue_instr .)
    ONES            reduce using rule 10 (instruction -> continue_instr .)
    ZEROS           reduce using rule 10 (instruction -> continue_instr .)
    FLOATNUM        reduce using rule 10 (instruction -> continue_instr .)
    INTNUM          reduce using rule 10 (instruction -> continue_instr .)
    STRING          reduce using rule 10 (instruction -> continue_instr .)
    $end            reduce using rule 10 (instruction -> continue_instr .)
    }               reduce using rule 10 (instruction -> continue_instr .)
    )               reduce using rule 10 (instruction -> continue_instr .)
    ELSE            reduce using rule 10 (instruction -> continue_instr .)


state 10

    (11) instruction -> return_instr .

    {               reduce using rule 11 (instruction -> return_instr .)
    ID              reduce using rule 11 (instruction -> return_instr .)
    IF              reduce using rule 11 (instruction -> return_instr .)
    WHILE           reduce using rule 11 (instruction -> return_instr .)
    FOR             reduce using rule 11 (instruction -> return_instr .)
    BREAK           reduce using rule 11 (instruction -> return_instr .)
    CONTINUE        reduce using rule 11 (instruction -> return_instr .)
    RETURN          reduce using rule 11 (instruction -> return_instr .)
    PRINT           reduce using rule 11 (instruction -> return_instr .)
    (               reduce using rule 11 (instruction -> return_instr .)
    EYE             reduce using rule 11 (instruction -> return_instr .)
    ONES            reduce using rule 11 (instruction -> return_instr .)
    ZEROS           reduce using rule 11 (instruction -> return_instr .)
    FLOATNUM        reduce using rule 11 (instruction -> return_instr .)
    INTNUM          reduce using rule 11 (instruction -> return_instr .)
    STRING          reduce using rule 11 (instruction -> return_instr .)
    $end            reduce using rule 11 (instruction -> return_instr .)
    }               reduce using rule 11 (instruction -> return_instr .)
    )               reduce using rule 11 (instruction -> return_instr .)
    ELSE            reduce using rule 11 (instruction -> return_instr .)


state 11

    (12) instruction -> print_instr .

    {               reduce using rule 12 (instruction -> print_instr .)
    ID              reduce using rule 12 (instruction -> print_instr .)
    IF              reduce using rule 12 (instruction -> print_instr .)
    WHILE           reduce using rule 12 (instruction -> print_instr .)
    FOR             reduce using rule 12 (instruction -> print_instr .)
    BREAK           reduce using rule 12 (instruction -> print_instr .)
    CONTINUE        reduce using rule 12 (instruction -> print_instr .)
    RETURN          reduce using rule 12 (instruction -> print_instr .)
    PRINT           reduce using rule 12 (instruction -> print_instr .)
    (               reduce using rule 12 (instruction -> print_instr .)
    EYE             reduce using rule 12 (instruction -> print_instr .)
    ONES            reduce using rule 12 (instruction -> print_instr .)
    ZEROS           reduce using rule 12 (instruction -> print_instr .)
    FLOATNUM        reduce using rule 12 (instruction -> print_instr .)
    INTNUM          reduce using rule 12 (instruction -> print_instr .)
    STRING          reduce using rule 12 (instruction -> print_instr .)
    $end            reduce using rule 12 (instruction -> print_instr .)
    }               reduce using rule 12 (instruction -> print_instr .)
    )               reduce using rule 12 (instruction -> print_instr .)
    ELSE            reduce using rule 12 (instruction -> print_instr .)


state 12

    (13) instruction -> expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    {               reduce using rule 13 (instruction -> expression .)
    ID              reduce using rule 13 (instruction -> expression .)
    IF              reduce using rule 13 (instruction -> expression .)
    WHILE           reduce using rule 13 (instruction -> expression .)
    FOR             reduce using rule 13 (instruction -> expression .)
    BREAK           reduce using rule 13 (instruction -> expression .)
    CONTINUE        reduce using rule 13 (instruction -> expression .)
    RETURN          reduce using rule 13 (instruction -> expression .)
    PRINT           reduce using rule 13 (instruction -> expression .)
    (               reduce using rule 13 (instruction -> expression .)
    EYE             reduce using rule 13 (instruction -> expression .)
    ONES            reduce using rule 13 (instruction -> expression .)
    ZEROS           reduce using rule 13 (instruction -> expression .)
    FLOATNUM        reduce using rule 13 (instruction -> expression .)
    INTNUM          reduce using rule 13 (instruction -> expression .)
    STRING          reduce using rule 13 (instruction -> expression .)
    $end            reduce using rule 13 (instruction -> expression .)
    }               reduce using rule 13 (instruction -> expression .)
    )               reduce using rule 13 (instruction -> expression .)
    ELSE            reduce using rule 13 (instruction -> expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 13

    (14) assign_instr -> ID . = expression ;
    (15) assign_instr -> ID . = - expression ;
    (16) assign_instr -> ID . PLUSASSIGN expression ;
    (17) assign_instr -> ID . SUBASSIGN expression ;
    (18) assign_instr -> ID . MULASSIGN expression ;
    (19) assign_instr -> ID . DIVASSIGN expression ;
    (20) assign_instr -> ID . [ indexes ] = expression ;
    (21) assign_instr -> ID . = arrays ;
    (69) expression -> ID .

    =               shift and go to state 45
    PLUSASSIGN      shift and go to state 46
    SUBASSIGN       shift and go to state 47
    MULASSIGN       shift and go to state 48
    DIVASSIGN       shift and go to state 49
    [               shift and go to state 50
    LESSER_THAN     reduce using rule 69 (expression -> ID .)
    GREATER_THAN    reduce using rule 69 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 69 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 69 (expression -> ID .)
    NOT_EQUAL       reduce using rule 69 (expression -> ID .)
    EQUAL           reduce using rule 69 (expression -> ID .)
    +               reduce using rule 69 (expression -> ID .)
    -               reduce using rule 69 (expression -> ID .)
    *               reduce using rule 69 (expression -> ID .)
    /               reduce using rule 69 (expression -> ID .)
    DOTADD          reduce using rule 69 (expression -> ID .)
    DOTSUB          reduce using rule 69 (expression -> ID .)
    DOTMUL          reduce using rule 69 (expression -> ID .)
    DOTDIV          reduce using rule 69 (expression -> ID .)
    '               reduce using rule 69 (expression -> ID .)
    {               reduce using rule 69 (expression -> ID .)
    ID              reduce using rule 69 (expression -> ID .)
    IF              reduce using rule 69 (expression -> ID .)
    WHILE           reduce using rule 69 (expression -> ID .)
    FOR             reduce using rule 69 (expression -> ID .)
    BREAK           reduce using rule 69 (expression -> ID .)
    CONTINUE        reduce using rule 69 (expression -> ID .)
    RETURN          reduce using rule 69 (expression -> ID .)
    PRINT           reduce using rule 69 (expression -> ID .)
    (               reduce using rule 69 (expression -> ID .)
    EYE             reduce using rule 69 (expression -> ID .)
    ONES            reduce using rule 69 (expression -> ID .)
    ZEROS           reduce using rule 69 (expression -> ID .)
    FLOATNUM        reduce using rule 69 (expression -> ID .)
    INTNUM          reduce using rule 69 (expression -> ID .)
    STRING          reduce using rule 69 (expression -> ID .)
    $end            reduce using rule 69 (expression -> ID .)
    }               reduce using rule 69 (expression -> ID .)
    )               reduce using rule 69 (expression -> ID .)
    ELSE            reduce using rule 69 (expression -> ID .)


state 14

    (29) if_instr -> IF . ( expression ) { instructions }
    (30) if_instr -> IF . ( expression ) instruction
    (31) if_instr -> IF . ( expression ) instruction ELSE instruction
    (32) if_instr -> IF . ( expression ) instruction ELSE { instructions }
    (33) if_instr -> IF . ( expression ) { instructions } ELSE instruction
    (34) if_instr -> IF . ( expression ) { instructions } ELSE { instructions }

    (               shift and go to state 51


state 15

    (60) expression -> ( . expression )
    (61) expression -> ( . - expression )
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    -               shift and go to state 53
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 52

state 16

    (35) while_instr -> WHILE . ( instruction ) instruction
    (36) while_instr -> WHILE . ( instruction ) { instructions }

    (               shift and go to state 55


state 17

    (37) for_instr -> FOR . range instruction
    (38) for_instr -> FOR . range { instruction }
    (39) range -> . ID = expression : expression

    ID              shift and go to state 57

    range                          shift and go to state 56

state 18

    (40) break_instr -> BREAK . ;

    ;               shift and go to state 58


state 19

    (41) continue_instr -> CONTINUE . ;

    ;               shift and go to state 59


state 20

    (42) return_instr -> RETURN . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 60

state 21

    (43) print_instr -> PRINT . printable ;
    (44) printable -> . printable , expression
    (45) printable -> . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    printable                      shift and go to state 61
    expression                     shift and go to state 62

state 22

    (62) expression -> EYE . ( expression )

    (               shift and go to state 63


state 23

    (63) expression -> ONES . ( expression )

    (               shift and go to state 64


state 24

    (64) expression -> ZEROS . ( expression )

    (               shift and go to state 65


state 25

    (66) expression -> FLOATNUM .

    LESSER_THAN     reduce using rule 66 (expression -> FLOATNUM .)
    GREATER_THAN    reduce using rule 66 (expression -> FLOATNUM .)
    LESSER_EQUAL    reduce using rule 66 (expression -> FLOATNUM .)
    GREATER_EQUAL   reduce using rule 66 (expression -> FLOATNUM .)
    NOT_EQUAL       reduce using rule 66 (expression -> FLOATNUM .)
    EQUAL           reduce using rule 66 (expression -> FLOATNUM .)
    +               reduce using rule 66 (expression -> FLOATNUM .)
    -               reduce using rule 66 (expression -> FLOATNUM .)
    *               reduce using rule 66 (expression -> FLOATNUM .)
    /               reduce using rule 66 (expression -> FLOATNUM .)
    DOTADD          reduce using rule 66 (expression -> FLOATNUM .)
    DOTSUB          reduce using rule 66 (expression -> FLOATNUM .)
    DOTMUL          reduce using rule 66 (expression -> FLOATNUM .)
    DOTDIV          reduce using rule 66 (expression -> FLOATNUM .)
    '               reduce using rule 66 (expression -> FLOATNUM .)
    {               reduce using rule 66 (expression -> FLOATNUM .)
    ID              reduce using rule 66 (expression -> FLOATNUM .)
    IF              reduce using rule 66 (expression -> FLOATNUM .)
    WHILE           reduce using rule 66 (expression -> FLOATNUM .)
    FOR             reduce using rule 66 (expression -> FLOATNUM .)
    BREAK           reduce using rule 66 (expression -> FLOATNUM .)
    CONTINUE        reduce using rule 66 (expression -> FLOATNUM .)
    RETURN          reduce using rule 66 (expression -> FLOATNUM .)
    PRINT           reduce using rule 66 (expression -> FLOATNUM .)
    (               reduce using rule 66 (expression -> FLOATNUM .)
    EYE             reduce using rule 66 (expression -> FLOATNUM .)
    ONES            reduce using rule 66 (expression -> FLOATNUM .)
    ZEROS           reduce using rule 66 (expression -> FLOATNUM .)
    FLOATNUM        reduce using rule 66 (expression -> FLOATNUM .)
    INTNUM          reduce using rule 66 (expression -> FLOATNUM .)
    STRING          reduce using rule 66 (expression -> FLOATNUM .)
    $end            reduce using rule 66 (expression -> FLOATNUM .)
    )               reduce using rule 66 (expression -> FLOATNUM .)
    ;               reduce using rule 66 (expression -> FLOATNUM .)
    ,               reduce using rule 66 (expression -> FLOATNUM .)
    }               reduce using rule 66 (expression -> FLOATNUM .)
    ELSE            reduce using rule 66 (expression -> FLOATNUM .)
    :               reduce using rule 66 (expression -> FLOATNUM .)


state 26

    (67) expression -> INTNUM .

    LESSER_THAN     reduce using rule 67 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 67 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 67 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 67 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 67 (expression -> INTNUM .)
    EQUAL           reduce using rule 67 (expression -> INTNUM .)
    +               reduce using rule 67 (expression -> INTNUM .)
    -               reduce using rule 67 (expression -> INTNUM .)
    *               reduce using rule 67 (expression -> INTNUM .)
    /               reduce using rule 67 (expression -> INTNUM .)
    DOTADD          reduce using rule 67 (expression -> INTNUM .)
    DOTSUB          reduce using rule 67 (expression -> INTNUM .)
    DOTMUL          reduce using rule 67 (expression -> INTNUM .)
    DOTDIV          reduce using rule 67 (expression -> INTNUM .)
    '               reduce using rule 67 (expression -> INTNUM .)
    {               reduce using rule 67 (expression -> INTNUM .)
    ID              reduce using rule 67 (expression -> INTNUM .)
    IF              reduce using rule 67 (expression -> INTNUM .)
    WHILE           reduce using rule 67 (expression -> INTNUM .)
    FOR             reduce using rule 67 (expression -> INTNUM .)
    BREAK           reduce using rule 67 (expression -> INTNUM .)
    CONTINUE        reduce using rule 67 (expression -> INTNUM .)
    RETURN          reduce using rule 67 (expression -> INTNUM .)
    PRINT           reduce using rule 67 (expression -> INTNUM .)
    (               reduce using rule 67 (expression -> INTNUM .)
    EYE             reduce using rule 67 (expression -> INTNUM .)
    ONES            reduce using rule 67 (expression -> INTNUM .)
    ZEROS           reduce using rule 67 (expression -> INTNUM .)
    FLOATNUM        reduce using rule 67 (expression -> INTNUM .)
    INTNUM          reduce using rule 67 (expression -> INTNUM .)
    STRING          reduce using rule 67 (expression -> INTNUM .)
    $end            reduce using rule 67 (expression -> INTNUM .)
    )               reduce using rule 67 (expression -> INTNUM .)
    ;               reduce using rule 67 (expression -> INTNUM .)
    ,               reduce using rule 67 (expression -> INTNUM .)
    }               reduce using rule 67 (expression -> INTNUM .)
    ELSE            reduce using rule 67 (expression -> INTNUM .)
    :               reduce using rule 67 (expression -> INTNUM .)


state 27

    (68) expression -> STRING .

    LESSER_THAN     reduce using rule 68 (expression -> STRING .)
    GREATER_THAN    reduce using rule 68 (expression -> STRING .)
    LESSER_EQUAL    reduce using rule 68 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 68 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 68 (expression -> STRING .)
    EQUAL           reduce using rule 68 (expression -> STRING .)
    +               reduce using rule 68 (expression -> STRING .)
    -               reduce using rule 68 (expression -> STRING .)
    *               reduce using rule 68 (expression -> STRING .)
    /               reduce using rule 68 (expression -> STRING .)
    DOTADD          reduce using rule 68 (expression -> STRING .)
    DOTSUB          reduce using rule 68 (expression -> STRING .)
    DOTMUL          reduce using rule 68 (expression -> STRING .)
    DOTDIV          reduce using rule 68 (expression -> STRING .)
    '               reduce using rule 68 (expression -> STRING .)
    {               reduce using rule 68 (expression -> STRING .)
    ID              reduce using rule 68 (expression -> STRING .)
    IF              reduce using rule 68 (expression -> STRING .)
    WHILE           reduce using rule 68 (expression -> STRING .)
    FOR             reduce using rule 68 (expression -> STRING .)
    BREAK           reduce using rule 68 (expression -> STRING .)
    CONTINUE        reduce using rule 68 (expression -> STRING .)
    RETURN          reduce using rule 68 (expression -> STRING .)
    PRINT           reduce using rule 68 (expression -> STRING .)
    (               reduce using rule 68 (expression -> STRING .)
    EYE             reduce using rule 68 (expression -> STRING .)
    ONES            reduce using rule 68 (expression -> STRING .)
    ZEROS           reduce using rule 68 (expression -> STRING .)
    FLOATNUM        reduce using rule 68 (expression -> STRING .)
    INTNUM          reduce using rule 68 (expression -> STRING .)
    STRING          reduce using rule 68 (expression -> STRING .)
    $end            reduce using rule 68 (expression -> STRING .)
    )               reduce using rule 68 (expression -> STRING .)
    ;               reduce using rule 68 (expression -> STRING .)
    ,               reduce using rule 68 (expression -> STRING .)
    }               reduce using rule 68 (expression -> STRING .)
    ELSE            reduce using rule 68 (expression -> STRING .)
    :               reduce using rule 68 (expression -> STRING .)


state 28

    (2) instructions -> instructions instruction .

    {               reduce using rule 2 (instructions -> instructions instruction .)
    ID              reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 29

    (3) instructions -> instructions { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instructions                   shift and go to state 66
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 30

    (46) expression -> expression LESSER_THAN . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 67

state 31

    (47) expression -> expression GREATER_THAN . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 68

state 32

    (48) expression -> expression LESSER_EQUAL . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 69

state 33

    (49) expression -> expression GREATER_EQUAL . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 70

state 34

    (50) expression -> expression NOT_EQUAL . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 71

state 35

    (51) expression -> expression EQUAL . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 72

state 36

    (52) expression -> expression + . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 73

state 37

    (53) expression -> expression - . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 74

state 38

    (54) expression -> expression * . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 75

state 39

    (55) expression -> expression / . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 76

state 40

    (56) expression -> expression DOTADD . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 77

state 41

    (57) expression -> expression DOTSUB . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 78

state 42

    (58) expression -> expression DOTMUL . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 79

state 43

    (59) expression -> expression DOTDIV . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 80

state 44

    (65) expression -> expression ' .

    LESSER_THAN     reduce using rule 65 (expression -> expression ' .)
    GREATER_THAN    reduce using rule 65 (expression -> expression ' .)
    LESSER_EQUAL    reduce using rule 65 (expression -> expression ' .)
    GREATER_EQUAL   reduce using rule 65 (expression -> expression ' .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression ' .)
    EQUAL           reduce using rule 65 (expression -> expression ' .)
    +               reduce using rule 65 (expression -> expression ' .)
    -               reduce using rule 65 (expression -> expression ' .)
    *               reduce using rule 65 (expression -> expression ' .)
    /               reduce using rule 65 (expression -> expression ' .)
    DOTADD          reduce using rule 65 (expression -> expression ' .)
    DOTSUB          reduce using rule 65 (expression -> expression ' .)
    DOTMUL          reduce using rule 65 (expression -> expression ' .)
    DOTDIV          reduce using rule 65 (expression -> expression ' .)
    '               reduce using rule 65 (expression -> expression ' .)
    {               reduce using rule 65 (expression -> expression ' .)
    ID              reduce using rule 65 (expression -> expression ' .)
    IF              reduce using rule 65 (expression -> expression ' .)
    WHILE           reduce using rule 65 (expression -> expression ' .)
    FOR             reduce using rule 65 (expression -> expression ' .)
    BREAK           reduce using rule 65 (expression -> expression ' .)
    CONTINUE        reduce using rule 65 (expression -> expression ' .)
    RETURN          reduce using rule 65 (expression -> expression ' .)
    PRINT           reduce using rule 65 (expression -> expression ' .)
    (               reduce using rule 65 (expression -> expression ' .)
    EYE             reduce using rule 65 (expression -> expression ' .)
    ONES            reduce using rule 65 (expression -> expression ' .)
    ZEROS           reduce using rule 65 (expression -> expression ' .)
    FLOATNUM        reduce using rule 65 (expression -> expression ' .)
    INTNUM          reduce using rule 65 (expression -> expression ' .)
    STRING          reduce using rule 65 (expression -> expression ' .)
    $end            reduce using rule 65 (expression -> expression ' .)
    )               reduce using rule 65 (expression -> expression ' .)
    ;               reduce using rule 65 (expression -> expression ' .)
    ,               reduce using rule 65 (expression -> expression ' .)
    }               reduce using rule 65 (expression -> expression ' .)
    ELSE            reduce using rule 65 (expression -> expression ' .)
    :               reduce using rule 65 (expression -> expression ' .)


state 45

    (14) assign_instr -> ID = . expression ;
    (15) assign_instr -> ID = . - expression ;
    (21) assign_instr -> ID = . arrays ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]

    -               shift and go to state 82
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54
    [               shift and go to state 84

    expression                     shift and go to state 81
    arrays                         shift and go to state 83

state 46

    (16) assign_instr -> ID PLUSASSIGN . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 85

state 47

    (17) assign_instr -> ID SUBASSIGN . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 86

state 48

    (18) assign_instr -> ID MULASSIGN . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 87

state 49

    (19) assign_instr -> ID DIVASSIGN . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 88

state 50

    (20) assign_instr -> ID [ . indexes ] = expression ;
    (25) indexes -> . indexes , index
    (26) indexes -> . index
    (27) index -> . INTNUM
    (28) index -> . ID

    INTNUM          shift and go to state 92
    ID              shift and go to state 89

    indexes                        shift and go to state 90
    index                          shift and go to state 91

state 51

    (29) if_instr -> IF ( . expression ) { instructions }
    (30) if_instr -> IF ( . expression ) instruction
    (31) if_instr -> IF ( . expression ) instruction ELSE instruction
    (32) if_instr -> IF ( . expression ) instruction ELSE { instructions }
    (33) if_instr -> IF ( . expression ) { instructions } ELSE instruction
    (34) if_instr -> IF ( . expression ) { instructions } ELSE { instructions }
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 93

state 52

    (60) expression -> ( expression . )
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 94
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 53

    (61) expression -> ( - . expression )
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 95

state 54

    (69) expression -> ID .

    )               reduce using rule 69 (expression -> ID .)
    LESSER_THAN     reduce using rule 69 (expression -> ID .)
    GREATER_THAN    reduce using rule 69 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 69 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 69 (expression -> ID .)
    NOT_EQUAL       reduce using rule 69 (expression -> ID .)
    EQUAL           reduce using rule 69 (expression -> ID .)
    +               reduce using rule 69 (expression -> ID .)
    -               reduce using rule 69 (expression -> ID .)
    *               reduce using rule 69 (expression -> ID .)
    /               reduce using rule 69 (expression -> ID .)
    DOTADD          reduce using rule 69 (expression -> ID .)
    DOTSUB          reduce using rule 69 (expression -> ID .)
    DOTMUL          reduce using rule 69 (expression -> ID .)
    DOTDIV          reduce using rule 69 (expression -> ID .)
    '               reduce using rule 69 (expression -> ID .)
    ;               reduce using rule 69 (expression -> ID .)
    ,               reduce using rule 69 (expression -> ID .)
    {               reduce using rule 69 (expression -> ID .)
    ID              reduce using rule 69 (expression -> ID .)
    IF              reduce using rule 69 (expression -> ID .)
    WHILE           reduce using rule 69 (expression -> ID .)
    FOR             reduce using rule 69 (expression -> ID .)
    BREAK           reduce using rule 69 (expression -> ID .)
    CONTINUE        reduce using rule 69 (expression -> ID .)
    RETURN          reduce using rule 69 (expression -> ID .)
    PRINT           reduce using rule 69 (expression -> ID .)
    (               reduce using rule 69 (expression -> ID .)
    EYE             reduce using rule 69 (expression -> ID .)
    ONES            reduce using rule 69 (expression -> ID .)
    ZEROS           reduce using rule 69 (expression -> ID .)
    FLOATNUM        reduce using rule 69 (expression -> ID .)
    INTNUM          reduce using rule 69 (expression -> ID .)
    STRING          reduce using rule 69 (expression -> ID .)
    $end            reduce using rule 69 (expression -> ID .)
    }               reduce using rule 69 (expression -> ID .)
    ELSE            reduce using rule 69 (expression -> ID .)
    :               reduce using rule 69 (expression -> ID .)


state 55

    (35) while_instr -> WHILE ( . instruction ) instruction
    (36) while_instr -> WHILE ( . instruction ) { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 96
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 56

    (37) for_instr -> FOR range . instruction
    (38) for_instr -> FOR range . { instruction }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    {               shift and go to state 98
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 97
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 57

    (39) range -> ID . = expression : expression

    =               shift and go to state 99


state 58

    (40) break_instr -> BREAK ; .

    {               reduce using rule 40 (break_instr -> BREAK ; .)
    ID              reduce using rule 40 (break_instr -> BREAK ; .)
    IF              reduce using rule 40 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 40 (break_instr -> BREAK ; .)
    FOR             reduce using rule 40 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 40 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 40 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 40 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 40 (break_instr -> BREAK ; .)
    (               reduce using rule 40 (break_instr -> BREAK ; .)
    EYE             reduce using rule 40 (break_instr -> BREAK ; .)
    ONES            reduce using rule 40 (break_instr -> BREAK ; .)
    ZEROS           reduce using rule 40 (break_instr -> BREAK ; .)
    FLOATNUM        reduce using rule 40 (break_instr -> BREAK ; .)
    INTNUM          reduce using rule 40 (break_instr -> BREAK ; .)
    STRING          reduce using rule 40 (break_instr -> BREAK ; .)
    $end            reduce using rule 40 (break_instr -> BREAK ; .)
    }               reduce using rule 40 (break_instr -> BREAK ; .)
    )               reduce using rule 40 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 40 (break_instr -> BREAK ; .)


state 59

    (41) continue_instr -> CONTINUE ; .

    {               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 41 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 41 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 41 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 41 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    EYE             reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ONES            reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ZEROS           reduce using rule 41 (continue_instr -> CONTINUE ; .)
    FLOATNUM        reduce using rule 41 (continue_instr -> CONTINUE ; .)
    INTNUM          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 41 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 41 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    )               reduce using rule 41 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 41 (continue_instr -> CONTINUE ; .)


state 60

    (42) return_instr -> RETURN expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 100
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 61

    (43) print_instr -> PRINT printable . ;
    (44) printable -> printable . , expression

    ;               shift and go to state 101
    ,               shift and go to state 102


state 62

    (45) printable -> expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 45 (printable -> expression .)
    ,               reduce using rule 45 (printable -> expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 63

    (62) expression -> EYE ( . expression )
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 103

state 64

    (63) expression -> ONES ( . expression )
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 104

state 65

    (64) expression -> ZEROS ( . expression )
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 105

state 66

    (3) instructions -> instructions { instructions . }
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    }               shift and go to state 106
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 67

    (46) expression -> expression LESSER_THAN expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    LESSER_EQUAL    reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    GREATER_EQUAL   reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    EQUAL           reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    '               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    {               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ID              reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    IF              reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    WHILE           reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    FOR             reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    BREAK           reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    CONTINUE        reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    RETURN          reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    PRINT           reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    (               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    EYE             reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ONES            reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ZEROS           reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    FLOATNUM        reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    INTNUM          reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    STRING          reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    $end            reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    )               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ;               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ,               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    }               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    ELSE            reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    :               reduce using rule 46 (expression -> expression LESSER_THAN expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! -               [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! *               [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! /               [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 46 (expression -> expression LESSER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 68

    (47) expression -> expression GREATER_THAN expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    LESSER_EQUAL    reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    '               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    {               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ID              reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    CONTINUE        reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    (               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    EYE             reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ONES            reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ZEROS           reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    FLOATNUM        reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    INTNUM          reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    STRING          reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    )               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ;               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ,               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    }               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    :               reduce using rule 47 (expression -> expression GREATER_THAN expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! -               [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! *               [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 47 (expression -> expression GREATER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 69

    (48) expression -> expression LESSER_EQUAL expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    EQUAL           reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    '               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    {               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ID              reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    IF              reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    WHILE           reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    FOR             reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    BREAK           reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    CONTINUE        reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    RETURN          reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    PRINT           reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    (               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    EYE             reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ONES            reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ZEROS           reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    FLOATNUM        reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    INTNUM          reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    STRING          reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    $end            reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    )               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ;               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ,               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    }               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    ELSE            reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    :               reduce using rule 48 (expression -> expression LESSER_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! -               [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! *               [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! /               [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 48 (expression -> expression LESSER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 70

    (49) expression -> expression GREATER_EQUAL expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    EQUAL           reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    '               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    {               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    CONTINUE        reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    (               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    EYE             reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ONES            reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ZEROS           reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    FLOATNUM        reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    INTNUM          reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    )               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ;               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ,               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    }               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    :               reduce using rule 49 (expression -> expression GREATER_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! -               [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! *               [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! /               [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 49 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 71

    (50) expression -> expression NOT_EQUAL expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    '               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    {               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    CONTINUE        reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    (               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    EYE             reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ONES            reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ZEROS           reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    FLOATNUM        reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    INTNUM          reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    )               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ;               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ,               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    }               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    :               reduce using rule 50 (expression -> expression NOT_EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! -               [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! *               [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! /               [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 50 (expression -> expression NOT_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 72

    (51) expression -> expression EQUAL expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 51 (expression -> expression EQUAL expression .)
    GREATER_THAN    reduce using rule 51 (expression -> expression EQUAL expression .)
    LESSER_EQUAL    reduce using rule 51 (expression -> expression EQUAL expression .)
    GREATER_EQUAL   reduce using rule 51 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 51 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 51 (expression -> expression EQUAL expression .)
    '               reduce using rule 51 (expression -> expression EQUAL expression .)
    {               reduce using rule 51 (expression -> expression EQUAL expression .)
    ID              reduce using rule 51 (expression -> expression EQUAL expression .)
    IF              reduce using rule 51 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 51 (expression -> expression EQUAL expression .)
    FOR             reduce using rule 51 (expression -> expression EQUAL expression .)
    BREAK           reduce using rule 51 (expression -> expression EQUAL expression .)
    CONTINUE        reduce using rule 51 (expression -> expression EQUAL expression .)
    RETURN          reduce using rule 51 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 51 (expression -> expression EQUAL expression .)
    (               reduce using rule 51 (expression -> expression EQUAL expression .)
    EYE             reduce using rule 51 (expression -> expression EQUAL expression .)
    ONES            reduce using rule 51 (expression -> expression EQUAL expression .)
    ZEROS           reduce using rule 51 (expression -> expression EQUAL expression .)
    FLOATNUM        reduce using rule 51 (expression -> expression EQUAL expression .)
    INTNUM          reduce using rule 51 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 51 (expression -> expression EQUAL expression .)
    $end            reduce using rule 51 (expression -> expression EQUAL expression .)
    )               reduce using rule 51 (expression -> expression EQUAL expression .)
    ;               reduce using rule 51 (expression -> expression EQUAL expression .)
    ,               reduce using rule 51 (expression -> expression EQUAL expression .)
    }               reduce using rule 51 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 51 (expression -> expression EQUAL expression .)
    :               reduce using rule 51 (expression -> expression EQUAL expression .)
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! +               [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 51 (expression -> expression EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! '               [ shift and go to state 44 ]


state 73

    (52) expression -> expression + expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 52 (expression -> expression + expression .)
    GREATER_THAN    reduce using rule 52 (expression -> expression + expression .)
    LESSER_EQUAL    reduce using rule 52 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 52 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 52 (expression -> expression + expression .)
    EQUAL           reduce using rule 52 (expression -> expression + expression .)
    +               reduce using rule 52 (expression -> expression + expression .)
    -               reduce using rule 52 (expression -> expression + expression .)
    '               reduce using rule 52 (expression -> expression + expression .)
    {               reduce using rule 52 (expression -> expression + expression .)
    ID              reduce using rule 52 (expression -> expression + expression .)
    IF              reduce using rule 52 (expression -> expression + expression .)
    WHILE           reduce using rule 52 (expression -> expression + expression .)
    FOR             reduce using rule 52 (expression -> expression + expression .)
    BREAK           reduce using rule 52 (expression -> expression + expression .)
    CONTINUE        reduce using rule 52 (expression -> expression + expression .)
    RETURN          reduce using rule 52 (expression -> expression + expression .)
    PRINT           reduce using rule 52 (expression -> expression + expression .)
    (               reduce using rule 52 (expression -> expression + expression .)
    EYE             reduce using rule 52 (expression -> expression + expression .)
    ONES            reduce using rule 52 (expression -> expression + expression .)
    ZEROS           reduce using rule 52 (expression -> expression + expression .)
    FLOATNUM        reduce using rule 52 (expression -> expression + expression .)
    INTNUM          reduce using rule 52 (expression -> expression + expression .)
    STRING          reduce using rule 52 (expression -> expression + expression .)
    $end            reduce using rule 52 (expression -> expression + expression .)
    )               reduce using rule 52 (expression -> expression + expression .)
    ;               reduce using rule 52 (expression -> expression + expression .)
    ,               reduce using rule 52 (expression -> expression + expression .)
    }               reduce using rule 52 (expression -> expression + expression .)
    ELSE            reduce using rule 52 (expression -> expression + expression .)
    :               reduce using rule 52 (expression -> expression + expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! *               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 52 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 52 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 52 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 52 (expression -> expression + expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! '               [ shift and go to state 44 ]


state 74

    (53) expression -> expression - expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 53 (expression -> expression - expression .)
    GREATER_THAN    reduce using rule 53 (expression -> expression - expression .)
    LESSER_EQUAL    reduce using rule 53 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 53 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 53 (expression -> expression - expression .)
    EQUAL           reduce using rule 53 (expression -> expression - expression .)
    +               reduce using rule 53 (expression -> expression - expression .)
    -               reduce using rule 53 (expression -> expression - expression .)
    '               reduce using rule 53 (expression -> expression - expression .)
    {               reduce using rule 53 (expression -> expression - expression .)
    ID              reduce using rule 53 (expression -> expression - expression .)
    IF              reduce using rule 53 (expression -> expression - expression .)
    WHILE           reduce using rule 53 (expression -> expression - expression .)
    FOR             reduce using rule 53 (expression -> expression - expression .)
    BREAK           reduce using rule 53 (expression -> expression - expression .)
    CONTINUE        reduce using rule 53 (expression -> expression - expression .)
    RETURN          reduce using rule 53 (expression -> expression - expression .)
    PRINT           reduce using rule 53 (expression -> expression - expression .)
    (               reduce using rule 53 (expression -> expression - expression .)
    EYE             reduce using rule 53 (expression -> expression - expression .)
    ONES            reduce using rule 53 (expression -> expression - expression .)
    ZEROS           reduce using rule 53 (expression -> expression - expression .)
    FLOATNUM        reduce using rule 53 (expression -> expression - expression .)
    INTNUM          reduce using rule 53 (expression -> expression - expression .)
    STRING          reduce using rule 53 (expression -> expression - expression .)
    $end            reduce using rule 53 (expression -> expression - expression .)
    )               reduce using rule 53 (expression -> expression - expression .)
    ;               reduce using rule 53 (expression -> expression - expression .)
    ,               reduce using rule 53 (expression -> expression - expression .)
    }               reduce using rule 53 (expression -> expression - expression .)
    ELSE            reduce using rule 53 (expression -> expression - expression .)
    :               reduce using rule 53 (expression -> expression - expression .)
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! *               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 53 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 53 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 53 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 53 (expression -> expression - expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! '               [ shift and go to state 44 ]


state 75

    (54) expression -> expression * expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 54 (expression -> expression * expression .)
    GREATER_THAN    reduce using rule 54 (expression -> expression * expression .)
    LESSER_EQUAL    reduce using rule 54 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 54 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 54 (expression -> expression * expression .)
    EQUAL           reduce using rule 54 (expression -> expression * expression .)
    +               reduce using rule 54 (expression -> expression * expression .)
    -               reduce using rule 54 (expression -> expression * expression .)
    *               reduce using rule 54 (expression -> expression * expression .)
    /               reduce using rule 54 (expression -> expression * expression .)
    '               reduce using rule 54 (expression -> expression * expression .)
    {               reduce using rule 54 (expression -> expression * expression .)
    ID              reduce using rule 54 (expression -> expression * expression .)
    IF              reduce using rule 54 (expression -> expression * expression .)
    WHILE           reduce using rule 54 (expression -> expression * expression .)
    FOR             reduce using rule 54 (expression -> expression * expression .)
    BREAK           reduce using rule 54 (expression -> expression * expression .)
    CONTINUE        reduce using rule 54 (expression -> expression * expression .)
    RETURN          reduce using rule 54 (expression -> expression * expression .)
    PRINT           reduce using rule 54 (expression -> expression * expression .)
    (               reduce using rule 54 (expression -> expression * expression .)
    EYE             reduce using rule 54 (expression -> expression * expression .)
    ONES            reduce using rule 54 (expression -> expression * expression .)
    ZEROS           reduce using rule 54 (expression -> expression * expression .)
    FLOATNUM        reduce using rule 54 (expression -> expression * expression .)
    INTNUM          reduce using rule 54 (expression -> expression * expression .)
    STRING          reduce using rule 54 (expression -> expression * expression .)
    $end            reduce using rule 54 (expression -> expression * expression .)
    )               reduce using rule 54 (expression -> expression * expression .)
    ;               reduce using rule 54 (expression -> expression * expression .)
    ,               reduce using rule 54 (expression -> expression * expression .)
    }               reduce using rule 54 (expression -> expression * expression .)
    ELSE            reduce using rule 54 (expression -> expression * expression .)
    :               reduce using rule 54 (expression -> expression * expression .)
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! DOTADD          [ reduce using rule 54 (expression -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 54 (expression -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 54 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 54 (expression -> expression * expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! '               [ shift and go to state 44 ]


state 76

    (55) expression -> expression / expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 55 (expression -> expression / expression .)
    GREATER_THAN    reduce using rule 55 (expression -> expression / expression .)
    LESSER_EQUAL    reduce using rule 55 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 55 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 55 (expression -> expression / expression .)
    EQUAL           reduce using rule 55 (expression -> expression / expression .)
    +               reduce using rule 55 (expression -> expression / expression .)
    -               reduce using rule 55 (expression -> expression / expression .)
    *               reduce using rule 55 (expression -> expression / expression .)
    /               reduce using rule 55 (expression -> expression / expression .)
    '               reduce using rule 55 (expression -> expression / expression .)
    {               reduce using rule 55 (expression -> expression / expression .)
    ID              reduce using rule 55 (expression -> expression / expression .)
    IF              reduce using rule 55 (expression -> expression / expression .)
    WHILE           reduce using rule 55 (expression -> expression / expression .)
    FOR             reduce using rule 55 (expression -> expression / expression .)
    BREAK           reduce using rule 55 (expression -> expression / expression .)
    CONTINUE        reduce using rule 55 (expression -> expression / expression .)
    RETURN          reduce using rule 55 (expression -> expression / expression .)
    PRINT           reduce using rule 55 (expression -> expression / expression .)
    (               reduce using rule 55 (expression -> expression / expression .)
    EYE             reduce using rule 55 (expression -> expression / expression .)
    ONES            reduce using rule 55 (expression -> expression / expression .)
    ZEROS           reduce using rule 55 (expression -> expression / expression .)
    FLOATNUM        reduce using rule 55 (expression -> expression / expression .)
    INTNUM          reduce using rule 55 (expression -> expression / expression .)
    STRING          reduce using rule 55 (expression -> expression / expression .)
    $end            reduce using rule 55 (expression -> expression / expression .)
    )               reduce using rule 55 (expression -> expression / expression .)
    ;               reduce using rule 55 (expression -> expression / expression .)
    ,               reduce using rule 55 (expression -> expression / expression .)
    }               reduce using rule 55 (expression -> expression / expression .)
    ELSE            reduce using rule 55 (expression -> expression / expression .)
    :               reduce using rule 55 (expression -> expression / expression .)
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! DOTADD          [ reduce using rule 55 (expression -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 55 (expression -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 55 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 55 (expression -> expression / expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! '               [ shift and go to state 44 ]


state 77

    (56) expression -> expression DOTADD expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 56 (expression -> expression DOTADD expression .)
    GREATER_THAN    reduce using rule 56 (expression -> expression DOTADD expression .)
    LESSER_EQUAL    reduce using rule 56 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 56 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 56 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 56 (expression -> expression DOTADD expression .)
    +               reduce using rule 56 (expression -> expression DOTADD expression .)
    -               reduce using rule 56 (expression -> expression DOTADD expression .)
    *               reduce using rule 56 (expression -> expression DOTADD expression .)
    /               reduce using rule 56 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 56 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 56 (expression -> expression DOTADD expression .)
    '               reduce using rule 56 (expression -> expression DOTADD expression .)
    {               reduce using rule 56 (expression -> expression DOTADD expression .)
    ID              reduce using rule 56 (expression -> expression DOTADD expression .)
    IF              reduce using rule 56 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 56 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 56 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 56 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 56 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 56 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 56 (expression -> expression DOTADD expression .)
    (               reduce using rule 56 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 56 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 56 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 56 (expression -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 56 (expression -> expression DOTADD expression .)
    INTNUM          reduce using rule 56 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 56 (expression -> expression DOTADD expression .)
    $end            reduce using rule 56 (expression -> expression DOTADD expression .)
    )               reduce using rule 56 (expression -> expression DOTADD expression .)
    ;               reduce using rule 56 (expression -> expression DOTADD expression .)
    ,               reduce using rule 56 (expression -> expression DOTADD expression .)
    }               reduce using rule 56 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 56 (expression -> expression DOTADD expression .)
    :               reduce using rule 56 (expression -> expression DOTADD expression .)
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! DOTMUL          [ reduce using rule 56 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 56 (expression -> expression DOTADD expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! '               [ shift and go to state 44 ]


state 78

    (57) expression -> expression DOTSUB expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 57 (expression -> expression DOTSUB expression .)
    GREATER_THAN    reduce using rule 57 (expression -> expression DOTSUB expression .)
    LESSER_EQUAL    reduce using rule 57 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 57 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 57 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 57 (expression -> expression DOTSUB expression .)
    +               reduce using rule 57 (expression -> expression DOTSUB expression .)
    -               reduce using rule 57 (expression -> expression DOTSUB expression .)
    *               reduce using rule 57 (expression -> expression DOTSUB expression .)
    /               reduce using rule 57 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 57 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 57 (expression -> expression DOTSUB expression .)
    '               reduce using rule 57 (expression -> expression DOTSUB expression .)
    {               reduce using rule 57 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 57 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 57 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 57 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 57 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 57 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 57 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 57 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 57 (expression -> expression DOTSUB expression .)
    (               reduce using rule 57 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 57 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 57 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 57 (expression -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 57 (expression -> expression DOTSUB expression .)
    INTNUM          reduce using rule 57 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 57 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 57 (expression -> expression DOTSUB expression .)
    )               reduce using rule 57 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 57 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 57 (expression -> expression DOTSUB expression .)
    }               reduce using rule 57 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 57 (expression -> expression DOTSUB expression .)
    :               reduce using rule 57 (expression -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43

  ! DOTMUL          [ reduce using rule 57 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 57 (expression -> expression DOTSUB expression .) ]
  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! '               [ shift and go to state 44 ]


state 79

    (58) expression -> expression DOTMUL expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 58 (expression -> expression DOTMUL expression .)
    GREATER_THAN    reduce using rule 58 (expression -> expression DOTMUL expression .)
    LESSER_EQUAL    reduce using rule 58 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 58 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 58 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 58 (expression -> expression DOTMUL expression .)
    +               reduce using rule 58 (expression -> expression DOTMUL expression .)
    -               reduce using rule 58 (expression -> expression DOTMUL expression .)
    *               reduce using rule 58 (expression -> expression DOTMUL expression .)
    /               reduce using rule 58 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 58 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 58 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 58 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 58 (expression -> expression DOTMUL expression .)
    '               reduce using rule 58 (expression -> expression DOTMUL expression .)
    {               reduce using rule 58 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 58 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 58 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 58 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 58 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 58 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 58 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 58 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 58 (expression -> expression DOTMUL expression .)
    (               reduce using rule 58 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 58 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 58 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 58 (expression -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 58 (expression -> expression DOTMUL expression .)
    INTNUM          reduce using rule 58 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 58 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 58 (expression -> expression DOTMUL expression .)
    )               reduce using rule 58 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 58 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 58 (expression -> expression DOTMUL expression .)
    }               reduce using rule 58 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 58 (expression -> expression DOTMUL expression .)
    :               reduce using rule 58 (expression -> expression DOTMUL expression .)

  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]
  ! '               [ shift and go to state 44 ]


state 80

    (59) expression -> expression DOTDIV expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    LESSER_THAN     reduce using rule 59 (expression -> expression DOTDIV expression .)
    GREATER_THAN    reduce using rule 59 (expression -> expression DOTDIV expression .)
    LESSER_EQUAL    reduce using rule 59 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 59 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 59 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 59 (expression -> expression DOTDIV expression .)
    +               reduce using rule 59 (expression -> expression DOTDIV expression .)
    -               reduce using rule 59 (expression -> expression DOTDIV expression .)
    *               reduce using rule 59 (expression -> expression DOTDIV expression .)
    /               reduce using rule 59 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 59 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 59 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 59 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 59 (expression -> expression DOTDIV expression .)
    '               reduce using rule 59 (expression -> expression DOTDIV expression .)
    {               reduce using rule 59 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 59 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 59 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 59 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 59 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 59 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 59 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 59 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 59 (expression -> expression DOTDIV expression .)
    (               reduce using rule 59 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 59 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 59 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 59 (expression -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 59 (expression -> expression DOTDIV expression .)
    INTNUM          reduce using rule 59 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 59 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 59 (expression -> expression DOTDIV expression .)
    )               reduce using rule 59 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 59 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 59 (expression -> expression DOTDIV expression .)
    }               reduce using rule 59 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 59 (expression -> expression DOTDIV expression .)
    :               reduce using rule 59 (expression -> expression DOTDIV expression .)

  ! LESSER_THAN     [ shift and go to state 30 ]
  ! GREATER_THAN    [ shift and go to state 31 ]
  ! LESSER_EQUAL    [ shift and go to state 32 ]
  ! GREATER_EQUAL   [ shift and go to state 33 ]
  ! NOT_EQUAL       [ shift and go to state 34 ]
  ! EQUAL           [ shift and go to state 35 ]
  ! +               [ shift and go to state 36 ]
  ! -               [ shift and go to state 37 ]
  ! *               [ shift and go to state 38 ]
  ! /               [ shift and go to state 39 ]
  ! DOTADD          [ shift and go to state 40 ]
  ! DOTSUB          [ shift and go to state 41 ]
  ! DOTMUL          [ shift and go to state 42 ]
  ! DOTDIV          [ shift and go to state 43 ]
  ! '               [ shift and go to state 44 ]


state 81

    (14) assign_instr -> ID = expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 107
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 82

    (15) assign_instr -> ID = - . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 108

state 83

    (21) assign_instr -> ID = arrays . ;
    (23) arrays -> arrays . , arrays

    ;               shift and go to state 109
    ,               shift and go to state 110


state 84

    (22) arrays -> [ . arrays ]
    (24) arrays -> [ . indexes ]
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]
    (25) indexes -> . indexes , index
    (26) indexes -> . index
    (27) index -> . INTNUM
    (28) index -> . ID

    [               shift and go to state 84
    INTNUM          shift and go to state 92
    ID              shift and go to state 89

    arrays                         shift and go to state 111
    indexes                        shift and go to state 112
    index                          shift and go to state 91

state 85

    (16) assign_instr -> ID PLUSASSIGN expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 113
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 86

    (17) assign_instr -> ID SUBASSIGN expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 114
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 87

    (18) assign_instr -> ID MULASSIGN expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 115
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 88

    (19) assign_instr -> ID DIVASSIGN expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 116
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 89

    (28) index -> ID .

    ]               reduce using rule 28 (index -> ID .)
    ,               reduce using rule 28 (index -> ID .)


state 90

    (20) assign_instr -> ID [ indexes . ] = expression ;
    (25) indexes -> indexes . , index

    ]               shift and go to state 117
    ,               shift and go to state 118


state 91

    (26) indexes -> index .

    ]               reduce using rule 26 (indexes -> index .)
    ,               reduce using rule 26 (indexes -> index .)


state 92

    (27) index -> INTNUM .

    ]               reduce using rule 27 (index -> INTNUM .)
    ,               reduce using rule 27 (index -> INTNUM .)


state 93

    (29) if_instr -> IF ( expression . ) { instructions }
    (30) if_instr -> IF ( expression . ) instruction
    (31) if_instr -> IF ( expression . ) instruction ELSE instruction
    (32) if_instr -> IF ( expression . ) instruction ELSE { instructions }
    (33) if_instr -> IF ( expression . ) { instructions } ELSE instruction
    (34) if_instr -> IF ( expression . ) { instructions } ELSE { instructions }
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 119
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 94

    (60) expression -> ( expression ) .

    LESSER_THAN     reduce using rule 60 (expression -> ( expression ) .)
    GREATER_THAN    reduce using rule 60 (expression -> ( expression ) .)
    LESSER_EQUAL    reduce using rule 60 (expression -> ( expression ) .)
    GREATER_EQUAL   reduce using rule 60 (expression -> ( expression ) .)
    NOT_EQUAL       reduce using rule 60 (expression -> ( expression ) .)
    EQUAL           reduce using rule 60 (expression -> ( expression ) .)
    +               reduce using rule 60 (expression -> ( expression ) .)
    -               reduce using rule 60 (expression -> ( expression ) .)
    *               reduce using rule 60 (expression -> ( expression ) .)
    /               reduce using rule 60 (expression -> ( expression ) .)
    DOTADD          reduce using rule 60 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 60 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 60 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 60 (expression -> ( expression ) .)
    '               reduce using rule 60 (expression -> ( expression ) .)
    {               reduce using rule 60 (expression -> ( expression ) .)
    ID              reduce using rule 60 (expression -> ( expression ) .)
    IF              reduce using rule 60 (expression -> ( expression ) .)
    WHILE           reduce using rule 60 (expression -> ( expression ) .)
    FOR             reduce using rule 60 (expression -> ( expression ) .)
    BREAK           reduce using rule 60 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 60 (expression -> ( expression ) .)
    RETURN          reduce using rule 60 (expression -> ( expression ) .)
    PRINT           reduce using rule 60 (expression -> ( expression ) .)
    (               reduce using rule 60 (expression -> ( expression ) .)
    EYE             reduce using rule 60 (expression -> ( expression ) .)
    ONES            reduce using rule 60 (expression -> ( expression ) .)
    ZEROS           reduce using rule 60 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 60 (expression -> ( expression ) .)
    INTNUM          reduce using rule 60 (expression -> ( expression ) .)
    STRING          reduce using rule 60 (expression -> ( expression ) .)
    $end            reduce using rule 60 (expression -> ( expression ) .)
    )               reduce using rule 60 (expression -> ( expression ) .)
    ;               reduce using rule 60 (expression -> ( expression ) .)
    ,               reduce using rule 60 (expression -> ( expression ) .)
    }               reduce using rule 60 (expression -> ( expression ) .)
    ELSE            reduce using rule 60 (expression -> ( expression ) .)
    :               reduce using rule 60 (expression -> ( expression ) .)


state 95

    (61) expression -> ( - expression . )
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 120
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 96

    (35) while_instr -> WHILE ( instruction . ) instruction
    (36) while_instr -> WHILE ( instruction . ) { instructions }

    )               shift and go to state 121


state 97

    (37) for_instr -> FOR range instruction .

    {               reduce using rule 37 (for_instr -> FOR range instruction .)
    ID              reduce using rule 37 (for_instr -> FOR range instruction .)
    IF              reduce using rule 37 (for_instr -> FOR range instruction .)
    WHILE           reduce using rule 37 (for_instr -> FOR range instruction .)
    FOR             reduce using rule 37 (for_instr -> FOR range instruction .)
    BREAK           reduce using rule 37 (for_instr -> FOR range instruction .)
    CONTINUE        reduce using rule 37 (for_instr -> FOR range instruction .)
    RETURN          reduce using rule 37 (for_instr -> FOR range instruction .)
    PRINT           reduce using rule 37 (for_instr -> FOR range instruction .)
    (               reduce using rule 37 (for_instr -> FOR range instruction .)
    EYE             reduce using rule 37 (for_instr -> FOR range instruction .)
    ONES            reduce using rule 37 (for_instr -> FOR range instruction .)
    ZEROS           reduce using rule 37 (for_instr -> FOR range instruction .)
    FLOATNUM        reduce using rule 37 (for_instr -> FOR range instruction .)
    INTNUM          reduce using rule 37 (for_instr -> FOR range instruction .)
    STRING          reduce using rule 37 (for_instr -> FOR range instruction .)
    $end            reduce using rule 37 (for_instr -> FOR range instruction .)
    }               reduce using rule 37 (for_instr -> FOR range instruction .)
    )               reduce using rule 37 (for_instr -> FOR range instruction .)
    ELSE            reduce using rule 37 (for_instr -> FOR range instruction .)


state 98

    (38) for_instr -> FOR range { . instruction }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 122
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 99

    (39) range -> ID = . expression : expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 123

state 100

    (42) return_instr -> RETURN expression ; .

    {               reduce using rule 42 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 42 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 42 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 42 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 42 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 42 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 42 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 42 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 42 (return_instr -> RETURN expression ; .)
    (               reduce using rule 42 (return_instr -> RETURN expression ; .)
    EYE             reduce using rule 42 (return_instr -> RETURN expression ; .)
    ONES            reduce using rule 42 (return_instr -> RETURN expression ; .)
    ZEROS           reduce using rule 42 (return_instr -> RETURN expression ; .)
    FLOATNUM        reduce using rule 42 (return_instr -> RETURN expression ; .)
    INTNUM          reduce using rule 42 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 42 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 42 (return_instr -> RETURN expression ; .)
    }               reduce using rule 42 (return_instr -> RETURN expression ; .)
    )               reduce using rule 42 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 42 (return_instr -> RETURN expression ; .)


state 101

    (43) print_instr -> PRINT printable ; .

    {               reduce using rule 43 (print_instr -> PRINT printable ; .)
    ID              reduce using rule 43 (print_instr -> PRINT printable ; .)
    IF              reduce using rule 43 (print_instr -> PRINT printable ; .)
    WHILE           reduce using rule 43 (print_instr -> PRINT printable ; .)
    FOR             reduce using rule 43 (print_instr -> PRINT printable ; .)
    BREAK           reduce using rule 43 (print_instr -> PRINT printable ; .)
    CONTINUE        reduce using rule 43 (print_instr -> PRINT printable ; .)
    RETURN          reduce using rule 43 (print_instr -> PRINT printable ; .)
    PRINT           reduce using rule 43 (print_instr -> PRINT printable ; .)
    (               reduce using rule 43 (print_instr -> PRINT printable ; .)
    EYE             reduce using rule 43 (print_instr -> PRINT printable ; .)
    ONES            reduce using rule 43 (print_instr -> PRINT printable ; .)
    ZEROS           reduce using rule 43 (print_instr -> PRINT printable ; .)
    FLOATNUM        reduce using rule 43 (print_instr -> PRINT printable ; .)
    INTNUM          reduce using rule 43 (print_instr -> PRINT printable ; .)
    STRING          reduce using rule 43 (print_instr -> PRINT printable ; .)
    $end            reduce using rule 43 (print_instr -> PRINT printable ; .)
    }               reduce using rule 43 (print_instr -> PRINT printable ; .)
    )               reduce using rule 43 (print_instr -> PRINT printable ; .)
    ELSE            reduce using rule 43 (print_instr -> PRINT printable ; .)


state 102

    (44) printable -> printable , . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 124

state 103

    (62) expression -> EYE ( expression . )
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 125
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 104

    (63) expression -> ONES ( expression . )
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 126
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 105

    (64) expression -> ZEROS ( expression . )
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    )               shift and go to state 127
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 106

    (3) instructions -> instructions { instructions } .

    {               reduce using rule 3 (instructions -> instructions { instructions } .)
    ID              reduce using rule 3 (instructions -> instructions { instructions } .)
    IF              reduce using rule 3 (instructions -> instructions { instructions } .)
    WHILE           reduce using rule 3 (instructions -> instructions { instructions } .)
    FOR             reduce using rule 3 (instructions -> instructions { instructions } .)
    BREAK           reduce using rule 3 (instructions -> instructions { instructions } .)
    CONTINUE        reduce using rule 3 (instructions -> instructions { instructions } .)
    RETURN          reduce using rule 3 (instructions -> instructions { instructions } .)
    PRINT           reduce using rule 3 (instructions -> instructions { instructions } .)
    (               reduce using rule 3 (instructions -> instructions { instructions } .)
    EYE             reduce using rule 3 (instructions -> instructions { instructions } .)
    ONES            reduce using rule 3 (instructions -> instructions { instructions } .)
    ZEROS           reduce using rule 3 (instructions -> instructions { instructions } .)
    FLOATNUM        reduce using rule 3 (instructions -> instructions { instructions } .)
    INTNUM          reduce using rule 3 (instructions -> instructions { instructions } .)
    STRING          reduce using rule 3 (instructions -> instructions { instructions } .)
    $end            reduce using rule 3 (instructions -> instructions { instructions } .)
    }               reduce using rule 3 (instructions -> instructions { instructions } .)


state 107

    (14) assign_instr -> ID = expression ; .

    {               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ID              reduce using rule 14 (assign_instr -> ID = expression ; .)
    IF              reduce using rule 14 (assign_instr -> ID = expression ; .)
    WHILE           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FOR             reduce using rule 14 (assign_instr -> ID = expression ; .)
    BREAK           reduce using rule 14 (assign_instr -> ID = expression ; .)
    CONTINUE        reduce using rule 14 (assign_instr -> ID = expression ; .)
    RETURN          reduce using rule 14 (assign_instr -> ID = expression ; .)
    PRINT           reduce using rule 14 (assign_instr -> ID = expression ; .)
    (               reduce using rule 14 (assign_instr -> ID = expression ; .)
    EYE             reduce using rule 14 (assign_instr -> ID = expression ; .)
    ONES            reduce using rule 14 (assign_instr -> ID = expression ; .)
    ZEROS           reduce using rule 14 (assign_instr -> ID = expression ; .)
    FLOATNUM        reduce using rule 14 (assign_instr -> ID = expression ; .)
    INTNUM          reduce using rule 14 (assign_instr -> ID = expression ; .)
    STRING          reduce using rule 14 (assign_instr -> ID = expression ; .)
    $end            reduce using rule 14 (assign_instr -> ID = expression ; .)
    }               reduce using rule 14 (assign_instr -> ID = expression ; .)
    )               reduce using rule 14 (assign_instr -> ID = expression ; .)
    ELSE            reduce using rule 14 (assign_instr -> ID = expression ; .)


state 108

    (15) assign_instr -> ID = - expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 128
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 109

    (21) assign_instr -> ID = arrays ; .

    {               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ID              reduce using rule 21 (assign_instr -> ID = arrays ; .)
    IF              reduce using rule 21 (assign_instr -> ID = arrays ; .)
    WHILE           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    FOR             reduce using rule 21 (assign_instr -> ID = arrays ; .)
    BREAK           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    CONTINUE        reduce using rule 21 (assign_instr -> ID = arrays ; .)
    RETURN          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    PRINT           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    (               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    EYE             reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ONES            reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ZEROS           reduce using rule 21 (assign_instr -> ID = arrays ; .)
    FLOATNUM        reduce using rule 21 (assign_instr -> ID = arrays ; .)
    INTNUM          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    STRING          reduce using rule 21 (assign_instr -> ID = arrays ; .)
    $end            reduce using rule 21 (assign_instr -> ID = arrays ; .)
    }               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    )               reduce using rule 21 (assign_instr -> ID = arrays ; .)
    ELSE            reduce using rule 21 (assign_instr -> ID = arrays ; .)


state 110

    (23) arrays -> arrays , . arrays
    (22) arrays -> . [ arrays ]
    (23) arrays -> . arrays , arrays
    (24) arrays -> . [ indexes ]

    [               shift and go to state 84

    arrays                         shift and go to state 129

state 111

    (22) arrays -> [ arrays . ]
    (23) arrays -> arrays . , arrays

    ]               shift and go to state 130
    ,               shift and go to state 110


state 112

    (24) arrays -> [ indexes . ]
    (25) indexes -> indexes . , index

    ]               shift and go to state 131
    ,               shift and go to state 118


state 113

    (16) assign_instr -> ID PLUSASSIGN expression ; .

    {               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ID              reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    IF              reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    WHILE           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    FOR             reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    BREAK           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    RETURN          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    PRINT           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    (               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    EYE             reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ONES            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    STRING          reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    $end            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    }               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    )               reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)
    ELSE            reduce using rule 16 (assign_instr -> ID PLUSASSIGN expression ; .)


state 114

    (17) assign_instr -> ID SUBASSIGN expression ; .

    {               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ID              reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    IF              reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    WHILE           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    FOR             reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    BREAK           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    RETURN          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    PRINT           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    (               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    EYE             reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ONES            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ZEROS           reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    INTNUM          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    STRING          reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    $end            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    }               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    )               reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)
    ELSE            reduce using rule 17 (assign_instr -> ID SUBASSIGN expression ; .)


state 115

    (18) assign_instr -> ID MULASSIGN expression ; .

    {               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ID              reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    IF              reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    WHILE           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    FOR             reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    BREAK           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    CONTINUE        reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    RETURN          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    PRINT           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    (               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    EYE             reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ONES            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ZEROS           reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    INTNUM          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    STRING          reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    $end            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    }               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    )               reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)
    ELSE            reduce using rule 18 (assign_instr -> ID MULASSIGN expression ; .)


state 116

    (19) assign_instr -> ID DIVASSIGN expression ; .

    {               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ID              reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    IF              reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    WHILE           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    FOR             reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    BREAK           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    RETURN          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    PRINT           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    (               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    EYE             reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ONES            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ZEROS           reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    INTNUM          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    STRING          reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    $end            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    }               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    )               reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)
    ELSE            reduce using rule 19 (assign_instr -> ID DIVASSIGN expression ; .)


state 117

    (20) assign_instr -> ID [ indexes ] . = expression ;

    =               shift and go to state 132


state 118

    (25) indexes -> indexes , . index
    (27) index -> . INTNUM
    (28) index -> . ID

    INTNUM          shift and go to state 92
    ID              shift and go to state 89

    index                          shift and go to state 133

state 119

    (29) if_instr -> IF ( expression ) . { instructions }
    (30) if_instr -> IF ( expression ) . instruction
    (31) if_instr -> IF ( expression ) . instruction ELSE instruction
    (32) if_instr -> IF ( expression ) . instruction ELSE { instructions }
    (33) if_instr -> IF ( expression ) . { instructions } ELSE instruction
    (34) if_instr -> IF ( expression ) . { instructions } ELSE { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    {               shift and go to state 134
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 135
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 120

    (61) expression -> ( - expression ) .

    LESSER_THAN     reduce using rule 61 (expression -> ( - expression ) .)
    GREATER_THAN    reduce using rule 61 (expression -> ( - expression ) .)
    LESSER_EQUAL    reduce using rule 61 (expression -> ( - expression ) .)
    GREATER_EQUAL   reduce using rule 61 (expression -> ( - expression ) .)
    NOT_EQUAL       reduce using rule 61 (expression -> ( - expression ) .)
    EQUAL           reduce using rule 61 (expression -> ( - expression ) .)
    +               reduce using rule 61 (expression -> ( - expression ) .)
    -               reduce using rule 61 (expression -> ( - expression ) .)
    *               reduce using rule 61 (expression -> ( - expression ) .)
    /               reduce using rule 61 (expression -> ( - expression ) .)
    DOTADD          reduce using rule 61 (expression -> ( - expression ) .)
    DOTSUB          reduce using rule 61 (expression -> ( - expression ) .)
    DOTMUL          reduce using rule 61 (expression -> ( - expression ) .)
    DOTDIV          reduce using rule 61 (expression -> ( - expression ) .)
    '               reduce using rule 61 (expression -> ( - expression ) .)
    {               reduce using rule 61 (expression -> ( - expression ) .)
    ID              reduce using rule 61 (expression -> ( - expression ) .)
    IF              reduce using rule 61 (expression -> ( - expression ) .)
    WHILE           reduce using rule 61 (expression -> ( - expression ) .)
    FOR             reduce using rule 61 (expression -> ( - expression ) .)
    BREAK           reduce using rule 61 (expression -> ( - expression ) .)
    CONTINUE        reduce using rule 61 (expression -> ( - expression ) .)
    RETURN          reduce using rule 61 (expression -> ( - expression ) .)
    PRINT           reduce using rule 61 (expression -> ( - expression ) .)
    (               reduce using rule 61 (expression -> ( - expression ) .)
    EYE             reduce using rule 61 (expression -> ( - expression ) .)
    ONES            reduce using rule 61 (expression -> ( - expression ) .)
    ZEROS           reduce using rule 61 (expression -> ( - expression ) .)
    FLOATNUM        reduce using rule 61 (expression -> ( - expression ) .)
    INTNUM          reduce using rule 61 (expression -> ( - expression ) .)
    STRING          reduce using rule 61 (expression -> ( - expression ) .)
    $end            reduce using rule 61 (expression -> ( - expression ) .)
    )               reduce using rule 61 (expression -> ( - expression ) .)
    ;               reduce using rule 61 (expression -> ( - expression ) .)
    ,               reduce using rule 61 (expression -> ( - expression ) .)
    }               reduce using rule 61 (expression -> ( - expression ) .)
    ELSE            reduce using rule 61 (expression -> ( - expression ) .)
    :               reduce using rule 61 (expression -> ( - expression ) .)


state 121

    (35) while_instr -> WHILE ( instruction ) . instruction
    (36) while_instr -> WHILE ( instruction ) . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    {               shift and go to state 137
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 136
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 122

    (38) for_instr -> FOR range { instruction . }

    }               shift and go to state 138


state 123

    (39) range -> ID = expression . : expression
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    :               shift and go to state 139
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 124

    (44) printable -> printable , expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               reduce using rule 44 (printable -> printable , expression .)
    ,               reduce using rule 44 (printable -> printable , expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 125

    (62) expression -> EYE ( expression ) .

    LESSER_THAN     reduce using rule 62 (expression -> EYE ( expression ) .)
    GREATER_THAN    reduce using rule 62 (expression -> EYE ( expression ) .)
    LESSER_EQUAL    reduce using rule 62 (expression -> EYE ( expression ) .)
    GREATER_EQUAL   reduce using rule 62 (expression -> EYE ( expression ) .)
    NOT_EQUAL       reduce using rule 62 (expression -> EYE ( expression ) .)
    EQUAL           reduce using rule 62 (expression -> EYE ( expression ) .)
    +               reduce using rule 62 (expression -> EYE ( expression ) .)
    -               reduce using rule 62 (expression -> EYE ( expression ) .)
    *               reduce using rule 62 (expression -> EYE ( expression ) .)
    /               reduce using rule 62 (expression -> EYE ( expression ) .)
    DOTADD          reduce using rule 62 (expression -> EYE ( expression ) .)
    DOTSUB          reduce using rule 62 (expression -> EYE ( expression ) .)
    DOTMUL          reduce using rule 62 (expression -> EYE ( expression ) .)
    DOTDIV          reduce using rule 62 (expression -> EYE ( expression ) .)
    '               reduce using rule 62 (expression -> EYE ( expression ) .)
    {               reduce using rule 62 (expression -> EYE ( expression ) .)
    ID              reduce using rule 62 (expression -> EYE ( expression ) .)
    IF              reduce using rule 62 (expression -> EYE ( expression ) .)
    WHILE           reduce using rule 62 (expression -> EYE ( expression ) .)
    FOR             reduce using rule 62 (expression -> EYE ( expression ) .)
    BREAK           reduce using rule 62 (expression -> EYE ( expression ) .)
    CONTINUE        reduce using rule 62 (expression -> EYE ( expression ) .)
    RETURN          reduce using rule 62 (expression -> EYE ( expression ) .)
    PRINT           reduce using rule 62 (expression -> EYE ( expression ) .)
    (               reduce using rule 62 (expression -> EYE ( expression ) .)
    EYE             reduce using rule 62 (expression -> EYE ( expression ) .)
    ONES            reduce using rule 62 (expression -> EYE ( expression ) .)
    ZEROS           reduce using rule 62 (expression -> EYE ( expression ) .)
    FLOATNUM        reduce using rule 62 (expression -> EYE ( expression ) .)
    INTNUM          reduce using rule 62 (expression -> EYE ( expression ) .)
    STRING          reduce using rule 62 (expression -> EYE ( expression ) .)
    $end            reduce using rule 62 (expression -> EYE ( expression ) .)
    )               reduce using rule 62 (expression -> EYE ( expression ) .)
    ;               reduce using rule 62 (expression -> EYE ( expression ) .)
    ,               reduce using rule 62 (expression -> EYE ( expression ) .)
    }               reduce using rule 62 (expression -> EYE ( expression ) .)
    ELSE            reduce using rule 62 (expression -> EYE ( expression ) .)
    :               reduce using rule 62 (expression -> EYE ( expression ) .)


state 126

    (63) expression -> ONES ( expression ) .

    LESSER_THAN     reduce using rule 63 (expression -> ONES ( expression ) .)
    GREATER_THAN    reduce using rule 63 (expression -> ONES ( expression ) .)
    LESSER_EQUAL    reduce using rule 63 (expression -> ONES ( expression ) .)
    GREATER_EQUAL   reduce using rule 63 (expression -> ONES ( expression ) .)
    NOT_EQUAL       reduce using rule 63 (expression -> ONES ( expression ) .)
    EQUAL           reduce using rule 63 (expression -> ONES ( expression ) .)
    +               reduce using rule 63 (expression -> ONES ( expression ) .)
    -               reduce using rule 63 (expression -> ONES ( expression ) .)
    *               reduce using rule 63 (expression -> ONES ( expression ) .)
    /               reduce using rule 63 (expression -> ONES ( expression ) .)
    DOTADD          reduce using rule 63 (expression -> ONES ( expression ) .)
    DOTSUB          reduce using rule 63 (expression -> ONES ( expression ) .)
    DOTMUL          reduce using rule 63 (expression -> ONES ( expression ) .)
    DOTDIV          reduce using rule 63 (expression -> ONES ( expression ) .)
    '               reduce using rule 63 (expression -> ONES ( expression ) .)
    {               reduce using rule 63 (expression -> ONES ( expression ) .)
    ID              reduce using rule 63 (expression -> ONES ( expression ) .)
    IF              reduce using rule 63 (expression -> ONES ( expression ) .)
    WHILE           reduce using rule 63 (expression -> ONES ( expression ) .)
    FOR             reduce using rule 63 (expression -> ONES ( expression ) .)
    BREAK           reduce using rule 63 (expression -> ONES ( expression ) .)
    CONTINUE        reduce using rule 63 (expression -> ONES ( expression ) .)
    RETURN          reduce using rule 63 (expression -> ONES ( expression ) .)
    PRINT           reduce using rule 63 (expression -> ONES ( expression ) .)
    (               reduce using rule 63 (expression -> ONES ( expression ) .)
    EYE             reduce using rule 63 (expression -> ONES ( expression ) .)
    ONES            reduce using rule 63 (expression -> ONES ( expression ) .)
    ZEROS           reduce using rule 63 (expression -> ONES ( expression ) .)
    FLOATNUM        reduce using rule 63 (expression -> ONES ( expression ) .)
    INTNUM          reduce using rule 63 (expression -> ONES ( expression ) .)
    STRING          reduce using rule 63 (expression -> ONES ( expression ) .)
    $end            reduce using rule 63 (expression -> ONES ( expression ) .)
    )               reduce using rule 63 (expression -> ONES ( expression ) .)
    ;               reduce using rule 63 (expression -> ONES ( expression ) .)
    ,               reduce using rule 63 (expression -> ONES ( expression ) .)
    }               reduce using rule 63 (expression -> ONES ( expression ) .)
    ELSE            reduce using rule 63 (expression -> ONES ( expression ) .)
    :               reduce using rule 63 (expression -> ONES ( expression ) .)


state 127

    (64) expression -> ZEROS ( expression ) .

    LESSER_THAN     reduce using rule 64 (expression -> ZEROS ( expression ) .)
    GREATER_THAN    reduce using rule 64 (expression -> ZEROS ( expression ) .)
    LESSER_EQUAL    reduce using rule 64 (expression -> ZEROS ( expression ) .)
    GREATER_EQUAL   reduce using rule 64 (expression -> ZEROS ( expression ) .)
    NOT_EQUAL       reduce using rule 64 (expression -> ZEROS ( expression ) .)
    EQUAL           reduce using rule 64 (expression -> ZEROS ( expression ) .)
    +               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    -               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    *               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    /               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    DOTADD          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    DOTSUB          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    DOTMUL          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    DOTDIV          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    '               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    {               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ID              reduce using rule 64 (expression -> ZEROS ( expression ) .)
    IF              reduce using rule 64 (expression -> ZEROS ( expression ) .)
    WHILE           reduce using rule 64 (expression -> ZEROS ( expression ) .)
    FOR             reduce using rule 64 (expression -> ZEROS ( expression ) .)
    BREAK           reduce using rule 64 (expression -> ZEROS ( expression ) .)
    CONTINUE        reduce using rule 64 (expression -> ZEROS ( expression ) .)
    RETURN          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    PRINT           reduce using rule 64 (expression -> ZEROS ( expression ) .)
    (               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    EYE             reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ONES            reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ZEROS           reduce using rule 64 (expression -> ZEROS ( expression ) .)
    FLOATNUM        reduce using rule 64 (expression -> ZEROS ( expression ) .)
    INTNUM          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    STRING          reduce using rule 64 (expression -> ZEROS ( expression ) .)
    $end            reduce using rule 64 (expression -> ZEROS ( expression ) .)
    )               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ;               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ,               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    }               reduce using rule 64 (expression -> ZEROS ( expression ) .)
    ELSE            reduce using rule 64 (expression -> ZEROS ( expression ) .)
    :               reduce using rule 64 (expression -> ZEROS ( expression ) .)


state 128

    (15) assign_instr -> ID = - expression ; .

    {               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ID              reduce using rule 15 (assign_instr -> ID = - expression ; .)
    IF              reduce using rule 15 (assign_instr -> ID = - expression ; .)
    WHILE           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    FOR             reduce using rule 15 (assign_instr -> ID = - expression ; .)
    BREAK           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    CONTINUE        reduce using rule 15 (assign_instr -> ID = - expression ; .)
    RETURN          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    PRINT           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    (               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    EYE             reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ONES            reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ZEROS           reduce using rule 15 (assign_instr -> ID = - expression ; .)
    FLOATNUM        reduce using rule 15 (assign_instr -> ID = - expression ; .)
    INTNUM          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    STRING          reduce using rule 15 (assign_instr -> ID = - expression ; .)
    $end            reduce using rule 15 (assign_instr -> ID = - expression ; .)
    }               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    )               reduce using rule 15 (assign_instr -> ID = - expression ; .)
    ELSE            reduce using rule 15 (assign_instr -> ID = - expression ; .)


state 129

    (23) arrays -> arrays , arrays .
    (23) arrays -> arrays . , arrays

    ;               reduce using rule 23 (arrays -> arrays , arrays .)
    ,               reduce using rule 23 (arrays -> arrays , arrays .)
    ]               reduce using rule 23 (arrays -> arrays , arrays .)

  ! ,               [ shift and go to state 110 ]


state 130

    (22) arrays -> [ arrays ] .

    ;               reduce using rule 22 (arrays -> [ arrays ] .)
    ,               reduce using rule 22 (arrays -> [ arrays ] .)
    ]               reduce using rule 22 (arrays -> [ arrays ] .)


state 131

    (24) arrays -> [ indexes ] .

    ;               reduce using rule 24 (arrays -> [ indexes ] .)
    ,               reduce using rule 24 (arrays -> [ indexes ] .)
    ]               reduce using rule 24 (arrays -> [ indexes ] .)


state 132

    (20) assign_instr -> ID [ indexes ] = . expression ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 140

state 133

    (25) indexes -> indexes , index .

    ]               reduce using rule 25 (indexes -> indexes , index .)
    ,               reduce using rule 25 (indexes -> indexes , index .)


state 134

    (29) if_instr -> IF ( expression ) { . instructions }
    (33) if_instr -> IF ( expression ) { . instructions } ELSE instruction
    (34) if_instr -> IF ( expression ) { . instructions } ELSE { instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instructions                   shift and go to state 141
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 135

    (30) if_instr -> IF ( expression ) instruction .
    (31) if_instr -> IF ( expression ) instruction . ELSE instruction
    (32) if_instr -> IF ( expression ) instruction . ELSE { instructions }

    {               reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    ID              reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    IF              reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    FOR             reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    (               reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    EYE             reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    ONES            reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    ZEROS           reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    FLOATNUM        reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    INTNUM          reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    STRING          reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    $end            reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    }               reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    )               reduce using rule 30 (if_instr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 142

  ! ELSE            [ reduce using rule 30 (if_instr -> IF ( expression ) instruction .) ]


state 136

    (35) while_instr -> WHILE ( instruction ) instruction .

    {               reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    ID              reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    IF              reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    WHILE           reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    FOR             reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    BREAK           reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    CONTINUE        reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    RETURN          reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    PRINT           reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    (               reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    EYE             reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    ONES            reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    ZEROS           reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    FLOATNUM        reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    INTNUM          reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    STRING          reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    $end            reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    }               reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    )               reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)
    ELSE            reduce using rule 35 (while_instr -> WHILE ( instruction ) instruction .)


state 137

    (36) while_instr -> WHILE ( instruction ) { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 3
    instructions                   shift and go to state 143
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 138

    (38) for_instr -> FOR range { instruction } .

    {               reduce using rule 38 (for_instr -> FOR range { instruction } .)
    ID              reduce using rule 38 (for_instr -> FOR range { instruction } .)
    IF              reduce using rule 38 (for_instr -> FOR range { instruction } .)
    WHILE           reduce using rule 38 (for_instr -> FOR range { instruction } .)
    FOR             reduce using rule 38 (for_instr -> FOR range { instruction } .)
    BREAK           reduce using rule 38 (for_instr -> FOR range { instruction } .)
    CONTINUE        reduce using rule 38 (for_instr -> FOR range { instruction } .)
    RETURN          reduce using rule 38 (for_instr -> FOR range { instruction } .)
    PRINT           reduce using rule 38 (for_instr -> FOR range { instruction } .)
    (               reduce using rule 38 (for_instr -> FOR range { instruction } .)
    EYE             reduce using rule 38 (for_instr -> FOR range { instruction } .)
    ONES            reduce using rule 38 (for_instr -> FOR range { instruction } .)
    ZEROS           reduce using rule 38 (for_instr -> FOR range { instruction } .)
    FLOATNUM        reduce using rule 38 (for_instr -> FOR range { instruction } .)
    INTNUM          reduce using rule 38 (for_instr -> FOR range { instruction } .)
    STRING          reduce using rule 38 (for_instr -> FOR range { instruction } .)
    $end            reduce using rule 38 (for_instr -> FOR range { instruction } .)
    }               reduce using rule 38 (for_instr -> FOR range { instruction } .)
    )               reduce using rule 38 (for_instr -> FOR range { instruction } .)
    ELSE            reduce using rule 38 (for_instr -> FOR range { instruction } .)


state 139

    (39) range -> ID = expression : . expression
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 54

    expression                     shift and go to state 144

state 140

    (20) assign_instr -> ID [ indexes ] = expression . ;
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    ;               shift and go to state 145
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 141

    (29) if_instr -> IF ( expression ) { instructions . }
    (33) if_instr -> IF ( expression ) { instructions . } ELSE instruction
    (34) if_instr -> IF ( expression ) { instructions . } ELSE { instructions }
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    }               shift and go to state 146
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 142

    (31) if_instr -> IF ( expression ) instruction ELSE . instruction
    (32) if_instr -> IF ( expression ) instruction ELSE . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    {               shift and go to state 148
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 147
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 143

    (36) while_instr -> WHILE ( instruction ) { instructions . }
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    }               shift and go to state 149
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 144

    (39) range -> ID = expression : expression .
    (46) expression -> expression . LESSER_THAN expression
    (47) expression -> expression . GREATER_THAN expression
    (48) expression -> expression . LESSER_EQUAL expression
    (49) expression -> expression . GREATER_EQUAL expression
    (50) expression -> expression . NOT_EQUAL expression
    (51) expression -> expression . EQUAL expression
    (52) expression -> expression . + expression
    (53) expression -> expression . - expression
    (54) expression -> expression . * expression
    (55) expression -> expression . / expression
    (56) expression -> expression . DOTADD expression
    (57) expression -> expression . DOTSUB expression
    (58) expression -> expression . DOTMUL expression
    (59) expression -> expression . DOTDIV expression
    (65) expression -> expression . '

    {               reduce using rule 39 (range -> ID = expression : expression .)
    ID              reduce using rule 39 (range -> ID = expression : expression .)
    IF              reduce using rule 39 (range -> ID = expression : expression .)
    WHILE           reduce using rule 39 (range -> ID = expression : expression .)
    FOR             reduce using rule 39 (range -> ID = expression : expression .)
    BREAK           reduce using rule 39 (range -> ID = expression : expression .)
    CONTINUE        reduce using rule 39 (range -> ID = expression : expression .)
    RETURN          reduce using rule 39 (range -> ID = expression : expression .)
    PRINT           reduce using rule 39 (range -> ID = expression : expression .)
    (               reduce using rule 39 (range -> ID = expression : expression .)
    EYE             reduce using rule 39 (range -> ID = expression : expression .)
    ONES            reduce using rule 39 (range -> ID = expression : expression .)
    ZEROS           reduce using rule 39 (range -> ID = expression : expression .)
    FLOATNUM        reduce using rule 39 (range -> ID = expression : expression .)
    INTNUM          reduce using rule 39 (range -> ID = expression : expression .)
    STRING          reduce using rule 39 (range -> ID = expression : expression .)
    LESSER_THAN     shift and go to state 30
    GREATER_THAN    shift and go to state 31
    LESSER_EQUAL    shift and go to state 32
    GREATER_EQUAL   shift and go to state 33
    NOT_EQUAL       shift and go to state 34
    EQUAL           shift and go to state 35
    +               shift and go to state 36
    -               shift and go to state 37
    *               shift and go to state 38
    /               shift and go to state 39
    DOTADD          shift and go to state 40
    DOTSUB          shift and go to state 41
    DOTMUL          shift and go to state 42
    DOTDIV          shift and go to state 43
    '               shift and go to state 44


state 145

    (20) assign_instr -> ID [ indexes ] = expression ; .

    {               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ID              reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    IF              reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    WHILE           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    FOR             reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    BREAK           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    CONTINUE        reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    RETURN          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    PRINT           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    (               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    EYE             reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ONES            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ZEROS           reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    FLOATNUM        reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    INTNUM          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    STRING          reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    $end            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    }               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    )               reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)
    ELSE            reduce using rule 20 (assign_instr -> ID [ indexes ] = expression ; .)


state 146

    (29) if_instr -> IF ( expression ) { instructions } .
    (33) if_instr -> IF ( expression ) { instructions } . ELSE instruction
    (34) if_instr -> IF ( expression ) { instructions } . ELSE { instructions }

    {               reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    ID              reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    IF              reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    WHILE           reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    FOR             reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    BREAK           reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    CONTINUE        reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    RETURN          reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    PRINT           reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    (               reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    EYE             reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    ONES            reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    ZEROS           reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    FLOATNUM        reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    INTNUM          reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    STRING          reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    $end            reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    }               reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    )               reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .)
    ELSE            shift and go to state 150

  ! ELSE            [ reduce using rule 29 (if_instr -> IF ( expression ) { instructions } .) ]


state 147

    (31) if_instr -> IF ( expression ) instruction ELSE instruction .

    {               reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    (               reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    EYE             reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ONES            reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    STRING          reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    )               reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 31 (if_instr -> IF ( expression ) instruction ELSE instruction .)


state 148

    (32) if_instr -> IF ( expression ) instruction ELSE { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 3
    instructions                   shift and go to state 151
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 149

    (36) while_instr -> WHILE ( instruction ) { instructions } .

    {               reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    ID              reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    IF              reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    WHILE           reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    FOR             reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    BREAK           reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    CONTINUE        reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    RETURN          reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    PRINT           reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    (               reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    EYE             reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    ONES            reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    ZEROS           reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    FLOATNUM        reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    INTNUM          reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    STRING          reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    $end            reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    }               reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    )               reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)
    ELSE            reduce using rule 36 (while_instr -> WHILE ( instruction ) { instructions } .)


state 150

    (33) if_instr -> IF ( expression ) { instructions } ELSE . instruction
    (34) if_instr -> IF ( expression ) { instructions } ELSE . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    {               shift and go to state 152
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 153
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 151

    (32) if_instr -> IF ( expression ) instruction ELSE { instructions . }
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    }               shift and go to state 154
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 152

    (34) if_instr -> IF ( expression ) { instructions } ELSE { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instructions { instructions }
    (4) instructions -> . instruction
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instructions                   shift and go to state 155
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 153

    (33) if_instr -> IF ( expression ) { instructions } ELSE instruction .

    {               reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ID              reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    IF              reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    WHILE           reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    FOR             reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    BREAK           reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    CONTINUE        reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    RETURN          reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    PRINT           reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    (               reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    EYE             reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ONES            reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ZEROS           reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    FLOATNUM        reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    INTNUM          reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    STRING          reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    $end            reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    }               reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    )               reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ELSE            reduce using rule 33 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)


state 154

    (32) if_instr -> IF ( expression ) instruction ELSE { instructions } .

    {               reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ID              reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    IF              reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    WHILE           reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    FOR             reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    BREAK           reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    CONTINUE        reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    RETURN          reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    PRINT           reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    (               reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    EYE             reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ONES            reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ZEROS           reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    FLOATNUM        reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    INTNUM          reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    STRING          reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    $end            reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    }               reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    )               reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ELSE            reduce using rule 32 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)


state 155

    (34) if_instr -> IF ( expression ) { instructions } ELSE { instructions . }
    (2) instructions -> instructions . instruction
    (3) instructions -> instructions . { instructions }
    (5) instruction -> . assign_instr
    (6) instruction -> . if_instr
    (7) instruction -> . while_instr
    (8) instruction -> . for_instr
    (9) instruction -> . break_instr
    (10) instruction -> . continue_instr
    (11) instruction -> . return_instr
    (12) instruction -> . print_instr
    (13) instruction -> . expression
    (14) assign_instr -> . ID = expression ;
    (15) assign_instr -> . ID = - expression ;
    (16) assign_instr -> . ID PLUSASSIGN expression ;
    (17) assign_instr -> . ID SUBASSIGN expression ;
    (18) assign_instr -> . ID MULASSIGN expression ;
    (19) assign_instr -> . ID DIVASSIGN expression ;
    (20) assign_instr -> . ID [ indexes ] = expression ;
    (21) assign_instr -> . ID = arrays ;
    (29) if_instr -> . IF ( expression ) { instructions }
    (30) if_instr -> . IF ( expression ) instruction
    (31) if_instr -> . IF ( expression ) instruction ELSE instruction
    (32) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (33) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (34) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (35) while_instr -> . WHILE ( instruction ) instruction
    (36) while_instr -> . WHILE ( instruction ) { instructions }
    (37) for_instr -> . FOR range instruction
    (38) for_instr -> . FOR range { instruction }
    (40) break_instr -> . BREAK ;
    (41) continue_instr -> . CONTINUE ;
    (42) return_instr -> . RETURN expression ;
    (43) print_instr -> . PRINT printable ;
    (46) expression -> . expression LESSER_THAN expression
    (47) expression -> . expression GREATER_THAN expression
    (48) expression -> . expression LESSER_EQUAL expression
    (49) expression -> . expression GREATER_EQUAL expression
    (50) expression -> . expression NOT_EQUAL expression
    (51) expression -> . expression EQUAL expression
    (52) expression -> . expression + expression
    (53) expression -> . expression - expression
    (54) expression -> . expression * expression
    (55) expression -> . expression / expression
    (56) expression -> . expression DOTADD expression
    (57) expression -> . expression DOTSUB expression
    (58) expression -> . expression DOTMUL expression
    (59) expression -> . expression DOTDIV expression
    (60) expression -> . ( expression )
    (61) expression -> . ( - expression )
    (62) expression -> . EYE ( expression )
    (63) expression -> . ONES ( expression )
    (64) expression -> . ZEROS ( expression )
    (65) expression -> . expression '
    (66) expression -> . FLOATNUM
    (67) expression -> . INTNUM
    (68) expression -> . STRING
    (69) expression -> . ID

    }               shift and go to state 156
    {               shift and go to state 29
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 156

    (34) if_instr -> IF ( expression ) { instructions } ELSE { instructions } .

    {               reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ID              reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    IF              reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    WHILE           reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    FOR             reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    BREAK           reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    CONTINUE        reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    RETURN          reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    PRINT           reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    (               reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    EYE             reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ONES            reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ZEROS           reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    FLOATNUM        reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    INTNUM          reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    STRING          reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    $end            reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    }               reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    )               reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ELSE            reduce using rule 34 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)

