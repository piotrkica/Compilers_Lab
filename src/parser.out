Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions
Rule 2     instructions -> instructions instruction
Rule 3     instructions -> instruction
Rule 4     instruction -> assign_instr
Rule 5     instruction -> if_instr
Rule 6     instruction -> while_instr
Rule 7     instruction -> for_instr
Rule 8     instruction -> break_instr
Rule 9     instruction -> continue_instr
Rule 10    instruction -> return_instr
Rule 11    instruction -> print_instr
Rule 12    instruction -> expression
Rule 13    assign_instr -> ID = expression ;
Rule 14    assign_instr -> ID PLUSASSIGN expression ;
Rule 15    assign_instr -> ID SUBASSIGN expression ;
Rule 16    assign_instr -> ID MULASSIGN expression ;
Rule 17    assign_instr -> ID DIVASSIGN expression ;
Rule 18    if_instr -> IF ( expression ) { instructions }
Rule 19    if_instr -> IF ( expression ) instruction
Rule 20    if_instr -> IF ( expression ) instruction ELSE instruction
Rule 21    if_instr -> IF ( expression ) instruction ELSE { instructions }
Rule 22    if_instr -> IF ( expression ) { instructions } ELSE instruction
Rule 23    if_instr -> IF ( expression ) { instructions } ELSE { instructions }
Rule 24    while_instr -> WHILE ( instruction ) instruction
Rule 25    while_instr -> WHILE ( instruction ) { instructions }
Rule 26    for_instr -> FOR range instruction
Rule 27    for_instr -> FOR range { instruction }
Rule 28    range -> ID = expression : expression
Rule 29    break_instr -> BREAK ;
Rule 30    continue_instr -> CONTINUE ;
Rule 31    return_instr -> RETURN expression ;
Rule 32    print_instr -> PRINT printable ;
Rule 33    printable -> printable , expression
Rule 34    printable -> expression
Rule 35    expression -> expression LESSER_THAN expression
Rule 36    expression -> expression GREATER_THAN expression
Rule 37    expression -> expression LESSER_EQUAL expression
Rule 38    expression -> expression GREATER_EQUAL expression
Rule 39    expression -> expression NOT_EQUAL expression
Rule 40    expression -> expression EQUAL expression
Rule 41    expression -> expression + expression
Rule 42    expression -> expression - expression
Rule 43    expression -> expression * expression
Rule 44    expression -> expression / expression
Rule 45    expression -> expression DOTADD expression
Rule 46    expression -> expression DOTSUB expression
Rule 47    expression -> expression DOTMUL expression
Rule 48    expression -> expression DOTDIV expression
Rule 49    expression -> ( expression )
Rule 50    expression -> EYE ( expression )
Rule 51    expression -> ONES ( expression )
Rule 52    expression -> ZEROS ( expression )
Rule 53    expression -> expression '
Rule 54    expression -> FLOATNUM
Rule 55    expression -> INTNUM
Rule 56    expression -> STRING
Rule 57    expression -> ID

Terminals, with rules where they appear

'                    : 53
(                    : 18 19 20 21 22 23 24 25 49 50 51 52
)                    : 18 19 20 21 22 23 24 25 49 50 51 52
*                    : 43
+                    : 41
,                    : 33
-                    : 42
/                    : 44
:                    : 28
;                    : 13 14 15 16 17 29 30 31 32
=                    : 13 28
BREAK                : 29
CONTINUE             : 30
DIVASSIGN            : 17
DOTADD               : 45
DOTDIV               : 48
DOTMUL               : 47
DOTSUB               : 46
ELSE                 : 20 21 22 23
EQUAL                : 40
EYE                  : 50
FLOATNUM             : 54
FOR                  : 26 27
GREATER_EQUAL        : 38
GREATER_THAN         : 36
ID                   : 13 14 15 16 17 28 57
IF                   : 18 19 20 21 22 23
INTNUM               : 55
LESSER_EQUAL         : 37
LESSER_THAN          : 35
MULASSIGN            : 16
NOT_EQUAL            : 39
ONES                 : 51
PLUSASSIGN           : 14
PRINT                : 32
RETURN               : 31
STRING               : 56
SUBASSIGN            : 15
WHILE                : 24 25
ZEROS                : 52
error                : 
{                    : 18 21 22 23 23 25 27
}                    : 18 21 22 23 23 25 27

Nonterminals, with rules where they appear

assign_instr         : 4
break_instr          : 8
continue_instr       : 9
expression           : 12 13 14 15 16 17 18 19 20 21 22 23 28 28 31 33 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 50 51 52 53
for_instr            : 7
if_instr             : 5
instruction          : 2 3 19 20 20 21 22 24 24 25 26 27
instructions         : 1 2 18 21 22 23 23 25
print_instr          : 11
printable            : 32 33
program              : 0
range                : 26 27
return_instr         : 10
while_instr          : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    program                        shift and go to state 1
    instructions                   shift and go to state 2
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions .
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    $end            reduce using rule 1 (program -> instructions .)
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 3

    (3) instructions -> instruction .

    ID              reduce using rule 3 (instructions -> instruction .)
    IF              reduce using rule 3 (instructions -> instruction .)
    WHILE           reduce using rule 3 (instructions -> instruction .)
    FOR             reduce using rule 3 (instructions -> instruction .)
    BREAK           reduce using rule 3 (instructions -> instruction .)
    CONTINUE        reduce using rule 3 (instructions -> instruction .)
    RETURN          reduce using rule 3 (instructions -> instruction .)
    PRINT           reduce using rule 3 (instructions -> instruction .)
    (               reduce using rule 3 (instructions -> instruction .)
    EYE             reduce using rule 3 (instructions -> instruction .)
    ONES            reduce using rule 3 (instructions -> instruction .)
    ZEROS           reduce using rule 3 (instructions -> instruction .)
    FLOATNUM        reduce using rule 3 (instructions -> instruction .)
    INTNUM          reduce using rule 3 (instructions -> instruction .)
    STRING          reduce using rule 3 (instructions -> instruction .)
    $end            reduce using rule 3 (instructions -> instruction .)
    }               reduce using rule 3 (instructions -> instruction .)


state 4

    (4) instruction -> assign_instr .

    ID              reduce using rule 4 (instruction -> assign_instr .)
    IF              reduce using rule 4 (instruction -> assign_instr .)
    WHILE           reduce using rule 4 (instruction -> assign_instr .)
    FOR             reduce using rule 4 (instruction -> assign_instr .)
    BREAK           reduce using rule 4 (instruction -> assign_instr .)
    CONTINUE        reduce using rule 4 (instruction -> assign_instr .)
    RETURN          reduce using rule 4 (instruction -> assign_instr .)
    PRINT           reduce using rule 4 (instruction -> assign_instr .)
    (               reduce using rule 4 (instruction -> assign_instr .)
    EYE             reduce using rule 4 (instruction -> assign_instr .)
    ONES            reduce using rule 4 (instruction -> assign_instr .)
    ZEROS           reduce using rule 4 (instruction -> assign_instr .)
    FLOATNUM        reduce using rule 4 (instruction -> assign_instr .)
    INTNUM          reduce using rule 4 (instruction -> assign_instr .)
    STRING          reduce using rule 4 (instruction -> assign_instr .)
    $end            reduce using rule 4 (instruction -> assign_instr .)
    )               reduce using rule 4 (instruction -> assign_instr .)
    }               reduce using rule 4 (instruction -> assign_instr .)
    ELSE            reduce using rule 4 (instruction -> assign_instr .)


state 5

    (5) instruction -> if_instr .

    ID              reduce using rule 5 (instruction -> if_instr .)
    IF              reduce using rule 5 (instruction -> if_instr .)
    WHILE           reduce using rule 5 (instruction -> if_instr .)
    FOR             reduce using rule 5 (instruction -> if_instr .)
    BREAK           reduce using rule 5 (instruction -> if_instr .)
    CONTINUE        reduce using rule 5 (instruction -> if_instr .)
    RETURN          reduce using rule 5 (instruction -> if_instr .)
    PRINT           reduce using rule 5 (instruction -> if_instr .)
    (               reduce using rule 5 (instruction -> if_instr .)
    EYE             reduce using rule 5 (instruction -> if_instr .)
    ONES            reduce using rule 5 (instruction -> if_instr .)
    ZEROS           reduce using rule 5 (instruction -> if_instr .)
    FLOATNUM        reduce using rule 5 (instruction -> if_instr .)
    INTNUM          reduce using rule 5 (instruction -> if_instr .)
    STRING          reduce using rule 5 (instruction -> if_instr .)
    $end            reduce using rule 5 (instruction -> if_instr .)
    )               reduce using rule 5 (instruction -> if_instr .)
    }               reduce using rule 5 (instruction -> if_instr .)
    ELSE            reduce using rule 5 (instruction -> if_instr .)


state 6

    (6) instruction -> while_instr .

    ID              reduce using rule 6 (instruction -> while_instr .)
    IF              reduce using rule 6 (instruction -> while_instr .)
    WHILE           reduce using rule 6 (instruction -> while_instr .)
    FOR             reduce using rule 6 (instruction -> while_instr .)
    BREAK           reduce using rule 6 (instruction -> while_instr .)
    CONTINUE        reduce using rule 6 (instruction -> while_instr .)
    RETURN          reduce using rule 6 (instruction -> while_instr .)
    PRINT           reduce using rule 6 (instruction -> while_instr .)
    (               reduce using rule 6 (instruction -> while_instr .)
    EYE             reduce using rule 6 (instruction -> while_instr .)
    ONES            reduce using rule 6 (instruction -> while_instr .)
    ZEROS           reduce using rule 6 (instruction -> while_instr .)
    FLOATNUM        reduce using rule 6 (instruction -> while_instr .)
    INTNUM          reduce using rule 6 (instruction -> while_instr .)
    STRING          reduce using rule 6 (instruction -> while_instr .)
    $end            reduce using rule 6 (instruction -> while_instr .)
    )               reduce using rule 6 (instruction -> while_instr .)
    }               reduce using rule 6 (instruction -> while_instr .)
    ELSE            reduce using rule 6 (instruction -> while_instr .)


state 7

    (7) instruction -> for_instr .

    ID              reduce using rule 7 (instruction -> for_instr .)
    IF              reduce using rule 7 (instruction -> for_instr .)
    WHILE           reduce using rule 7 (instruction -> for_instr .)
    FOR             reduce using rule 7 (instruction -> for_instr .)
    BREAK           reduce using rule 7 (instruction -> for_instr .)
    CONTINUE        reduce using rule 7 (instruction -> for_instr .)
    RETURN          reduce using rule 7 (instruction -> for_instr .)
    PRINT           reduce using rule 7 (instruction -> for_instr .)
    (               reduce using rule 7 (instruction -> for_instr .)
    EYE             reduce using rule 7 (instruction -> for_instr .)
    ONES            reduce using rule 7 (instruction -> for_instr .)
    ZEROS           reduce using rule 7 (instruction -> for_instr .)
    FLOATNUM        reduce using rule 7 (instruction -> for_instr .)
    INTNUM          reduce using rule 7 (instruction -> for_instr .)
    STRING          reduce using rule 7 (instruction -> for_instr .)
    $end            reduce using rule 7 (instruction -> for_instr .)
    )               reduce using rule 7 (instruction -> for_instr .)
    }               reduce using rule 7 (instruction -> for_instr .)
    ELSE            reduce using rule 7 (instruction -> for_instr .)


state 8

    (8) instruction -> break_instr .

    ID              reduce using rule 8 (instruction -> break_instr .)
    IF              reduce using rule 8 (instruction -> break_instr .)
    WHILE           reduce using rule 8 (instruction -> break_instr .)
    FOR             reduce using rule 8 (instruction -> break_instr .)
    BREAK           reduce using rule 8 (instruction -> break_instr .)
    CONTINUE        reduce using rule 8 (instruction -> break_instr .)
    RETURN          reduce using rule 8 (instruction -> break_instr .)
    PRINT           reduce using rule 8 (instruction -> break_instr .)
    (               reduce using rule 8 (instruction -> break_instr .)
    EYE             reduce using rule 8 (instruction -> break_instr .)
    ONES            reduce using rule 8 (instruction -> break_instr .)
    ZEROS           reduce using rule 8 (instruction -> break_instr .)
    FLOATNUM        reduce using rule 8 (instruction -> break_instr .)
    INTNUM          reduce using rule 8 (instruction -> break_instr .)
    STRING          reduce using rule 8 (instruction -> break_instr .)
    $end            reduce using rule 8 (instruction -> break_instr .)
    )               reduce using rule 8 (instruction -> break_instr .)
    }               reduce using rule 8 (instruction -> break_instr .)
    ELSE            reduce using rule 8 (instruction -> break_instr .)


state 9

    (9) instruction -> continue_instr .

    ID              reduce using rule 9 (instruction -> continue_instr .)
    IF              reduce using rule 9 (instruction -> continue_instr .)
    WHILE           reduce using rule 9 (instruction -> continue_instr .)
    FOR             reduce using rule 9 (instruction -> continue_instr .)
    BREAK           reduce using rule 9 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 9 (instruction -> continue_instr .)
    RETURN          reduce using rule 9 (instruction -> continue_instr .)
    PRINT           reduce using rule 9 (instruction -> continue_instr .)
    (               reduce using rule 9 (instruction -> continue_instr .)
    EYE             reduce using rule 9 (instruction -> continue_instr .)
    ONES            reduce using rule 9 (instruction -> continue_instr .)
    ZEROS           reduce using rule 9 (instruction -> continue_instr .)
    FLOATNUM        reduce using rule 9 (instruction -> continue_instr .)
    INTNUM          reduce using rule 9 (instruction -> continue_instr .)
    STRING          reduce using rule 9 (instruction -> continue_instr .)
    $end            reduce using rule 9 (instruction -> continue_instr .)
    )               reduce using rule 9 (instruction -> continue_instr .)
    }               reduce using rule 9 (instruction -> continue_instr .)
    ELSE            reduce using rule 9 (instruction -> continue_instr .)


state 10

    (10) instruction -> return_instr .

    ID              reduce using rule 10 (instruction -> return_instr .)
    IF              reduce using rule 10 (instruction -> return_instr .)
    WHILE           reduce using rule 10 (instruction -> return_instr .)
    FOR             reduce using rule 10 (instruction -> return_instr .)
    BREAK           reduce using rule 10 (instruction -> return_instr .)
    CONTINUE        reduce using rule 10 (instruction -> return_instr .)
    RETURN          reduce using rule 10 (instruction -> return_instr .)
    PRINT           reduce using rule 10 (instruction -> return_instr .)
    (               reduce using rule 10 (instruction -> return_instr .)
    EYE             reduce using rule 10 (instruction -> return_instr .)
    ONES            reduce using rule 10 (instruction -> return_instr .)
    ZEROS           reduce using rule 10 (instruction -> return_instr .)
    FLOATNUM        reduce using rule 10 (instruction -> return_instr .)
    INTNUM          reduce using rule 10 (instruction -> return_instr .)
    STRING          reduce using rule 10 (instruction -> return_instr .)
    $end            reduce using rule 10 (instruction -> return_instr .)
    )               reduce using rule 10 (instruction -> return_instr .)
    }               reduce using rule 10 (instruction -> return_instr .)
    ELSE            reduce using rule 10 (instruction -> return_instr .)


state 11

    (11) instruction -> print_instr .

    ID              reduce using rule 11 (instruction -> print_instr .)
    IF              reduce using rule 11 (instruction -> print_instr .)
    WHILE           reduce using rule 11 (instruction -> print_instr .)
    FOR             reduce using rule 11 (instruction -> print_instr .)
    BREAK           reduce using rule 11 (instruction -> print_instr .)
    CONTINUE        reduce using rule 11 (instruction -> print_instr .)
    RETURN          reduce using rule 11 (instruction -> print_instr .)
    PRINT           reduce using rule 11 (instruction -> print_instr .)
    (               reduce using rule 11 (instruction -> print_instr .)
    EYE             reduce using rule 11 (instruction -> print_instr .)
    ONES            reduce using rule 11 (instruction -> print_instr .)
    ZEROS           reduce using rule 11 (instruction -> print_instr .)
    FLOATNUM        reduce using rule 11 (instruction -> print_instr .)
    INTNUM          reduce using rule 11 (instruction -> print_instr .)
    STRING          reduce using rule 11 (instruction -> print_instr .)
    $end            reduce using rule 11 (instruction -> print_instr .)
    )               reduce using rule 11 (instruction -> print_instr .)
    }               reduce using rule 11 (instruction -> print_instr .)
    ELSE            reduce using rule 11 (instruction -> print_instr .)


state 12

    (12) instruction -> expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ID              reduce using rule 12 (instruction -> expression .)
    IF              reduce using rule 12 (instruction -> expression .)
    WHILE           reduce using rule 12 (instruction -> expression .)
    FOR             reduce using rule 12 (instruction -> expression .)
    BREAK           reduce using rule 12 (instruction -> expression .)
    CONTINUE        reduce using rule 12 (instruction -> expression .)
    RETURN          reduce using rule 12 (instruction -> expression .)
    PRINT           reduce using rule 12 (instruction -> expression .)
    (               reduce using rule 12 (instruction -> expression .)
    EYE             reduce using rule 12 (instruction -> expression .)
    ONES            reduce using rule 12 (instruction -> expression .)
    ZEROS           reduce using rule 12 (instruction -> expression .)
    FLOATNUM        reduce using rule 12 (instruction -> expression .)
    INTNUM          reduce using rule 12 (instruction -> expression .)
    STRING          reduce using rule 12 (instruction -> expression .)
    $end            reduce using rule 12 (instruction -> expression .)
    )               reduce using rule 12 (instruction -> expression .)
    }               reduce using rule 12 (instruction -> expression .)
    ELSE            reduce using rule 12 (instruction -> expression .)
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 13

    (13) assign_instr -> ID . = expression ;
    (14) assign_instr -> ID . PLUSASSIGN expression ;
    (15) assign_instr -> ID . SUBASSIGN expression ;
    (16) assign_instr -> ID . MULASSIGN expression ;
    (17) assign_instr -> ID . DIVASSIGN expression ;
    (57) expression -> ID .

    =               shift and go to state 44
    PLUSASSIGN      shift and go to state 45
    SUBASSIGN       shift and go to state 46
    MULASSIGN       shift and go to state 47
    DIVASSIGN       shift and go to state 48
    LESSER_THAN     reduce using rule 57 (expression -> ID .)
    GREATER_THAN    reduce using rule 57 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 57 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 57 (expression -> ID .)
    NOT_EQUAL       reduce using rule 57 (expression -> ID .)
    EQUAL           reduce using rule 57 (expression -> ID .)
    +               reduce using rule 57 (expression -> ID .)
    -               reduce using rule 57 (expression -> ID .)
    *               reduce using rule 57 (expression -> ID .)
    /               reduce using rule 57 (expression -> ID .)
    DOTADD          reduce using rule 57 (expression -> ID .)
    DOTSUB          reduce using rule 57 (expression -> ID .)
    DOTMUL          reduce using rule 57 (expression -> ID .)
    DOTDIV          reduce using rule 57 (expression -> ID .)
    '               reduce using rule 57 (expression -> ID .)
    ID              reduce using rule 57 (expression -> ID .)
    IF              reduce using rule 57 (expression -> ID .)
    WHILE           reduce using rule 57 (expression -> ID .)
    FOR             reduce using rule 57 (expression -> ID .)
    BREAK           reduce using rule 57 (expression -> ID .)
    CONTINUE        reduce using rule 57 (expression -> ID .)
    RETURN          reduce using rule 57 (expression -> ID .)
    PRINT           reduce using rule 57 (expression -> ID .)
    (               reduce using rule 57 (expression -> ID .)
    EYE             reduce using rule 57 (expression -> ID .)
    ONES            reduce using rule 57 (expression -> ID .)
    ZEROS           reduce using rule 57 (expression -> ID .)
    FLOATNUM        reduce using rule 57 (expression -> ID .)
    INTNUM          reduce using rule 57 (expression -> ID .)
    STRING          reduce using rule 57 (expression -> ID .)
    $end            reduce using rule 57 (expression -> ID .)
    )               reduce using rule 57 (expression -> ID .)
    }               reduce using rule 57 (expression -> ID .)
    ELSE            reduce using rule 57 (expression -> ID .)


state 14

    (18) if_instr -> IF . ( expression ) { instructions }
    (19) if_instr -> IF . ( expression ) instruction
    (20) if_instr -> IF . ( expression ) instruction ELSE instruction
    (21) if_instr -> IF . ( expression ) instruction ELSE { instructions }
    (22) if_instr -> IF . ( expression ) { instructions } ELSE instruction
    (23) if_instr -> IF . ( expression ) { instructions } ELSE { instructions }

    (               shift and go to state 49


state 15

    (49) expression -> ( . expression )
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 50

state 16

    (24) while_instr -> WHILE . ( instruction ) instruction
    (25) while_instr -> WHILE . ( instruction ) { instructions }

    (               shift and go to state 52


state 17

    (26) for_instr -> FOR . range instruction
    (27) for_instr -> FOR . range { instruction }
    (28) range -> . ID = expression : expression

    ID              shift and go to state 54

    range                          shift and go to state 53

state 18

    (29) break_instr -> BREAK . ;

    ;               shift and go to state 55


state 19

    (30) continue_instr -> CONTINUE . ;

    ;               shift and go to state 56


state 20

    (31) return_instr -> RETURN . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 57

state 21

    (32) print_instr -> PRINT . printable ;
    (33) printable -> . printable , expression
    (34) printable -> . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    printable                      shift and go to state 58
    expression                     shift and go to state 59

state 22

    (50) expression -> EYE . ( expression )

    (               shift and go to state 60


state 23

    (51) expression -> ONES . ( expression )

    (               shift and go to state 61


state 24

    (52) expression -> ZEROS . ( expression )

    (               shift and go to state 62


state 25

    (54) expression -> FLOATNUM .

    LESSER_THAN     reduce using rule 54 (expression -> FLOATNUM .)
    GREATER_THAN    reduce using rule 54 (expression -> FLOATNUM .)
    LESSER_EQUAL    reduce using rule 54 (expression -> FLOATNUM .)
    GREATER_EQUAL   reduce using rule 54 (expression -> FLOATNUM .)
    NOT_EQUAL       reduce using rule 54 (expression -> FLOATNUM .)
    EQUAL           reduce using rule 54 (expression -> FLOATNUM .)
    +               reduce using rule 54 (expression -> FLOATNUM .)
    -               reduce using rule 54 (expression -> FLOATNUM .)
    *               reduce using rule 54 (expression -> FLOATNUM .)
    /               reduce using rule 54 (expression -> FLOATNUM .)
    DOTADD          reduce using rule 54 (expression -> FLOATNUM .)
    DOTSUB          reduce using rule 54 (expression -> FLOATNUM .)
    DOTMUL          reduce using rule 54 (expression -> FLOATNUM .)
    DOTDIV          reduce using rule 54 (expression -> FLOATNUM .)
    '               reduce using rule 54 (expression -> FLOATNUM .)
    ID              reduce using rule 54 (expression -> FLOATNUM .)
    IF              reduce using rule 54 (expression -> FLOATNUM .)
    WHILE           reduce using rule 54 (expression -> FLOATNUM .)
    FOR             reduce using rule 54 (expression -> FLOATNUM .)
    BREAK           reduce using rule 54 (expression -> FLOATNUM .)
    CONTINUE        reduce using rule 54 (expression -> FLOATNUM .)
    RETURN          reduce using rule 54 (expression -> FLOATNUM .)
    PRINT           reduce using rule 54 (expression -> FLOATNUM .)
    (               reduce using rule 54 (expression -> FLOATNUM .)
    EYE             reduce using rule 54 (expression -> FLOATNUM .)
    ONES            reduce using rule 54 (expression -> FLOATNUM .)
    ZEROS           reduce using rule 54 (expression -> FLOATNUM .)
    FLOATNUM        reduce using rule 54 (expression -> FLOATNUM .)
    INTNUM          reduce using rule 54 (expression -> FLOATNUM .)
    STRING          reduce using rule 54 (expression -> FLOATNUM .)
    $end            reduce using rule 54 (expression -> FLOATNUM .)
    )               reduce using rule 54 (expression -> FLOATNUM .)
    ;               reduce using rule 54 (expression -> FLOATNUM .)
    ,               reduce using rule 54 (expression -> FLOATNUM .)
    }               reduce using rule 54 (expression -> FLOATNUM .)
    ELSE            reduce using rule 54 (expression -> FLOATNUM .)
    :               reduce using rule 54 (expression -> FLOATNUM .)
    {               reduce using rule 54 (expression -> FLOATNUM .)


state 26

    (55) expression -> INTNUM .

    LESSER_THAN     reduce using rule 55 (expression -> INTNUM .)
    GREATER_THAN    reduce using rule 55 (expression -> INTNUM .)
    LESSER_EQUAL    reduce using rule 55 (expression -> INTNUM .)
    GREATER_EQUAL   reduce using rule 55 (expression -> INTNUM .)
    NOT_EQUAL       reduce using rule 55 (expression -> INTNUM .)
    EQUAL           reduce using rule 55 (expression -> INTNUM .)
    +               reduce using rule 55 (expression -> INTNUM .)
    -               reduce using rule 55 (expression -> INTNUM .)
    *               reduce using rule 55 (expression -> INTNUM .)
    /               reduce using rule 55 (expression -> INTNUM .)
    DOTADD          reduce using rule 55 (expression -> INTNUM .)
    DOTSUB          reduce using rule 55 (expression -> INTNUM .)
    DOTMUL          reduce using rule 55 (expression -> INTNUM .)
    DOTDIV          reduce using rule 55 (expression -> INTNUM .)
    '               reduce using rule 55 (expression -> INTNUM .)
    ID              reduce using rule 55 (expression -> INTNUM .)
    IF              reduce using rule 55 (expression -> INTNUM .)
    WHILE           reduce using rule 55 (expression -> INTNUM .)
    FOR             reduce using rule 55 (expression -> INTNUM .)
    BREAK           reduce using rule 55 (expression -> INTNUM .)
    CONTINUE        reduce using rule 55 (expression -> INTNUM .)
    RETURN          reduce using rule 55 (expression -> INTNUM .)
    PRINT           reduce using rule 55 (expression -> INTNUM .)
    (               reduce using rule 55 (expression -> INTNUM .)
    EYE             reduce using rule 55 (expression -> INTNUM .)
    ONES            reduce using rule 55 (expression -> INTNUM .)
    ZEROS           reduce using rule 55 (expression -> INTNUM .)
    FLOATNUM        reduce using rule 55 (expression -> INTNUM .)
    INTNUM          reduce using rule 55 (expression -> INTNUM .)
    STRING          reduce using rule 55 (expression -> INTNUM .)
    $end            reduce using rule 55 (expression -> INTNUM .)
    )               reduce using rule 55 (expression -> INTNUM .)
    ;               reduce using rule 55 (expression -> INTNUM .)
    ,               reduce using rule 55 (expression -> INTNUM .)
    }               reduce using rule 55 (expression -> INTNUM .)
    ELSE            reduce using rule 55 (expression -> INTNUM .)
    :               reduce using rule 55 (expression -> INTNUM .)
    {               reduce using rule 55 (expression -> INTNUM .)


state 27

    (56) expression -> STRING .

    LESSER_THAN     reduce using rule 56 (expression -> STRING .)
    GREATER_THAN    reduce using rule 56 (expression -> STRING .)
    LESSER_EQUAL    reduce using rule 56 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 56 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 56 (expression -> STRING .)
    EQUAL           reduce using rule 56 (expression -> STRING .)
    +               reduce using rule 56 (expression -> STRING .)
    -               reduce using rule 56 (expression -> STRING .)
    *               reduce using rule 56 (expression -> STRING .)
    /               reduce using rule 56 (expression -> STRING .)
    DOTADD          reduce using rule 56 (expression -> STRING .)
    DOTSUB          reduce using rule 56 (expression -> STRING .)
    DOTMUL          reduce using rule 56 (expression -> STRING .)
    DOTDIV          reduce using rule 56 (expression -> STRING .)
    '               reduce using rule 56 (expression -> STRING .)
    ID              reduce using rule 56 (expression -> STRING .)
    IF              reduce using rule 56 (expression -> STRING .)
    WHILE           reduce using rule 56 (expression -> STRING .)
    FOR             reduce using rule 56 (expression -> STRING .)
    BREAK           reduce using rule 56 (expression -> STRING .)
    CONTINUE        reduce using rule 56 (expression -> STRING .)
    RETURN          reduce using rule 56 (expression -> STRING .)
    PRINT           reduce using rule 56 (expression -> STRING .)
    (               reduce using rule 56 (expression -> STRING .)
    EYE             reduce using rule 56 (expression -> STRING .)
    ONES            reduce using rule 56 (expression -> STRING .)
    ZEROS           reduce using rule 56 (expression -> STRING .)
    FLOATNUM        reduce using rule 56 (expression -> STRING .)
    INTNUM          reduce using rule 56 (expression -> STRING .)
    STRING          reduce using rule 56 (expression -> STRING .)
    $end            reduce using rule 56 (expression -> STRING .)
    )               reduce using rule 56 (expression -> STRING .)
    ;               reduce using rule 56 (expression -> STRING .)
    ,               reduce using rule 56 (expression -> STRING .)
    }               reduce using rule 56 (expression -> STRING .)
    ELSE            reduce using rule 56 (expression -> STRING .)
    :               reduce using rule 56 (expression -> STRING .)
    {               reduce using rule 56 (expression -> STRING .)


state 28

    (2) instructions -> instructions instruction .

    ID              reduce using rule 2 (instructions -> instructions instruction .)
    IF              reduce using rule 2 (instructions -> instructions instruction .)
    WHILE           reduce using rule 2 (instructions -> instructions instruction .)
    FOR             reduce using rule 2 (instructions -> instructions instruction .)
    BREAK           reduce using rule 2 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 2 (instructions -> instructions instruction .)
    RETURN          reduce using rule 2 (instructions -> instructions instruction .)
    PRINT           reduce using rule 2 (instructions -> instructions instruction .)
    (               reduce using rule 2 (instructions -> instructions instruction .)
    EYE             reduce using rule 2 (instructions -> instructions instruction .)
    ONES            reduce using rule 2 (instructions -> instructions instruction .)
    ZEROS           reduce using rule 2 (instructions -> instructions instruction .)
    FLOATNUM        reduce using rule 2 (instructions -> instructions instruction .)
    INTNUM          reduce using rule 2 (instructions -> instructions instruction .)
    STRING          reduce using rule 2 (instructions -> instructions instruction .)
    $end            reduce using rule 2 (instructions -> instructions instruction .)
    }               reduce using rule 2 (instructions -> instructions instruction .)


state 29

    (35) expression -> expression LESSER_THAN . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 63

state 30

    (36) expression -> expression GREATER_THAN . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 64

state 31

    (37) expression -> expression LESSER_EQUAL . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 65

state 32

    (38) expression -> expression GREATER_EQUAL . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 66

state 33

    (39) expression -> expression NOT_EQUAL . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 67

state 34

    (40) expression -> expression EQUAL . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 68

state 35

    (41) expression -> expression + . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 69

state 36

    (42) expression -> expression - . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 70

state 37

    (43) expression -> expression * . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 71

state 38

    (44) expression -> expression / . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 72

state 39

    (45) expression -> expression DOTADD . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 73

state 40

    (46) expression -> expression DOTSUB . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 74

state 41

    (47) expression -> expression DOTMUL . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 75

state 42

    (48) expression -> expression DOTDIV . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 76

state 43

    (53) expression -> expression ' .

    LESSER_THAN     reduce using rule 53 (expression -> expression ' .)
    GREATER_THAN    reduce using rule 53 (expression -> expression ' .)
    LESSER_EQUAL    reduce using rule 53 (expression -> expression ' .)
    GREATER_EQUAL   reduce using rule 53 (expression -> expression ' .)
    NOT_EQUAL       reduce using rule 53 (expression -> expression ' .)
    EQUAL           reduce using rule 53 (expression -> expression ' .)
    +               reduce using rule 53 (expression -> expression ' .)
    -               reduce using rule 53 (expression -> expression ' .)
    *               reduce using rule 53 (expression -> expression ' .)
    /               reduce using rule 53 (expression -> expression ' .)
    DOTADD          reduce using rule 53 (expression -> expression ' .)
    DOTSUB          reduce using rule 53 (expression -> expression ' .)
    DOTMUL          reduce using rule 53 (expression -> expression ' .)
    DOTDIV          reduce using rule 53 (expression -> expression ' .)
    '               reduce using rule 53 (expression -> expression ' .)
    ID              reduce using rule 53 (expression -> expression ' .)
    IF              reduce using rule 53 (expression -> expression ' .)
    WHILE           reduce using rule 53 (expression -> expression ' .)
    FOR             reduce using rule 53 (expression -> expression ' .)
    BREAK           reduce using rule 53 (expression -> expression ' .)
    CONTINUE        reduce using rule 53 (expression -> expression ' .)
    RETURN          reduce using rule 53 (expression -> expression ' .)
    PRINT           reduce using rule 53 (expression -> expression ' .)
    (               reduce using rule 53 (expression -> expression ' .)
    EYE             reduce using rule 53 (expression -> expression ' .)
    ONES            reduce using rule 53 (expression -> expression ' .)
    ZEROS           reduce using rule 53 (expression -> expression ' .)
    FLOATNUM        reduce using rule 53 (expression -> expression ' .)
    INTNUM          reduce using rule 53 (expression -> expression ' .)
    STRING          reduce using rule 53 (expression -> expression ' .)
    $end            reduce using rule 53 (expression -> expression ' .)
    )               reduce using rule 53 (expression -> expression ' .)
    ;               reduce using rule 53 (expression -> expression ' .)
    ,               reduce using rule 53 (expression -> expression ' .)
    }               reduce using rule 53 (expression -> expression ' .)
    ELSE            reduce using rule 53 (expression -> expression ' .)
    :               reduce using rule 53 (expression -> expression ' .)
    {               reduce using rule 53 (expression -> expression ' .)


state 44

    (13) assign_instr -> ID = . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 77

state 45

    (14) assign_instr -> ID PLUSASSIGN . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 78

state 46

    (15) assign_instr -> ID SUBASSIGN . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 79

state 47

    (16) assign_instr -> ID MULASSIGN . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 80

state 48

    (17) assign_instr -> ID DIVASSIGN . expression ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 81

state 49

    (18) if_instr -> IF ( . expression ) { instructions }
    (19) if_instr -> IF ( . expression ) instruction
    (20) if_instr -> IF ( . expression ) instruction ELSE instruction
    (21) if_instr -> IF ( . expression ) instruction ELSE { instructions }
    (22) if_instr -> IF ( . expression ) { instructions } ELSE instruction
    (23) if_instr -> IF ( . expression ) { instructions } ELSE { instructions }
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 82

state 50

    (49) expression -> ( expression . )
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    )               shift and go to state 83
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 51

    (57) expression -> ID .

    )               reduce using rule 57 (expression -> ID .)
    LESSER_THAN     reduce using rule 57 (expression -> ID .)
    GREATER_THAN    reduce using rule 57 (expression -> ID .)
    LESSER_EQUAL    reduce using rule 57 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 57 (expression -> ID .)
    NOT_EQUAL       reduce using rule 57 (expression -> ID .)
    EQUAL           reduce using rule 57 (expression -> ID .)
    +               reduce using rule 57 (expression -> ID .)
    -               reduce using rule 57 (expression -> ID .)
    *               reduce using rule 57 (expression -> ID .)
    /               reduce using rule 57 (expression -> ID .)
    DOTADD          reduce using rule 57 (expression -> ID .)
    DOTSUB          reduce using rule 57 (expression -> ID .)
    DOTMUL          reduce using rule 57 (expression -> ID .)
    DOTDIV          reduce using rule 57 (expression -> ID .)
    '               reduce using rule 57 (expression -> ID .)
    ;               reduce using rule 57 (expression -> ID .)
    ,               reduce using rule 57 (expression -> ID .)
    ID              reduce using rule 57 (expression -> ID .)
    IF              reduce using rule 57 (expression -> ID .)
    WHILE           reduce using rule 57 (expression -> ID .)
    FOR             reduce using rule 57 (expression -> ID .)
    BREAK           reduce using rule 57 (expression -> ID .)
    CONTINUE        reduce using rule 57 (expression -> ID .)
    RETURN          reduce using rule 57 (expression -> ID .)
    PRINT           reduce using rule 57 (expression -> ID .)
    (               reduce using rule 57 (expression -> ID .)
    EYE             reduce using rule 57 (expression -> ID .)
    ONES            reduce using rule 57 (expression -> ID .)
    ZEROS           reduce using rule 57 (expression -> ID .)
    FLOATNUM        reduce using rule 57 (expression -> ID .)
    INTNUM          reduce using rule 57 (expression -> ID .)
    STRING          reduce using rule 57 (expression -> ID .)
    $end            reduce using rule 57 (expression -> ID .)
    }               reduce using rule 57 (expression -> ID .)
    ELSE            reduce using rule 57 (expression -> ID .)
    :               reduce using rule 57 (expression -> ID .)
    {               reduce using rule 57 (expression -> ID .)


state 52

    (24) while_instr -> WHILE ( . instruction ) instruction
    (25) while_instr -> WHILE ( . instruction ) { instructions }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 84
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 53

    (26) for_instr -> FOR range . instruction
    (27) for_instr -> FOR range . { instruction }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    {               shift and go to state 86
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 85
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 54

    (28) range -> ID . = expression : expression

    =               shift and go to state 87


state 55

    (29) break_instr -> BREAK ; .

    ID              reduce using rule 29 (break_instr -> BREAK ; .)
    IF              reduce using rule 29 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 29 (break_instr -> BREAK ; .)
    FOR             reduce using rule 29 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 29 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 29 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 29 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 29 (break_instr -> BREAK ; .)
    (               reduce using rule 29 (break_instr -> BREAK ; .)
    EYE             reduce using rule 29 (break_instr -> BREAK ; .)
    ONES            reduce using rule 29 (break_instr -> BREAK ; .)
    ZEROS           reduce using rule 29 (break_instr -> BREAK ; .)
    FLOATNUM        reduce using rule 29 (break_instr -> BREAK ; .)
    INTNUM          reduce using rule 29 (break_instr -> BREAK ; .)
    STRING          reduce using rule 29 (break_instr -> BREAK ; .)
    $end            reduce using rule 29 (break_instr -> BREAK ; .)
    )               reduce using rule 29 (break_instr -> BREAK ; .)
    }               reduce using rule 29 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 29 (break_instr -> BREAK ; .)


state 56

    (30) continue_instr -> CONTINUE ; .

    ID              reduce using rule 30 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 30 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 30 (continue_instr -> CONTINUE ; .)
    FOR             reduce using rule 30 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 30 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 30 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 30 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 30 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 30 (continue_instr -> CONTINUE ; .)
    EYE             reduce using rule 30 (continue_instr -> CONTINUE ; .)
    ONES            reduce using rule 30 (continue_instr -> CONTINUE ; .)
    ZEROS           reduce using rule 30 (continue_instr -> CONTINUE ; .)
    FLOATNUM        reduce using rule 30 (continue_instr -> CONTINUE ; .)
    INTNUM          reduce using rule 30 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 30 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 30 (continue_instr -> CONTINUE ; .)
    )               reduce using rule 30 (continue_instr -> CONTINUE ; .)
    }               reduce using rule 30 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 30 (continue_instr -> CONTINUE ; .)


state 57

    (31) return_instr -> RETURN expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 88
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 58

    (32) print_instr -> PRINT printable . ;
    (33) printable -> printable . , expression

    ;               shift and go to state 89
    ,               shift and go to state 90


state 59

    (34) printable -> expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               reduce using rule 34 (printable -> expression .)
    ,               reduce using rule 34 (printable -> expression .)
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 60

    (50) expression -> EYE ( . expression )
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 91

state 61

    (51) expression -> ONES ( . expression )
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 92

state 62

    (52) expression -> ZEROS ( . expression )
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 93

state 63

    (35) expression -> expression LESSER_THAN expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    GREATER_THAN    reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    LESSER_EQUAL    reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    GREATER_EQUAL   reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    NOT_EQUAL       reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    EQUAL           reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    '               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ID              reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    IF              reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    WHILE           reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    FOR             reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    BREAK           reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    CONTINUE        reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    RETURN          reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    PRINT           reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    (               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    EYE             reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ONES            reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ZEROS           reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    FLOATNUM        reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    INTNUM          reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    STRING          reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    $end            reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    )               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ;               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ,               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    }               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    ELSE            reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    :               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    {               reduce using rule 35 (expression -> expression LESSER_THAN expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! -               [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! *               [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 35 (expression -> expression LESSER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 64

    (36) expression -> expression GREATER_THAN expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    GREATER_THAN    reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    LESSER_EQUAL    reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    GREATER_EQUAL   reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    NOT_EQUAL       reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    EQUAL           reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    '               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ID              reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    IF              reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    WHILE           reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    FOR             reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    BREAK           reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    CONTINUE        reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    RETURN          reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    PRINT           reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    (               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    EYE             reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ONES            reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ZEROS           reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    FLOATNUM        reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    INTNUM          reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    STRING          reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    $end            reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    )               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ;               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ,               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    }               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    ELSE            reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    :               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    {               reduce using rule 36 (expression -> expression GREATER_THAN expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! -               [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! *               [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! /               [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! DOTADD          [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! DOTSUB          [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! DOTMUL          [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! DOTDIV          [ reduce using rule 36 (expression -> expression GREATER_THAN expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 65

    (37) expression -> expression LESSER_EQUAL expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    GREATER_THAN    reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    EQUAL           reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    '               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ID              reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    IF              reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    WHILE           reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    FOR             reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    BREAK           reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    CONTINUE        reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    RETURN          reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    PRINT           reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    (               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    EYE             reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ONES            reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ZEROS           reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    FLOATNUM        reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    INTNUM          reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    STRING          reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    $end            reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    )               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ;               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ,               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    }               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    ELSE            reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    :               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    {               reduce using rule 37 (expression -> expression LESSER_EQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! -               [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! *               [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! /               [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 37 (expression -> expression LESSER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 66

    (38) expression -> expression GREATER_EQUAL expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    GREATER_THAN    reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    EQUAL           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    '               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    CONTINUE        reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    (               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    EYE             reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ONES            reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ZEROS           reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    FLOATNUM        reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    INTNUM          reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    )               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ;               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ,               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    }               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    :               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    {               reduce using rule 38 (expression -> expression GREATER_EQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! -               [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 38 (expression -> expression GREATER_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 67

    (39) expression -> expression NOT_EQUAL expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    GREATER_THAN    reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    LESSER_EQUAL    reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    EQUAL           reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    '               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    CONTINUE        reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    (               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    EYE             reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ONES            reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ZEROS           reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    FLOATNUM        reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    INTNUM          reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    )               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ;               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ,               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    }               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    :               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    {               reduce using rule 39 (expression -> expression NOT_EQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! -               [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 39 (expression -> expression NOT_EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 68

    (40) expression -> expression EQUAL expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 40 (expression -> expression EQUAL expression .)
    GREATER_THAN    reduce using rule 40 (expression -> expression EQUAL expression .)
    LESSER_EQUAL    reduce using rule 40 (expression -> expression EQUAL expression .)
    GREATER_EQUAL   reduce using rule 40 (expression -> expression EQUAL expression .)
    NOT_EQUAL       reduce using rule 40 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 40 (expression -> expression EQUAL expression .)
    '               reduce using rule 40 (expression -> expression EQUAL expression .)
    ID              reduce using rule 40 (expression -> expression EQUAL expression .)
    IF              reduce using rule 40 (expression -> expression EQUAL expression .)
    WHILE           reduce using rule 40 (expression -> expression EQUAL expression .)
    FOR             reduce using rule 40 (expression -> expression EQUAL expression .)
    BREAK           reduce using rule 40 (expression -> expression EQUAL expression .)
    CONTINUE        reduce using rule 40 (expression -> expression EQUAL expression .)
    RETURN          reduce using rule 40 (expression -> expression EQUAL expression .)
    PRINT           reduce using rule 40 (expression -> expression EQUAL expression .)
    (               reduce using rule 40 (expression -> expression EQUAL expression .)
    EYE             reduce using rule 40 (expression -> expression EQUAL expression .)
    ONES            reduce using rule 40 (expression -> expression EQUAL expression .)
    ZEROS           reduce using rule 40 (expression -> expression EQUAL expression .)
    FLOATNUM        reduce using rule 40 (expression -> expression EQUAL expression .)
    INTNUM          reduce using rule 40 (expression -> expression EQUAL expression .)
    STRING          reduce using rule 40 (expression -> expression EQUAL expression .)
    $end            reduce using rule 40 (expression -> expression EQUAL expression .)
    )               reduce using rule 40 (expression -> expression EQUAL expression .)
    ;               reduce using rule 40 (expression -> expression EQUAL expression .)
    ,               reduce using rule 40 (expression -> expression EQUAL expression .)
    }               reduce using rule 40 (expression -> expression EQUAL expression .)
    ELSE            reduce using rule 40 (expression -> expression EQUAL expression .)
    :               reduce using rule 40 (expression -> expression EQUAL expression .)
    {               reduce using rule 40 (expression -> expression EQUAL expression .)
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! +               [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! DOTADD          [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! DOTSUB          [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! DOTMUL          [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! DOTDIV          [ reduce using rule 40 (expression -> expression EQUAL expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! '               [ shift and go to state 43 ]


state 69

    (41) expression -> expression + expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 41 (expression -> expression + expression .)
    GREATER_THAN    reduce using rule 41 (expression -> expression + expression .)
    LESSER_EQUAL    reduce using rule 41 (expression -> expression + expression .)
    GREATER_EQUAL   reduce using rule 41 (expression -> expression + expression .)
    NOT_EQUAL       reduce using rule 41 (expression -> expression + expression .)
    EQUAL           reduce using rule 41 (expression -> expression + expression .)
    +               reduce using rule 41 (expression -> expression + expression .)
    -               reduce using rule 41 (expression -> expression + expression .)
    '               reduce using rule 41 (expression -> expression + expression .)
    ID              reduce using rule 41 (expression -> expression + expression .)
    IF              reduce using rule 41 (expression -> expression + expression .)
    WHILE           reduce using rule 41 (expression -> expression + expression .)
    FOR             reduce using rule 41 (expression -> expression + expression .)
    BREAK           reduce using rule 41 (expression -> expression + expression .)
    CONTINUE        reduce using rule 41 (expression -> expression + expression .)
    RETURN          reduce using rule 41 (expression -> expression + expression .)
    PRINT           reduce using rule 41 (expression -> expression + expression .)
    (               reduce using rule 41 (expression -> expression + expression .)
    EYE             reduce using rule 41 (expression -> expression + expression .)
    ONES            reduce using rule 41 (expression -> expression + expression .)
    ZEROS           reduce using rule 41 (expression -> expression + expression .)
    FLOATNUM        reduce using rule 41 (expression -> expression + expression .)
    INTNUM          reduce using rule 41 (expression -> expression + expression .)
    STRING          reduce using rule 41 (expression -> expression + expression .)
    $end            reduce using rule 41 (expression -> expression + expression .)
    )               reduce using rule 41 (expression -> expression + expression .)
    ;               reduce using rule 41 (expression -> expression + expression .)
    ,               reduce using rule 41 (expression -> expression + expression .)
    }               reduce using rule 41 (expression -> expression + expression .)
    ELSE            reduce using rule 41 (expression -> expression + expression .)
    :               reduce using rule 41 (expression -> expression + expression .)
    {               reduce using rule 41 (expression -> expression + expression .)
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! *               [ reduce using rule 41 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 41 (expression -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 41 (expression -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 41 (expression -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 41 (expression -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 41 (expression -> expression + expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! '               [ shift and go to state 43 ]


state 70

    (42) expression -> expression - expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 42 (expression -> expression - expression .)
    GREATER_THAN    reduce using rule 42 (expression -> expression - expression .)
    LESSER_EQUAL    reduce using rule 42 (expression -> expression - expression .)
    GREATER_EQUAL   reduce using rule 42 (expression -> expression - expression .)
    NOT_EQUAL       reduce using rule 42 (expression -> expression - expression .)
    EQUAL           reduce using rule 42 (expression -> expression - expression .)
    +               reduce using rule 42 (expression -> expression - expression .)
    -               reduce using rule 42 (expression -> expression - expression .)
    '               reduce using rule 42 (expression -> expression - expression .)
    ID              reduce using rule 42 (expression -> expression - expression .)
    IF              reduce using rule 42 (expression -> expression - expression .)
    WHILE           reduce using rule 42 (expression -> expression - expression .)
    FOR             reduce using rule 42 (expression -> expression - expression .)
    BREAK           reduce using rule 42 (expression -> expression - expression .)
    CONTINUE        reduce using rule 42 (expression -> expression - expression .)
    RETURN          reduce using rule 42 (expression -> expression - expression .)
    PRINT           reduce using rule 42 (expression -> expression - expression .)
    (               reduce using rule 42 (expression -> expression - expression .)
    EYE             reduce using rule 42 (expression -> expression - expression .)
    ONES            reduce using rule 42 (expression -> expression - expression .)
    ZEROS           reduce using rule 42 (expression -> expression - expression .)
    FLOATNUM        reduce using rule 42 (expression -> expression - expression .)
    INTNUM          reduce using rule 42 (expression -> expression - expression .)
    STRING          reduce using rule 42 (expression -> expression - expression .)
    $end            reduce using rule 42 (expression -> expression - expression .)
    )               reduce using rule 42 (expression -> expression - expression .)
    ;               reduce using rule 42 (expression -> expression - expression .)
    ,               reduce using rule 42 (expression -> expression - expression .)
    }               reduce using rule 42 (expression -> expression - expression .)
    ELSE            reduce using rule 42 (expression -> expression - expression .)
    :               reduce using rule 42 (expression -> expression - expression .)
    {               reduce using rule 42 (expression -> expression - expression .)
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! *               [ reduce using rule 42 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 42 (expression -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 42 (expression -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 42 (expression -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 42 (expression -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 42 (expression -> expression - expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! '               [ shift and go to state 43 ]


state 71

    (43) expression -> expression * expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 43 (expression -> expression * expression .)
    GREATER_THAN    reduce using rule 43 (expression -> expression * expression .)
    LESSER_EQUAL    reduce using rule 43 (expression -> expression * expression .)
    GREATER_EQUAL   reduce using rule 43 (expression -> expression * expression .)
    NOT_EQUAL       reduce using rule 43 (expression -> expression * expression .)
    EQUAL           reduce using rule 43 (expression -> expression * expression .)
    +               reduce using rule 43 (expression -> expression * expression .)
    -               reduce using rule 43 (expression -> expression * expression .)
    *               reduce using rule 43 (expression -> expression * expression .)
    /               reduce using rule 43 (expression -> expression * expression .)
    '               reduce using rule 43 (expression -> expression * expression .)
    ID              reduce using rule 43 (expression -> expression * expression .)
    IF              reduce using rule 43 (expression -> expression * expression .)
    WHILE           reduce using rule 43 (expression -> expression * expression .)
    FOR             reduce using rule 43 (expression -> expression * expression .)
    BREAK           reduce using rule 43 (expression -> expression * expression .)
    CONTINUE        reduce using rule 43 (expression -> expression * expression .)
    RETURN          reduce using rule 43 (expression -> expression * expression .)
    PRINT           reduce using rule 43 (expression -> expression * expression .)
    (               reduce using rule 43 (expression -> expression * expression .)
    EYE             reduce using rule 43 (expression -> expression * expression .)
    ONES            reduce using rule 43 (expression -> expression * expression .)
    ZEROS           reduce using rule 43 (expression -> expression * expression .)
    FLOATNUM        reduce using rule 43 (expression -> expression * expression .)
    INTNUM          reduce using rule 43 (expression -> expression * expression .)
    STRING          reduce using rule 43 (expression -> expression * expression .)
    $end            reduce using rule 43 (expression -> expression * expression .)
    )               reduce using rule 43 (expression -> expression * expression .)
    ;               reduce using rule 43 (expression -> expression * expression .)
    ,               reduce using rule 43 (expression -> expression * expression .)
    }               reduce using rule 43 (expression -> expression * expression .)
    ELSE            reduce using rule 43 (expression -> expression * expression .)
    :               reduce using rule 43 (expression -> expression * expression .)
    {               reduce using rule 43 (expression -> expression * expression .)
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! DOTADD          [ reduce using rule 43 (expression -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 43 (expression -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 43 (expression -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 43 (expression -> expression * expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! '               [ shift and go to state 43 ]


state 72

    (44) expression -> expression / expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 44 (expression -> expression / expression .)
    GREATER_THAN    reduce using rule 44 (expression -> expression / expression .)
    LESSER_EQUAL    reduce using rule 44 (expression -> expression / expression .)
    GREATER_EQUAL   reduce using rule 44 (expression -> expression / expression .)
    NOT_EQUAL       reduce using rule 44 (expression -> expression / expression .)
    EQUAL           reduce using rule 44 (expression -> expression / expression .)
    +               reduce using rule 44 (expression -> expression / expression .)
    -               reduce using rule 44 (expression -> expression / expression .)
    *               reduce using rule 44 (expression -> expression / expression .)
    /               reduce using rule 44 (expression -> expression / expression .)
    '               reduce using rule 44 (expression -> expression / expression .)
    ID              reduce using rule 44 (expression -> expression / expression .)
    IF              reduce using rule 44 (expression -> expression / expression .)
    WHILE           reduce using rule 44 (expression -> expression / expression .)
    FOR             reduce using rule 44 (expression -> expression / expression .)
    BREAK           reduce using rule 44 (expression -> expression / expression .)
    CONTINUE        reduce using rule 44 (expression -> expression / expression .)
    RETURN          reduce using rule 44 (expression -> expression / expression .)
    PRINT           reduce using rule 44 (expression -> expression / expression .)
    (               reduce using rule 44 (expression -> expression / expression .)
    EYE             reduce using rule 44 (expression -> expression / expression .)
    ONES            reduce using rule 44 (expression -> expression / expression .)
    ZEROS           reduce using rule 44 (expression -> expression / expression .)
    FLOATNUM        reduce using rule 44 (expression -> expression / expression .)
    INTNUM          reduce using rule 44 (expression -> expression / expression .)
    STRING          reduce using rule 44 (expression -> expression / expression .)
    $end            reduce using rule 44 (expression -> expression / expression .)
    )               reduce using rule 44 (expression -> expression / expression .)
    ;               reduce using rule 44 (expression -> expression / expression .)
    ,               reduce using rule 44 (expression -> expression / expression .)
    }               reduce using rule 44 (expression -> expression / expression .)
    ELSE            reduce using rule 44 (expression -> expression / expression .)
    :               reduce using rule 44 (expression -> expression / expression .)
    {               reduce using rule 44 (expression -> expression / expression .)
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! DOTADD          [ reduce using rule 44 (expression -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 44 (expression -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 44 (expression -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 44 (expression -> expression / expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! '               [ shift and go to state 43 ]


state 73

    (45) expression -> expression DOTADD expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 45 (expression -> expression DOTADD expression .)
    GREATER_THAN    reduce using rule 45 (expression -> expression DOTADD expression .)
    LESSER_EQUAL    reduce using rule 45 (expression -> expression DOTADD expression .)
    GREATER_EQUAL   reduce using rule 45 (expression -> expression DOTADD expression .)
    NOT_EQUAL       reduce using rule 45 (expression -> expression DOTADD expression .)
    EQUAL           reduce using rule 45 (expression -> expression DOTADD expression .)
    +               reduce using rule 45 (expression -> expression DOTADD expression .)
    -               reduce using rule 45 (expression -> expression DOTADD expression .)
    *               reduce using rule 45 (expression -> expression DOTADD expression .)
    /               reduce using rule 45 (expression -> expression DOTADD expression .)
    DOTADD          reduce using rule 45 (expression -> expression DOTADD expression .)
    DOTSUB          reduce using rule 45 (expression -> expression DOTADD expression .)
    '               reduce using rule 45 (expression -> expression DOTADD expression .)
    ID              reduce using rule 45 (expression -> expression DOTADD expression .)
    IF              reduce using rule 45 (expression -> expression DOTADD expression .)
    WHILE           reduce using rule 45 (expression -> expression DOTADD expression .)
    FOR             reduce using rule 45 (expression -> expression DOTADD expression .)
    BREAK           reduce using rule 45 (expression -> expression DOTADD expression .)
    CONTINUE        reduce using rule 45 (expression -> expression DOTADD expression .)
    RETURN          reduce using rule 45 (expression -> expression DOTADD expression .)
    PRINT           reduce using rule 45 (expression -> expression DOTADD expression .)
    (               reduce using rule 45 (expression -> expression DOTADD expression .)
    EYE             reduce using rule 45 (expression -> expression DOTADD expression .)
    ONES            reduce using rule 45 (expression -> expression DOTADD expression .)
    ZEROS           reduce using rule 45 (expression -> expression DOTADD expression .)
    FLOATNUM        reduce using rule 45 (expression -> expression DOTADD expression .)
    INTNUM          reduce using rule 45 (expression -> expression DOTADD expression .)
    STRING          reduce using rule 45 (expression -> expression DOTADD expression .)
    $end            reduce using rule 45 (expression -> expression DOTADD expression .)
    )               reduce using rule 45 (expression -> expression DOTADD expression .)
    ;               reduce using rule 45 (expression -> expression DOTADD expression .)
    ,               reduce using rule 45 (expression -> expression DOTADD expression .)
    }               reduce using rule 45 (expression -> expression DOTADD expression .)
    ELSE            reduce using rule 45 (expression -> expression DOTADD expression .)
    :               reduce using rule 45 (expression -> expression DOTADD expression .)
    {               reduce using rule 45 (expression -> expression DOTADD expression .)
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! DOTMUL          [ reduce using rule 45 (expression -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 45 (expression -> expression DOTADD expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! '               [ shift and go to state 43 ]


state 74

    (46) expression -> expression DOTSUB expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 46 (expression -> expression DOTSUB expression .)
    GREATER_THAN    reduce using rule 46 (expression -> expression DOTSUB expression .)
    LESSER_EQUAL    reduce using rule 46 (expression -> expression DOTSUB expression .)
    GREATER_EQUAL   reduce using rule 46 (expression -> expression DOTSUB expression .)
    NOT_EQUAL       reduce using rule 46 (expression -> expression DOTSUB expression .)
    EQUAL           reduce using rule 46 (expression -> expression DOTSUB expression .)
    +               reduce using rule 46 (expression -> expression DOTSUB expression .)
    -               reduce using rule 46 (expression -> expression DOTSUB expression .)
    *               reduce using rule 46 (expression -> expression DOTSUB expression .)
    /               reduce using rule 46 (expression -> expression DOTSUB expression .)
    DOTADD          reduce using rule 46 (expression -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 46 (expression -> expression DOTSUB expression .)
    '               reduce using rule 46 (expression -> expression DOTSUB expression .)
    ID              reduce using rule 46 (expression -> expression DOTSUB expression .)
    IF              reduce using rule 46 (expression -> expression DOTSUB expression .)
    WHILE           reduce using rule 46 (expression -> expression DOTSUB expression .)
    FOR             reduce using rule 46 (expression -> expression DOTSUB expression .)
    BREAK           reduce using rule 46 (expression -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 46 (expression -> expression DOTSUB expression .)
    RETURN          reduce using rule 46 (expression -> expression DOTSUB expression .)
    PRINT           reduce using rule 46 (expression -> expression DOTSUB expression .)
    (               reduce using rule 46 (expression -> expression DOTSUB expression .)
    EYE             reduce using rule 46 (expression -> expression DOTSUB expression .)
    ONES            reduce using rule 46 (expression -> expression DOTSUB expression .)
    ZEROS           reduce using rule 46 (expression -> expression DOTSUB expression .)
    FLOATNUM        reduce using rule 46 (expression -> expression DOTSUB expression .)
    INTNUM          reduce using rule 46 (expression -> expression DOTSUB expression .)
    STRING          reduce using rule 46 (expression -> expression DOTSUB expression .)
    $end            reduce using rule 46 (expression -> expression DOTSUB expression .)
    )               reduce using rule 46 (expression -> expression DOTSUB expression .)
    ;               reduce using rule 46 (expression -> expression DOTSUB expression .)
    ,               reduce using rule 46 (expression -> expression DOTSUB expression .)
    }               reduce using rule 46 (expression -> expression DOTSUB expression .)
    ELSE            reduce using rule 46 (expression -> expression DOTSUB expression .)
    :               reduce using rule 46 (expression -> expression DOTSUB expression .)
    {               reduce using rule 46 (expression -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42

  ! DOTMUL          [ reduce using rule 46 (expression -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 46 (expression -> expression DOTSUB expression .) ]
  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! '               [ shift and go to state 43 ]


state 75

    (47) expression -> expression DOTMUL expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 47 (expression -> expression DOTMUL expression .)
    GREATER_THAN    reduce using rule 47 (expression -> expression DOTMUL expression .)
    LESSER_EQUAL    reduce using rule 47 (expression -> expression DOTMUL expression .)
    GREATER_EQUAL   reduce using rule 47 (expression -> expression DOTMUL expression .)
    NOT_EQUAL       reduce using rule 47 (expression -> expression DOTMUL expression .)
    EQUAL           reduce using rule 47 (expression -> expression DOTMUL expression .)
    +               reduce using rule 47 (expression -> expression DOTMUL expression .)
    -               reduce using rule 47 (expression -> expression DOTMUL expression .)
    *               reduce using rule 47 (expression -> expression DOTMUL expression .)
    /               reduce using rule 47 (expression -> expression DOTMUL expression .)
    DOTADD          reduce using rule 47 (expression -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 47 (expression -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 47 (expression -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 47 (expression -> expression DOTMUL expression .)
    '               reduce using rule 47 (expression -> expression DOTMUL expression .)
    ID              reduce using rule 47 (expression -> expression DOTMUL expression .)
    IF              reduce using rule 47 (expression -> expression DOTMUL expression .)
    WHILE           reduce using rule 47 (expression -> expression DOTMUL expression .)
    FOR             reduce using rule 47 (expression -> expression DOTMUL expression .)
    BREAK           reduce using rule 47 (expression -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 47 (expression -> expression DOTMUL expression .)
    RETURN          reduce using rule 47 (expression -> expression DOTMUL expression .)
    PRINT           reduce using rule 47 (expression -> expression DOTMUL expression .)
    (               reduce using rule 47 (expression -> expression DOTMUL expression .)
    EYE             reduce using rule 47 (expression -> expression DOTMUL expression .)
    ONES            reduce using rule 47 (expression -> expression DOTMUL expression .)
    ZEROS           reduce using rule 47 (expression -> expression DOTMUL expression .)
    FLOATNUM        reduce using rule 47 (expression -> expression DOTMUL expression .)
    INTNUM          reduce using rule 47 (expression -> expression DOTMUL expression .)
    STRING          reduce using rule 47 (expression -> expression DOTMUL expression .)
    $end            reduce using rule 47 (expression -> expression DOTMUL expression .)
    )               reduce using rule 47 (expression -> expression DOTMUL expression .)
    ;               reduce using rule 47 (expression -> expression DOTMUL expression .)
    ,               reduce using rule 47 (expression -> expression DOTMUL expression .)
    }               reduce using rule 47 (expression -> expression DOTMUL expression .)
    ELSE            reduce using rule 47 (expression -> expression DOTMUL expression .)
    :               reduce using rule 47 (expression -> expression DOTMUL expression .)
    {               reduce using rule 47 (expression -> expression DOTMUL expression .)

  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! DOTMUL          [ shift and go to state 41 ]
  ! DOTDIV          [ shift and go to state 42 ]
  ! '               [ shift and go to state 43 ]


state 76

    (48) expression -> expression DOTDIV expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    LESSER_THAN     reduce using rule 48 (expression -> expression DOTDIV expression .)
    GREATER_THAN    reduce using rule 48 (expression -> expression DOTDIV expression .)
    LESSER_EQUAL    reduce using rule 48 (expression -> expression DOTDIV expression .)
    GREATER_EQUAL   reduce using rule 48 (expression -> expression DOTDIV expression .)
    NOT_EQUAL       reduce using rule 48 (expression -> expression DOTDIV expression .)
    EQUAL           reduce using rule 48 (expression -> expression DOTDIV expression .)
    +               reduce using rule 48 (expression -> expression DOTDIV expression .)
    -               reduce using rule 48 (expression -> expression DOTDIV expression .)
    *               reduce using rule 48 (expression -> expression DOTDIV expression .)
    /               reduce using rule 48 (expression -> expression DOTDIV expression .)
    DOTADD          reduce using rule 48 (expression -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 48 (expression -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 48 (expression -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 48 (expression -> expression DOTDIV expression .)
    '               reduce using rule 48 (expression -> expression DOTDIV expression .)
    ID              reduce using rule 48 (expression -> expression DOTDIV expression .)
    IF              reduce using rule 48 (expression -> expression DOTDIV expression .)
    WHILE           reduce using rule 48 (expression -> expression DOTDIV expression .)
    FOR             reduce using rule 48 (expression -> expression DOTDIV expression .)
    BREAK           reduce using rule 48 (expression -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 48 (expression -> expression DOTDIV expression .)
    RETURN          reduce using rule 48 (expression -> expression DOTDIV expression .)
    PRINT           reduce using rule 48 (expression -> expression DOTDIV expression .)
    (               reduce using rule 48 (expression -> expression DOTDIV expression .)
    EYE             reduce using rule 48 (expression -> expression DOTDIV expression .)
    ONES            reduce using rule 48 (expression -> expression DOTDIV expression .)
    ZEROS           reduce using rule 48 (expression -> expression DOTDIV expression .)
    FLOATNUM        reduce using rule 48 (expression -> expression DOTDIV expression .)
    INTNUM          reduce using rule 48 (expression -> expression DOTDIV expression .)
    STRING          reduce using rule 48 (expression -> expression DOTDIV expression .)
    $end            reduce using rule 48 (expression -> expression DOTDIV expression .)
    )               reduce using rule 48 (expression -> expression DOTDIV expression .)
    ;               reduce using rule 48 (expression -> expression DOTDIV expression .)
    ,               reduce using rule 48 (expression -> expression DOTDIV expression .)
    }               reduce using rule 48 (expression -> expression DOTDIV expression .)
    ELSE            reduce using rule 48 (expression -> expression DOTDIV expression .)
    :               reduce using rule 48 (expression -> expression DOTDIV expression .)
    {               reduce using rule 48 (expression -> expression DOTDIV expression .)

  ! LESSER_THAN     [ shift and go to state 29 ]
  ! GREATER_THAN    [ shift and go to state 30 ]
  ! LESSER_EQUAL    [ shift and go to state 31 ]
  ! GREATER_EQUAL   [ shift and go to state 32 ]
  ! NOT_EQUAL       [ shift and go to state 33 ]
  ! EQUAL           [ shift and go to state 34 ]
  ! +               [ shift and go to state 35 ]
  ! -               [ shift and go to state 36 ]
  ! *               [ shift and go to state 37 ]
  ! /               [ shift and go to state 38 ]
  ! DOTADD          [ shift and go to state 39 ]
  ! DOTSUB          [ shift and go to state 40 ]
  ! DOTMUL          [ shift and go to state 41 ]
  ! DOTDIV          [ shift and go to state 42 ]
  ! '               [ shift and go to state 43 ]


state 77

    (13) assign_instr -> ID = expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 94
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 78

    (14) assign_instr -> ID PLUSASSIGN expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 95
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 79

    (15) assign_instr -> ID SUBASSIGN expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 96
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 80

    (16) assign_instr -> ID MULASSIGN expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 97
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 81

    (17) assign_instr -> ID DIVASSIGN expression . ;
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               shift and go to state 98
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 82

    (18) if_instr -> IF ( expression . ) { instructions }
    (19) if_instr -> IF ( expression . ) instruction
    (20) if_instr -> IF ( expression . ) instruction ELSE instruction
    (21) if_instr -> IF ( expression . ) instruction ELSE { instructions }
    (22) if_instr -> IF ( expression . ) { instructions } ELSE instruction
    (23) if_instr -> IF ( expression . ) { instructions } ELSE { instructions }
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    )               shift and go to state 99
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 83

    (49) expression -> ( expression ) .

    LESSER_THAN     reduce using rule 49 (expression -> ( expression ) .)
    GREATER_THAN    reduce using rule 49 (expression -> ( expression ) .)
    LESSER_EQUAL    reduce using rule 49 (expression -> ( expression ) .)
    GREATER_EQUAL   reduce using rule 49 (expression -> ( expression ) .)
    NOT_EQUAL       reduce using rule 49 (expression -> ( expression ) .)
    EQUAL           reduce using rule 49 (expression -> ( expression ) .)
    +               reduce using rule 49 (expression -> ( expression ) .)
    -               reduce using rule 49 (expression -> ( expression ) .)
    *               reduce using rule 49 (expression -> ( expression ) .)
    /               reduce using rule 49 (expression -> ( expression ) .)
    DOTADD          reduce using rule 49 (expression -> ( expression ) .)
    DOTSUB          reduce using rule 49 (expression -> ( expression ) .)
    DOTMUL          reduce using rule 49 (expression -> ( expression ) .)
    DOTDIV          reduce using rule 49 (expression -> ( expression ) .)
    '               reduce using rule 49 (expression -> ( expression ) .)
    ID              reduce using rule 49 (expression -> ( expression ) .)
    IF              reduce using rule 49 (expression -> ( expression ) .)
    WHILE           reduce using rule 49 (expression -> ( expression ) .)
    FOR             reduce using rule 49 (expression -> ( expression ) .)
    BREAK           reduce using rule 49 (expression -> ( expression ) .)
    CONTINUE        reduce using rule 49 (expression -> ( expression ) .)
    RETURN          reduce using rule 49 (expression -> ( expression ) .)
    PRINT           reduce using rule 49 (expression -> ( expression ) .)
    (               reduce using rule 49 (expression -> ( expression ) .)
    EYE             reduce using rule 49 (expression -> ( expression ) .)
    ONES            reduce using rule 49 (expression -> ( expression ) .)
    ZEROS           reduce using rule 49 (expression -> ( expression ) .)
    FLOATNUM        reduce using rule 49 (expression -> ( expression ) .)
    INTNUM          reduce using rule 49 (expression -> ( expression ) .)
    STRING          reduce using rule 49 (expression -> ( expression ) .)
    $end            reduce using rule 49 (expression -> ( expression ) .)
    )               reduce using rule 49 (expression -> ( expression ) .)
    ;               reduce using rule 49 (expression -> ( expression ) .)
    ,               reduce using rule 49 (expression -> ( expression ) .)
    }               reduce using rule 49 (expression -> ( expression ) .)
    ELSE            reduce using rule 49 (expression -> ( expression ) .)
    :               reduce using rule 49 (expression -> ( expression ) .)
    {               reduce using rule 49 (expression -> ( expression ) .)


state 84

    (24) while_instr -> WHILE ( instruction . ) instruction
    (25) while_instr -> WHILE ( instruction . ) { instructions }

    )               shift and go to state 100


state 85

    (26) for_instr -> FOR range instruction .

    ID              reduce using rule 26 (for_instr -> FOR range instruction .)
    IF              reduce using rule 26 (for_instr -> FOR range instruction .)
    WHILE           reduce using rule 26 (for_instr -> FOR range instruction .)
    FOR             reduce using rule 26 (for_instr -> FOR range instruction .)
    BREAK           reduce using rule 26 (for_instr -> FOR range instruction .)
    CONTINUE        reduce using rule 26 (for_instr -> FOR range instruction .)
    RETURN          reduce using rule 26 (for_instr -> FOR range instruction .)
    PRINT           reduce using rule 26 (for_instr -> FOR range instruction .)
    (               reduce using rule 26 (for_instr -> FOR range instruction .)
    EYE             reduce using rule 26 (for_instr -> FOR range instruction .)
    ONES            reduce using rule 26 (for_instr -> FOR range instruction .)
    ZEROS           reduce using rule 26 (for_instr -> FOR range instruction .)
    FLOATNUM        reduce using rule 26 (for_instr -> FOR range instruction .)
    INTNUM          reduce using rule 26 (for_instr -> FOR range instruction .)
    STRING          reduce using rule 26 (for_instr -> FOR range instruction .)
    $end            reduce using rule 26 (for_instr -> FOR range instruction .)
    )               reduce using rule 26 (for_instr -> FOR range instruction .)
    }               reduce using rule 26 (for_instr -> FOR range instruction .)
    ELSE            reduce using rule 26 (for_instr -> FOR range instruction .)


state 86

    (27) for_instr -> FOR range { . instruction }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 101
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 87

    (28) range -> ID = . expression : expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 102

state 88

    (31) return_instr -> RETURN expression ; .

    ID              reduce using rule 31 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 31 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 31 (return_instr -> RETURN expression ; .)
    FOR             reduce using rule 31 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 31 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 31 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 31 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 31 (return_instr -> RETURN expression ; .)
    (               reduce using rule 31 (return_instr -> RETURN expression ; .)
    EYE             reduce using rule 31 (return_instr -> RETURN expression ; .)
    ONES            reduce using rule 31 (return_instr -> RETURN expression ; .)
    ZEROS           reduce using rule 31 (return_instr -> RETURN expression ; .)
    FLOATNUM        reduce using rule 31 (return_instr -> RETURN expression ; .)
    INTNUM          reduce using rule 31 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 31 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 31 (return_instr -> RETURN expression ; .)
    )               reduce using rule 31 (return_instr -> RETURN expression ; .)
    }               reduce using rule 31 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 31 (return_instr -> RETURN expression ; .)


state 89

    (32) print_instr -> PRINT printable ; .

    ID              reduce using rule 32 (print_instr -> PRINT printable ; .)
    IF              reduce using rule 32 (print_instr -> PRINT printable ; .)
    WHILE           reduce using rule 32 (print_instr -> PRINT printable ; .)
    FOR             reduce using rule 32 (print_instr -> PRINT printable ; .)
    BREAK           reduce using rule 32 (print_instr -> PRINT printable ; .)
    CONTINUE        reduce using rule 32 (print_instr -> PRINT printable ; .)
    RETURN          reduce using rule 32 (print_instr -> PRINT printable ; .)
    PRINT           reduce using rule 32 (print_instr -> PRINT printable ; .)
    (               reduce using rule 32 (print_instr -> PRINT printable ; .)
    EYE             reduce using rule 32 (print_instr -> PRINT printable ; .)
    ONES            reduce using rule 32 (print_instr -> PRINT printable ; .)
    ZEROS           reduce using rule 32 (print_instr -> PRINT printable ; .)
    FLOATNUM        reduce using rule 32 (print_instr -> PRINT printable ; .)
    INTNUM          reduce using rule 32 (print_instr -> PRINT printable ; .)
    STRING          reduce using rule 32 (print_instr -> PRINT printable ; .)
    $end            reduce using rule 32 (print_instr -> PRINT printable ; .)
    )               reduce using rule 32 (print_instr -> PRINT printable ; .)
    }               reduce using rule 32 (print_instr -> PRINT printable ; .)
    ELSE            reduce using rule 32 (print_instr -> PRINT printable ; .)


state 90

    (33) printable -> printable , . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 103

state 91

    (50) expression -> EYE ( expression . )
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    )               shift and go to state 104
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 92

    (51) expression -> ONES ( expression . )
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    )               shift and go to state 105
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 93

    (52) expression -> ZEROS ( expression . )
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    )               shift and go to state 106
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 94

    (13) assign_instr -> ID = expression ; .

    ID              reduce using rule 13 (assign_instr -> ID = expression ; .)
    IF              reduce using rule 13 (assign_instr -> ID = expression ; .)
    WHILE           reduce using rule 13 (assign_instr -> ID = expression ; .)
    FOR             reduce using rule 13 (assign_instr -> ID = expression ; .)
    BREAK           reduce using rule 13 (assign_instr -> ID = expression ; .)
    CONTINUE        reduce using rule 13 (assign_instr -> ID = expression ; .)
    RETURN          reduce using rule 13 (assign_instr -> ID = expression ; .)
    PRINT           reduce using rule 13 (assign_instr -> ID = expression ; .)
    (               reduce using rule 13 (assign_instr -> ID = expression ; .)
    EYE             reduce using rule 13 (assign_instr -> ID = expression ; .)
    ONES            reduce using rule 13 (assign_instr -> ID = expression ; .)
    ZEROS           reduce using rule 13 (assign_instr -> ID = expression ; .)
    FLOATNUM        reduce using rule 13 (assign_instr -> ID = expression ; .)
    INTNUM          reduce using rule 13 (assign_instr -> ID = expression ; .)
    STRING          reduce using rule 13 (assign_instr -> ID = expression ; .)
    $end            reduce using rule 13 (assign_instr -> ID = expression ; .)
    )               reduce using rule 13 (assign_instr -> ID = expression ; .)
    }               reduce using rule 13 (assign_instr -> ID = expression ; .)
    ELSE            reduce using rule 13 (assign_instr -> ID = expression ; .)


state 95

    (14) assign_instr -> ID PLUSASSIGN expression ; .

    ID              reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    IF              reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    WHILE           reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    FOR             reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    BREAK           reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    CONTINUE        reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    RETURN          reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    PRINT           reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    (               reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    EYE             reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    ONES            reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    ZEROS           reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    FLOATNUM        reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    INTNUM          reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    STRING          reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    $end            reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    )               reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    }               reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)
    ELSE            reduce using rule 14 (assign_instr -> ID PLUSASSIGN expression ; .)


state 96

    (15) assign_instr -> ID SUBASSIGN expression ; .

    ID              reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    IF              reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    WHILE           reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    FOR             reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    BREAK           reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    CONTINUE        reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    RETURN          reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    PRINT           reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    (               reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    EYE             reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    ONES            reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    ZEROS           reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    FLOATNUM        reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    INTNUM          reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    STRING          reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    $end            reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    )               reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    }               reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)
    ELSE            reduce using rule 15 (assign_instr -> ID SUBASSIGN expression ; .)


state 97

    (16) assign_instr -> ID MULASSIGN expression ; .

    ID              reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    IF              reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    WHILE           reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    FOR             reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    BREAK           reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    CONTINUE        reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    RETURN          reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    PRINT           reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    (               reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    EYE             reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    ONES            reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    ZEROS           reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    FLOATNUM        reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    INTNUM          reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    STRING          reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    $end            reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    )               reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    }               reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)
    ELSE            reduce using rule 16 (assign_instr -> ID MULASSIGN expression ; .)


state 98

    (17) assign_instr -> ID DIVASSIGN expression ; .

    ID              reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    IF              reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    WHILE           reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    FOR             reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    BREAK           reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    CONTINUE        reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    RETURN          reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    PRINT           reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    (               reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    EYE             reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    ONES            reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    ZEROS           reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    FLOATNUM        reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    INTNUM          reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    STRING          reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    $end            reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    )               reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    }               reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)
    ELSE            reduce using rule 17 (assign_instr -> ID DIVASSIGN expression ; .)


state 99

    (18) if_instr -> IF ( expression ) . { instructions }
    (19) if_instr -> IF ( expression ) . instruction
    (20) if_instr -> IF ( expression ) . instruction ELSE instruction
    (21) if_instr -> IF ( expression ) . instruction ELSE { instructions }
    (22) if_instr -> IF ( expression ) . { instructions } ELSE instruction
    (23) if_instr -> IF ( expression ) . { instructions } ELSE { instructions }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    {               shift and go to state 107
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 108
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 100

    (24) while_instr -> WHILE ( instruction ) . instruction
    (25) while_instr -> WHILE ( instruction ) . { instructions }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    {               shift and go to state 110
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 109
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 101

    (27) for_instr -> FOR range { instruction . }

    }               shift and go to state 111


state 102

    (28) range -> ID = expression . : expression
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    :               shift and go to state 112
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 103

    (33) printable -> printable , expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    ;               reduce using rule 33 (printable -> printable , expression .)
    ,               reduce using rule 33 (printable -> printable , expression .)
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 104

    (50) expression -> EYE ( expression ) .

    LESSER_THAN     reduce using rule 50 (expression -> EYE ( expression ) .)
    GREATER_THAN    reduce using rule 50 (expression -> EYE ( expression ) .)
    LESSER_EQUAL    reduce using rule 50 (expression -> EYE ( expression ) .)
    GREATER_EQUAL   reduce using rule 50 (expression -> EYE ( expression ) .)
    NOT_EQUAL       reduce using rule 50 (expression -> EYE ( expression ) .)
    EQUAL           reduce using rule 50 (expression -> EYE ( expression ) .)
    +               reduce using rule 50 (expression -> EYE ( expression ) .)
    -               reduce using rule 50 (expression -> EYE ( expression ) .)
    *               reduce using rule 50 (expression -> EYE ( expression ) .)
    /               reduce using rule 50 (expression -> EYE ( expression ) .)
    DOTADD          reduce using rule 50 (expression -> EYE ( expression ) .)
    DOTSUB          reduce using rule 50 (expression -> EYE ( expression ) .)
    DOTMUL          reduce using rule 50 (expression -> EYE ( expression ) .)
    DOTDIV          reduce using rule 50 (expression -> EYE ( expression ) .)
    '               reduce using rule 50 (expression -> EYE ( expression ) .)
    ID              reduce using rule 50 (expression -> EYE ( expression ) .)
    IF              reduce using rule 50 (expression -> EYE ( expression ) .)
    WHILE           reduce using rule 50 (expression -> EYE ( expression ) .)
    FOR             reduce using rule 50 (expression -> EYE ( expression ) .)
    BREAK           reduce using rule 50 (expression -> EYE ( expression ) .)
    CONTINUE        reduce using rule 50 (expression -> EYE ( expression ) .)
    RETURN          reduce using rule 50 (expression -> EYE ( expression ) .)
    PRINT           reduce using rule 50 (expression -> EYE ( expression ) .)
    (               reduce using rule 50 (expression -> EYE ( expression ) .)
    EYE             reduce using rule 50 (expression -> EYE ( expression ) .)
    ONES            reduce using rule 50 (expression -> EYE ( expression ) .)
    ZEROS           reduce using rule 50 (expression -> EYE ( expression ) .)
    FLOATNUM        reduce using rule 50 (expression -> EYE ( expression ) .)
    INTNUM          reduce using rule 50 (expression -> EYE ( expression ) .)
    STRING          reduce using rule 50 (expression -> EYE ( expression ) .)
    $end            reduce using rule 50 (expression -> EYE ( expression ) .)
    )               reduce using rule 50 (expression -> EYE ( expression ) .)
    ;               reduce using rule 50 (expression -> EYE ( expression ) .)
    ,               reduce using rule 50 (expression -> EYE ( expression ) .)
    }               reduce using rule 50 (expression -> EYE ( expression ) .)
    ELSE            reduce using rule 50 (expression -> EYE ( expression ) .)
    :               reduce using rule 50 (expression -> EYE ( expression ) .)
    {               reduce using rule 50 (expression -> EYE ( expression ) .)


state 105

    (51) expression -> ONES ( expression ) .

    LESSER_THAN     reduce using rule 51 (expression -> ONES ( expression ) .)
    GREATER_THAN    reduce using rule 51 (expression -> ONES ( expression ) .)
    LESSER_EQUAL    reduce using rule 51 (expression -> ONES ( expression ) .)
    GREATER_EQUAL   reduce using rule 51 (expression -> ONES ( expression ) .)
    NOT_EQUAL       reduce using rule 51 (expression -> ONES ( expression ) .)
    EQUAL           reduce using rule 51 (expression -> ONES ( expression ) .)
    +               reduce using rule 51 (expression -> ONES ( expression ) .)
    -               reduce using rule 51 (expression -> ONES ( expression ) .)
    *               reduce using rule 51 (expression -> ONES ( expression ) .)
    /               reduce using rule 51 (expression -> ONES ( expression ) .)
    DOTADD          reduce using rule 51 (expression -> ONES ( expression ) .)
    DOTSUB          reduce using rule 51 (expression -> ONES ( expression ) .)
    DOTMUL          reduce using rule 51 (expression -> ONES ( expression ) .)
    DOTDIV          reduce using rule 51 (expression -> ONES ( expression ) .)
    '               reduce using rule 51 (expression -> ONES ( expression ) .)
    ID              reduce using rule 51 (expression -> ONES ( expression ) .)
    IF              reduce using rule 51 (expression -> ONES ( expression ) .)
    WHILE           reduce using rule 51 (expression -> ONES ( expression ) .)
    FOR             reduce using rule 51 (expression -> ONES ( expression ) .)
    BREAK           reduce using rule 51 (expression -> ONES ( expression ) .)
    CONTINUE        reduce using rule 51 (expression -> ONES ( expression ) .)
    RETURN          reduce using rule 51 (expression -> ONES ( expression ) .)
    PRINT           reduce using rule 51 (expression -> ONES ( expression ) .)
    (               reduce using rule 51 (expression -> ONES ( expression ) .)
    EYE             reduce using rule 51 (expression -> ONES ( expression ) .)
    ONES            reduce using rule 51 (expression -> ONES ( expression ) .)
    ZEROS           reduce using rule 51 (expression -> ONES ( expression ) .)
    FLOATNUM        reduce using rule 51 (expression -> ONES ( expression ) .)
    INTNUM          reduce using rule 51 (expression -> ONES ( expression ) .)
    STRING          reduce using rule 51 (expression -> ONES ( expression ) .)
    $end            reduce using rule 51 (expression -> ONES ( expression ) .)
    )               reduce using rule 51 (expression -> ONES ( expression ) .)
    ;               reduce using rule 51 (expression -> ONES ( expression ) .)
    ,               reduce using rule 51 (expression -> ONES ( expression ) .)
    }               reduce using rule 51 (expression -> ONES ( expression ) .)
    ELSE            reduce using rule 51 (expression -> ONES ( expression ) .)
    :               reduce using rule 51 (expression -> ONES ( expression ) .)
    {               reduce using rule 51 (expression -> ONES ( expression ) .)


state 106

    (52) expression -> ZEROS ( expression ) .

    LESSER_THAN     reduce using rule 52 (expression -> ZEROS ( expression ) .)
    GREATER_THAN    reduce using rule 52 (expression -> ZEROS ( expression ) .)
    LESSER_EQUAL    reduce using rule 52 (expression -> ZEROS ( expression ) .)
    GREATER_EQUAL   reduce using rule 52 (expression -> ZEROS ( expression ) .)
    NOT_EQUAL       reduce using rule 52 (expression -> ZEROS ( expression ) .)
    EQUAL           reduce using rule 52 (expression -> ZEROS ( expression ) .)
    +               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    -               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    *               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    /               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    DOTADD          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    DOTSUB          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    DOTMUL          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    DOTDIV          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    '               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ID              reduce using rule 52 (expression -> ZEROS ( expression ) .)
    IF              reduce using rule 52 (expression -> ZEROS ( expression ) .)
    WHILE           reduce using rule 52 (expression -> ZEROS ( expression ) .)
    FOR             reduce using rule 52 (expression -> ZEROS ( expression ) .)
    BREAK           reduce using rule 52 (expression -> ZEROS ( expression ) .)
    CONTINUE        reduce using rule 52 (expression -> ZEROS ( expression ) .)
    RETURN          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    PRINT           reduce using rule 52 (expression -> ZEROS ( expression ) .)
    (               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    EYE             reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ONES            reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ZEROS           reduce using rule 52 (expression -> ZEROS ( expression ) .)
    FLOATNUM        reduce using rule 52 (expression -> ZEROS ( expression ) .)
    INTNUM          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    STRING          reduce using rule 52 (expression -> ZEROS ( expression ) .)
    $end            reduce using rule 52 (expression -> ZEROS ( expression ) .)
    )               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ;               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ,               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    }               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    ELSE            reduce using rule 52 (expression -> ZEROS ( expression ) .)
    :               reduce using rule 52 (expression -> ZEROS ( expression ) .)
    {               reduce using rule 52 (expression -> ZEROS ( expression ) .)


state 107

    (18) if_instr -> IF ( expression ) { . instructions }
    (22) if_instr -> IF ( expression ) { . instructions } ELSE instruction
    (23) if_instr -> IF ( expression ) { . instructions } ELSE { instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instructions                   shift and go to state 113
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 108

    (19) if_instr -> IF ( expression ) instruction .
    (20) if_instr -> IF ( expression ) instruction . ELSE instruction
    (21) if_instr -> IF ( expression ) instruction . ELSE { instructions }

    ID              reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    IF              reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    WHILE           reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    FOR             reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    BREAK           reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    RETURN          reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    PRINT           reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    (               reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    EYE             reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    ONES            reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    ZEROS           reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    FLOATNUM        reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    INTNUM          reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    STRING          reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    $end            reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    )               reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    }               reduce using rule 19 (if_instr -> IF ( expression ) instruction .)
    ELSE            shift and go to state 114

  ! ELSE            [ reduce using rule 19 (if_instr -> IF ( expression ) instruction .) ]


state 109

    (24) while_instr -> WHILE ( instruction ) instruction .

    ID              reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    IF              reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    WHILE           reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    FOR             reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    BREAK           reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    CONTINUE        reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    RETURN          reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    PRINT           reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    (               reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    EYE             reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    ONES            reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    ZEROS           reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    FLOATNUM        reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    INTNUM          reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    STRING          reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    $end            reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    )               reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    }               reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)
    ELSE            reduce using rule 24 (while_instr -> WHILE ( instruction ) instruction .)


state 110

    (25) while_instr -> WHILE ( instruction ) { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 3
    instructions                   shift and go to state 115
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 111

    (27) for_instr -> FOR range { instruction } .

    ID              reduce using rule 27 (for_instr -> FOR range { instruction } .)
    IF              reduce using rule 27 (for_instr -> FOR range { instruction } .)
    WHILE           reduce using rule 27 (for_instr -> FOR range { instruction } .)
    FOR             reduce using rule 27 (for_instr -> FOR range { instruction } .)
    BREAK           reduce using rule 27 (for_instr -> FOR range { instruction } .)
    CONTINUE        reduce using rule 27 (for_instr -> FOR range { instruction } .)
    RETURN          reduce using rule 27 (for_instr -> FOR range { instruction } .)
    PRINT           reduce using rule 27 (for_instr -> FOR range { instruction } .)
    (               reduce using rule 27 (for_instr -> FOR range { instruction } .)
    EYE             reduce using rule 27 (for_instr -> FOR range { instruction } .)
    ONES            reduce using rule 27 (for_instr -> FOR range { instruction } .)
    ZEROS           reduce using rule 27 (for_instr -> FOR range { instruction } .)
    FLOATNUM        reduce using rule 27 (for_instr -> FOR range { instruction } .)
    INTNUM          reduce using rule 27 (for_instr -> FOR range { instruction } .)
    STRING          reduce using rule 27 (for_instr -> FOR range { instruction } .)
    $end            reduce using rule 27 (for_instr -> FOR range { instruction } .)
    )               reduce using rule 27 (for_instr -> FOR range { instruction } .)
    }               reduce using rule 27 (for_instr -> FOR range { instruction } .)
    ELSE            reduce using rule 27 (for_instr -> FOR range { instruction } .)


state 112

    (28) range -> ID = expression : . expression
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27
    ID              shift and go to state 51

    expression                     shift and go to state 116

state 113

    (18) if_instr -> IF ( expression ) { instructions . }
    (22) if_instr -> IF ( expression ) { instructions . } ELSE instruction
    (23) if_instr -> IF ( expression ) { instructions . } ELSE { instructions }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    }               shift and go to state 117
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 114

    (20) if_instr -> IF ( expression ) instruction ELSE . instruction
    (21) if_instr -> IF ( expression ) instruction ELSE . { instructions }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    {               shift and go to state 119
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 118
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 115

    (25) while_instr -> WHILE ( instruction ) { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    }               shift and go to state 120
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11
    expression                     shift and go to state 12

state 116

    (28) range -> ID = expression : expression .
    (35) expression -> expression . LESSER_THAN expression
    (36) expression -> expression . GREATER_THAN expression
    (37) expression -> expression . LESSER_EQUAL expression
    (38) expression -> expression . GREATER_EQUAL expression
    (39) expression -> expression . NOT_EQUAL expression
    (40) expression -> expression . EQUAL expression
    (41) expression -> expression . + expression
    (42) expression -> expression . - expression
    (43) expression -> expression . * expression
    (44) expression -> expression . / expression
    (45) expression -> expression . DOTADD expression
    (46) expression -> expression . DOTSUB expression
    (47) expression -> expression . DOTMUL expression
    (48) expression -> expression . DOTDIV expression
    (53) expression -> expression . '

    {               reduce using rule 28 (range -> ID = expression : expression .)
    ID              reduce using rule 28 (range -> ID = expression : expression .)
    IF              reduce using rule 28 (range -> ID = expression : expression .)
    WHILE           reduce using rule 28 (range -> ID = expression : expression .)
    FOR             reduce using rule 28 (range -> ID = expression : expression .)
    BREAK           reduce using rule 28 (range -> ID = expression : expression .)
    CONTINUE        reduce using rule 28 (range -> ID = expression : expression .)
    RETURN          reduce using rule 28 (range -> ID = expression : expression .)
    PRINT           reduce using rule 28 (range -> ID = expression : expression .)
    (               reduce using rule 28 (range -> ID = expression : expression .)
    EYE             reduce using rule 28 (range -> ID = expression : expression .)
    ONES            reduce using rule 28 (range -> ID = expression : expression .)
    ZEROS           reduce using rule 28 (range -> ID = expression : expression .)
    FLOATNUM        reduce using rule 28 (range -> ID = expression : expression .)
    INTNUM          reduce using rule 28 (range -> ID = expression : expression .)
    STRING          reduce using rule 28 (range -> ID = expression : expression .)
    LESSER_THAN     shift and go to state 29
    GREATER_THAN    shift and go to state 30
    LESSER_EQUAL    shift and go to state 31
    GREATER_EQUAL   shift and go to state 32
    NOT_EQUAL       shift and go to state 33
    EQUAL           shift and go to state 34
    +               shift and go to state 35
    -               shift and go to state 36
    *               shift and go to state 37
    /               shift and go to state 38
    DOTADD          shift and go to state 39
    DOTSUB          shift and go to state 40
    DOTMUL          shift and go to state 41
    DOTDIV          shift and go to state 42
    '               shift and go to state 43


state 117

    (18) if_instr -> IF ( expression ) { instructions } .
    (22) if_instr -> IF ( expression ) { instructions } . ELSE instruction
    (23) if_instr -> IF ( expression ) { instructions } . ELSE { instructions }

    ID              reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    IF              reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    WHILE           reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    FOR             reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    BREAK           reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    CONTINUE        reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    RETURN          reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    PRINT           reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    (               reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    EYE             reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    ONES            reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    ZEROS           reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    FLOATNUM        reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    INTNUM          reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    STRING          reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    $end            reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    )               reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    }               reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .)
    ELSE            shift and go to state 121

  ! ELSE            [ reduce using rule 18 (if_instr -> IF ( expression ) { instructions } .) ]


state 118

    (20) if_instr -> IF ( expression ) instruction ELSE instruction .

    ID              reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    (               reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    EYE             reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ONES            reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ZEROS           reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    FLOATNUM        reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    INTNUM          reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    STRING          reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    )               reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 20 (if_instr -> IF ( expression ) instruction ELSE instruction .)


state 119

    (21) if_instr -> IF ( expression ) instruction ELSE { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 3
    instructions                   shift and go to state 122
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 120

    (25) while_instr -> WHILE ( instruction ) { instructions } .

    ID              reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    IF              reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    WHILE           reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    FOR             reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    BREAK           reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    CONTINUE        reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    RETURN          reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    PRINT           reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    (               reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    EYE             reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    ONES            reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    ZEROS           reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    FLOATNUM        reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    INTNUM          reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    STRING          reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    $end            reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    )               reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    }               reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)
    ELSE            reduce using rule 25 (while_instr -> WHILE ( instruction ) { instructions } .)


state 121

    (22) if_instr -> IF ( expression ) { instructions } ELSE . instruction
    (23) if_instr -> IF ( expression ) { instructions } ELSE . { instructions }
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    {               shift and go to state 123
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 124
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 122

    (21) if_instr -> IF ( expression ) instruction ELSE { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    }               shift and go to state 125
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 123

    (23) if_instr -> IF ( expression ) { instructions } ELSE { . instructions }
    (2) instructions -> . instructions instruction
    (3) instructions -> . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instructions                   shift and go to state 126
    instruction                    shift and go to state 3
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 124

    (22) if_instr -> IF ( expression ) { instructions } ELSE instruction .

    ID              reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    IF              reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    WHILE           reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    FOR             reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    BREAK           reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    CONTINUE        reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    RETURN          reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    PRINT           reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    (               reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    EYE             reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ONES            reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ZEROS           reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    FLOATNUM        reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    INTNUM          reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    STRING          reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    $end            reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    )               reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    }               reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)
    ELSE            reduce using rule 22 (if_instr -> IF ( expression ) { instructions } ELSE instruction .)


state 125

    (21) if_instr -> IF ( expression ) instruction ELSE { instructions } .

    ID              reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    IF              reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    WHILE           reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    FOR             reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    BREAK           reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    CONTINUE        reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    RETURN          reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    PRINT           reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    (               reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    EYE             reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ONES            reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ZEROS           reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    FLOATNUM        reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    INTNUM          reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    STRING          reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    $end            reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    )               reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    }               reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)
    ELSE            reduce using rule 21 (if_instr -> IF ( expression ) instruction ELSE { instructions } .)


state 126

    (23) if_instr -> IF ( expression ) { instructions } ELSE { instructions . }
    (2) instructions -> instructions . instruction
    (4) instruction -> . assign_instr
    (5) instruction -> . if_instr
    (6) instruction -> . while_instr
    (7) instruction -> . for_instr
    (8) instruction -> . break_instr
    (9) instruction -> . continue_instr
    (10) instruction -> . return_instr
    (11) instruction -> . print_instr
    (12) instruction -> . expression
    (13) assign_instr -> . ID = expression ;
    (14) assign_instr -> . ID PLUSASSIGN expression ;
    (15) assign_instr -> . ID SUBASSIGN expression ;
    (16) assign_instr -> . ID MULASSIGN expression ;
    (17) assign_instr -> . ID DIVASSIGN expression ;
    (18) if_instr -> . IF ( expression ) { instructions }
    (19) if_instr -> . IF ( expression ) instruction
    (20) if_instr -> . IF ( expression ) instruction ELSE instruction
    (21) if_instr -> . IF ( expression ) instruction ELSE { instructions }
    (22) if_instr -> . IF ( expression ) { instructions } ELSE instruction
    (23) if_instr -> . IF ( expression ) { instructions } ELSE { instructions }
    (24) while_instr -> . WHILE ( instruction ) instruction
    (25) while_instr -> . WHILE ( instruction ) { instructions }
    (26) for_instr -> . FOR range instruction
    (27) for_instr -> . FOR range { instruction }
    (29) break_instr -> . BREAK ;
    (30) continue_instr -> . CONTINUE ;
    (31) return_instr -> . RETURN expression ;
    (32) print_instr -> . PRINT printable ;
    (35) expression -> . expression LESSER_THAN expression
    (36) expression -> . expression GREATER_THAN expression
    (37) expression -> . expression LESSER_EQUAL expression
    (38) expression -> . expression GREATER_EQUAL expression
    (39) expression -> . expression NOT_EQUAL expression
    (40) expression -> . expression EQUAL expression
    (41) expression -> . expression + expression
    (42) expression -> . expression - expression
    (43) expression -> . expression * expression
    (44) expression -> . expression / expression
    (45) expression -> . expression DOTADD expression
    (46) expression -> . expression DOTSUB expression
    (47) expression -> . expression DOTMUL expression
    (48) expression -> . expression DOTDIV expression
    (49) expression -> . ( expression )
    (50) expression -> . EYE ( expression )
    (51) expression -> . ONES ( expression )
    (52) expression -> . ZEROS ( expression )
    (53) expression -> . expression '
    (54) expression -> . FLOATNUM
    (55) expression -> . INTNUM
    (56) expression -> . STRING
    (57) expression -> . ID

    }               shift and go to state 127
    ID              shift and go to state 13
    IF              shift and go to state 14
    WHILE           shift and go to state 16
    FOR             shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    RETURN          shift and go to state 20
    PRINT           shift and go to state 21
    (               shift and go to state 15
    EYE             shift and go to state 22
    ONES            shift and go to state 23
    ZEROS           shift and go to state 24
    FLOATNUM        shift and go to state 25
    INTNUM          shift and go to state 26
    STRING          shift and go to state 27

    expression                     shift and go to state 12
    instruction                    shift and go to state 28
    assign_instr                   shift and go to state 4
    if_instr                       shift and go to state 5
    while_instr                    shift and go to state 6
    for_instr                      shift and go to state 7
    break_instr                    shift and go to state 8
    continue_instr                 shift and go to state 9
    return_instr                   shift and go to state 10
    print_instr                    shift and go to state 11

state 127

    (23) if_instr -> IF ( expression ) { instructions } ELSE { instructions } .

    ID              reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    IF              reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    WHILE           reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    FOR             reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    BREAK           reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    CONTINUE        reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    RETURN          reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    PRINT           reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    (               reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    EYE             reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ONES            reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ZEROS           reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    FLOATNUM        reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    INTNUM          reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    STRING          reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    $end            reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    )               reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    }               reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)
    ELSE            reduce using rule 23 (if_instr -> IF ( expression ) { instructions } ELSE { instructions } .)

